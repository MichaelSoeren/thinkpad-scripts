Description: Disables touchpad movements
Ignores touchpad movement history events in order to disable mouse pointer movements with touchpads (prevents accidental mouse pointer movements while typing). Useful for trackpoint devices.
 .
 libinput (1.0.1-1ubuntu1) wily; urgency=medium
 .
   * Merge new upstream release from Debian.
Author: Timo Aaltonen <tjaalton@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- libinput-1.0.1.orig/src/evdev-mt-touchpad.c
+++ libinput-1.0.1/src/evdev-mt-touchpad.c
@@ -917,7 +917,7 @@ tp_process_state(struct tp_dispatch *tp,
 		tp_palm_detect(tp, t, time);
 
 		tp_motion_hysteresis(tp, t);
-		tp_motion_history_push(t);
+		/*tp_motion_history_push(t);*/
 
 		tp_unpin_finger(tp, t);
 
--- /dev/null
+++ libinput-1.0.1/tags
@@ -0,0 +1,4586 @@
+!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
+!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
+!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
+!_TAG_PROGRAM_NAME	Exuberant Ctags	//
+!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
+!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
+ABS_BRAKE	include/linux/input.h	824;"	d
+ABS_CNT	include/linux/input.h	860;"	d
+ABS_DISTANCE	include/linux/input.h	834;"	d
+ABS_GAS	include/linux/input.h	823;"	d
+ABS_HAT0X	include/linux/input.h	825;"	d
+ABS_HAT0Y	include/linux/input.h	826;"	d
+ABS_HAT1X	include/linux/input.h	827;"	d
+ABS_HAT1Y	include/linux/input.h	828;"	d
+ABS_HAT2X	include/linux/input.h	829;"	d
+ABS_HAT2Y	include/linux/input.h	830;"	d
+ABS_HAT3X	include/linux/input.h	831;"	d
+ABS_HAT3Y	include/linux/input.h	832;"	d
+ABS_MAX	include/linux/input.h	859;"	d
+ABS_MISC	include/linux/input.h	841;"	d
+ABS_MT_BLOB_ID	include/linux/input.h	852;"	d
+ABS_MT_DISTANCE	include/linux/input.h	855;"	d
+ABS_MT_ORIENTATION	include/linux/input.h	848;"	d
+ABS_MT_POSITION_X	include/linux/input.h	849;"	d
+ABS_MT_POSITION_Y	include/linux/input.h	850;"	d
+ABS_MT_PRESSURE	include/linux/input.h	854;"	d
+ABS_MT_SLOT	include/linux/input.h	843;"	d
+ABS_MT_TOOL_TYPE	include/linux/input.h	851;"	d
+ABS_MT_TOOL_X	include/linux/input.h	856;"	d
+ABS_MT_TOOL_Y	include/linux/input.h	857;"	d
+ABS_MT_TOUCH_MAJOR	include/linux/input.h	844;"	d
+ABS_MT_TOUCH_MINOR	include/linux/input.h	845;"	d
+ABS_MT_TRACKING_ID	include/linux/input.h	853;"	d
+ABS_MT_WIDTH_MAJOR	include/linux/input.h	846;"	d
+ABS_MT_WIDTH_MINOR	include/linux/input.h	847;"	d
+ABS_PRESSURE	include/linux/input.h	833;"	d
+ABS_RUDDER	include/linux/input.h	821;"	d
+ABS_RX	include/linux/input.h	817;"	d
+ABS_RY	include/linux/input.h	818;"	d
+ABS_RZ	include/linux/input.h	819;"	d
+ABS_THROTTLE	include/linux/input.h	820;"	d
+ABS_TILT_X	include/linux/input.h	835;"	d
+ABS_TILT_Y	include/linux/input.h	836;"	d
+ABS_TOOL_WIDTH	include/linux/input.h	837;"	d
+ABS_VOLUME	include/linux/input.h	839;"	d
+ABS_WHEEL	include/linux/input.h	822;"	d
+ABS_X	include/linux/input.h	814;"	d
+ABS_Y	include/linux/input.h	815;"	d
+ABS_Z	include/linux/input.h	816;"	d
+ARRAY_FOR_EACH	.pc/touch-point-orientation-size.patch/src/libinput-util.h	89;"	d
+ARRAY_FOR_EACH	src/libinput-util.h	89;"	d
+ARRAY_LENGTH	.pc/touch-point-orientation-size.patch/src/libinput-util.h	88;"	d
+ARRAY_LENGTH	src/libinput-util.h	88;"	d
+AS_MASK	.pc/touch-point-orientation-size.patch/src/libinput-util.h	91;"	d
+AS_MASK	src/libinput-util.h	91;"	d
+BACKEND_DEVICE	tools/shared.h	/^	BACKEND_DEVICE,$/;"	e	enum:tools_backend
+BACKEND_UDEV	tools/shared.h	/^	BACKEND_UDEV$/;"	e	enum:tools_backend
+BTN_0	include/linux/input.h	478;"	d
+BTN_1	include/linux/input.h	479;"	d
+BTN_2	include/linux/input.h	480;"	d
+BTN_3	include/linux/input.h	481;"	d
+BTN_4	include/linux/input.h	482;"	d
+BTN_5	include/linux/input.h	483;"	d
+BTN_6	include/linux/input.h	484;"	d
+BTN_7	include/linux/input.h	485;"	d
+BTN_8	include/linux/input.h	486;"	d
+BTN_9	include/linux/input.h	487;"	d
+BTN_A	include/linux/input.h	516;"	d
+BTN_B	include/linux/input.h	518;"	d
+BTN_BACK	include/linux/input.h	496;"	d
+BTN_BASE	include/linux/input.h	506;"	d
+BTN_BASE2	include/linux/input.h	507;"	d
+BTN_BASE3	include/linux/input.h	508;"	d
+BTN_BASE4	include/linux/input.h	509;"	d
+BTN_BASE5	include/linux/input.h	510;"	d
+BTN_BASE6	include/linux/input.h	511;"	d
+BTN_C	include/linux/input.h	519;"	d
+BTN_DEAD	include/linux/input.h	512;"	d
+BTN_DIGI	include/linux/input.h	535;"	d
+BTN_DPAD_DOWN	include/linux/input.h	722;"	d
+BTN_DPAD_LEFT	include/linux/input.h	723;"	d
+BTN_DPAD_RIGHT	include/linux/input.h	724;"	d
+BTN_DPAD_UP	include/linux/input.h	721;"	d
+BTN_EAST	include/linux/input.h	517;"	d
+BTN_EXTRA	include/linux/input.h	494;"	d
+BTN_FORWARD	include/linux/input.h	495;"	d
+BTN_GAMEPAD	include/linux/input.h	514;"	d
+BTN_GEAR_DOWN	include/linux/input.h	553;"	d
+BTN_GEAR_UP	include/linux/input.h	554;"	d
+BTN_JOYSTICK	include/linux/input.h	499;"	d
+BTN_LEFT	include/linux/input.h	490;"	d
+BTN_MIDDLE	include/linux/input.h	492;"	d
+BTN_MISC	include/linux/input.h	477;"	d
+BTN_MODE	include/linux/input.h	531;"	d
+BTN_MOUSE	include/linux/input.h	489;"	d
+BTN_NORTH	include/linux/input.h	520;"	d
+BTN_PINKIE	include/linux/input.h	505;"	d
+BTN_RIGHT	include/linux/input.h	491;"	d
+BTN_SELECT	include/linux/input.h	529;"	d
+BTN_SIDE	include/linux/input.h	493;"	d
+BTN_SOUTH	include/linux/input.h	515;"	d
+BTN_START	include/linux/input.h	530;"	d
+BTN_STYLUS	include/linux/input.h	546;"	d
+BTN_STYLUS2	include/linux/input.h	547;"	d
+BTN_TASK	include/linux/input.h	497;"	d
+BTN_THUMB	include/linux/input.h	501;"	d
+BTN_THUMB2	include/linux/input.h	502;"	d
+BTN_THUMBL	include/linux/input.h	532;"	d
+BTN_THUMBR	include/linux/input.h	533;"	d
+BTN_TL	include/linux/input.h	525;"	d
+BTN_TL2	include/linux/input.h	527;"	d
+BTN_TOOL_AIRBRUSH	include/linux/input.h	540;"	d
+BTN_TOOL_BRUSH	include/linux/input.h	538;"	d
+BTN_TOOL_DOUBLETAP	include/linux/input.h	548;"	d
+BTN_TOOL_FINGER	include/linux/input.h	541;"	d
+BTN_TOOL_LENS	include/linux/input.h	543;"	d
+BTN_TOOL_MOUSE	include/linux/input.h	542;"	d
+BTN_TOOL_PEN	include/linux/input.h	536;"	d
+BTN_TOOL_PENCIL	include/linux/input.h	539;"	d
+BTN_TOOL_QUADTAP	include/linux/input.h	550;"	d
+BTN_TOOL_QUINTTAP	include/linux/input.h	544;"	d
+BTN_TOOL_RUBBER	include/linux/input.h	537;"	d
+BTN_TOOL_TRIPLETAP	include/linux/input.h	549;"	d
+BTN_TOP	include/linux/input.h	503;"	d
+BTN_TOP2	include/linux/input.h	504;"	d
+BTN_TOUCH	include/linux/input.h	545;"	d
+BTN_TR	include/linux/input.h	526;"	d
+BTN_TR2	include/linux/input.h	528;"	d
+BTN_TRIGGER	include/linux/input.h	500;"	d
+BTN_TRIGGER_HAPPY	include/linux/input.h	746;"	d
+BTN_TRIGGER_HAPPY1	include/linux/input.h	747;"	d
+BTN_TRIGGER_HAPPY10	include/linux/input.h	756;"	d
+BTN_TRIGGER_HAPPY11	include/linux/input.h	757;"	d
+BTN_TRIGGER_HAPPY12	include/linux/input.h	758;"	d
+BTN_TRIGGER_HAPPY13	include/linux/input.h	759;"	d
+BTN_TRIGGER_HAPPY14	include/linux/input.h	760;"	d
+BTN_TRIGGER_HAPPY15	include/linux/input.h	761;"	d
+BTN_TRIGGER_HAPPY16	include/linux/input.h	762;"	d
+BTN_TRIGGER_HAPPY17	include/linux/input.h	763;"	d
+BTN_TRIGGER_HAPPY18	include/linux/input.h	764;"	d
+BTN_TRIGGER_HAPPY19	include/linux/input.h	765;"	d
+BTN_TRIGGER_HAPPY2	include/linux/input.h	748;"	d
+BTN_TRIGGER_HAPPY20	include/linux/input.h	766;"	d
+BTN_TRIGGER_HAPPY21	include/linux/input.h	767;"	d
+BTN_TRIGGER_HAPPY22	include/linux/input.h	768;"	d
+BTN_TRIGGER_HAPPY23	include/linux/input.h	769;"	d
+BTN_TRIGGER_HAPPY24	include/linux/input.h	770;"	d
+BTN_TRIGGER_HAPPY25	include/linux/input.h	771;"	d
+BTN_TRIGGER_HAPPY26	include/linux/input.h	772;"	d
+BTN_TRIGGER_HAPPY27	include/linux/input.h	773;"	d
+BTN_TRIGGER_HAPPY28	include/linux/input.h	774;"	d
+BTN_TRIGGER_HAPPY29	include/linux/input.h	775;"	d
+BTN_TRIGGER_HAPPY3	include/linux/input.h	749;"	d
+BTN_TRIGGER_HAPPY30	include/linux/input.h	776;"	d
+BTN_TRIGGER_HAPPY31	include/linux/input.h	777;"	d
+BTN_TRIGGER_HAPPY32	include/linux/input.h	778;"	d
+BTN_TRIGGER_HAPPY33	include/linux/input.h	779;"	d
+BTN_TRIGGER_HAPPY34	include/linux/input.h	780;"	d
+BTN_TRIGGER_HAPPY35	include/linux/input.h	781;"	d
+BTN_TRIGGER_HAPPY36	include/linux/input.h	782;"	d
+BTN_TRIGGER_HAPPY37	include/linux/input.h	783;"	d
+BTN_TRIGGER_HAPPY38	include/linux/input.h	784;"	d
+BTN_TRIGGER_HAPPY39	include/linux/input.h	785;"	d
+BTN_TRIGGER_HAPPY4	include/linux/input.h	750;"	d
+BTN_TRIGGER_HAPPY40	include/linux/input.h	786;"	d
+BTN_TRIGGER_HAPPY5	include/linux/input.h	751;"	d
+BTN_TRIGGER_HAPPY6	include/linux/input.h	752;"	d
+BTN_TRIGGER_HAPPY7	include/linux/input.h	753;"	d
+BTN_TRIGGER_HAPPY8	include/linux/input.h	754;"	d
+BTN_TRIGGER_HAPPY9	include/linux/input.h	755;"	d
+BTN_WEST	include/linux/input.h	522;"	d
+BTN_WHEEL	include/linux/input.h	552;"	d
+BTN_X	include/linux/input.h	521;"	d
+BTN_Y	include/linux/input.h	523;"	d
+BTN_Z	include/linux/input.h	524;"	d
+BUS_ADB	include/linux/input.h	959;"	d
+BUS_AMIGA	include/linux/input.h	958;"	d
+BUS_ATARI	include/linux/input.h	963;"	d
+BUS_BLUETOOTH	include/linux/input.h	949;"	d
+BUS_GAMEPORT	include/linux/input.h	956;"	d
+BUS_GSC	include/linux/input.h	962;"	d
+BUS_HIL	include/linux/input.h	948;"	d
+BUS_HOST	include/linux/input.h	961;"	d
+BUS_I2C	include/linux/input.h	960;"	d
+BUS_I8042	include/linux/input.h	953;"	d
+BUS_ISA	include/linux/input.h	952;"	d
+BUS_ISAPNP	include/linux/input.h	946;"	d
+BUS_PARPORT	include/linux/input.h	957;"	d
+BUS_PCI	include/linux/input.h	945;"	d
+BUS_RS232	include/linux/input.h	955;"	d
+BUS_SPI	include/linux/input.h	964;"	d
+BUS_USB	include/linux/input.h	947;"	d
+BUS_VIRTUAL	include/linux/input.h	950;"	d
+BUS_XTKBD	include/linux/input.h	954;"	d
+BUTTON_EVENT_IN_AREA	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_IN_AREA,$/;"	e	enum:button_event
+BUTTON_EVENT_IN_BOTTOM_L	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_IN_BOTTOM_L,$/;"	e	enum:button_event
+BUTTON_EVENT_IN_BOTTOM_R	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_IN_BOTTOM_R = 30,$/;"	e	enum:button_event
+BUTTON_EVENT_IN_TOP_L	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_IN_TOP_L,$/;"	e	enum:button_event
+BUTTON_EVENT_IN_TOP_M	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_IN_TOP_M,$/;"	e	enum:button_event
+BUTTON_EVENT_IN_TOP_R	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_IN_TOP_R,$/;"	e	enum:button_event
+BUTTON_EVENT_PRESS	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_PRESS,$/;"	e	enum:button_event
+BUTTON_EVENT_RELEASE	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_RELEASE,$/;"	e	enum:button_event
+BUTTON_EVENT_TIMEOUT	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_TIMEOUT,$/;"	e	enum:button_event
+BUTTON_EVENT_UP	src/evdev-mt-touchpad.h	/^	BUTTON_EVENT_UP,$/;"	e	enum:button_event
+BUTTON_STATE_AREA	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_AREA,$/;"	e	enum:button_state
+BUTTON_STATE_BOTTOM	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_BOTTOM,$/;"	e	enum:button_state
+BUTTON_STATE_IGNORE	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_IGNORE,$/;"	e	enum:button_state
+BUTTON_STATE_NONE	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_NONE,$/;"	e	enum:button_state
+BUTTON_STATE_TOP	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_TOP,$/;"	e	enum:button_state
+BUTTON_STATE_TOP_NEW	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_TOP_NEW,$/;"	e	enum:button_state
+BUTTON_STATE_TOP_TO_IGNORE	src/evdev-mt-touchpad.h	/^	BUTTON_STATE_TOP_TO_IGNORE,$/;"	e	enum:button_state
+CASE_RETURN_STRING	.pc/touch-point-orientation-size.patch/src/libinput-util.h	46;"	d
+CASE_RETURN_STRING	src/libinput-util.h	46;"	d
+CK_DOUBLE_EQ_EPSILON	test/litest.h	568;"	d
+CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
+DEFAULT_ACCELERATION	src/filter.c	110;"	d	file:
+DEFAULT_BUTTON_ENTER_TIMEOUT	src/evdev-mt-touchpad-buttons.c	35;"	d	file:
+DEFAULT_BUTTON_LEAVE_TIMEOUT	src/evdev-mt-touchpad-buttons.c	36;"	d	file:
+DEFAULT_DRAG_TIMEOUT_PERIOD	src/evdev-mt-touchpad-tap.c	39;"	d	file:
+DEFAULT_GESTURE_2FG_SCROLL_TIMEOUT	src/evdev-mt-touchpad-gestures.c	33;"	d	file:
+DEFAULT_GESTURE_SWITCH_TIMEOUT	src/evdev-mt-touchpad-gestures.c	32;"	d	file:
+DEFAULT_INCLINE	src/filter.c	111;"	d	file:
+DEFAULT_KEYBOARD_ACTIVITY_TIMEOUT_1	src/evdev-mt-touchpad.c	34;"	d	file:
+DEFAULT_KEYBOARD_ACTIVITY_TIMEOUT_2	src/evdev-mt-touchpad.c	35;"	d	file:
+DEFAULT_MIDDLE_BUTTON_SCROLL_TIMEOUT	.pc/touch-point-orientation-size.patch/src/evdev.c	47;"	d	file:
+DEFAULT_MIDDLE_BUTTON_SCROLL_TIMEOUT	src/evdev.c	47;"	d	file:
+DEFAULT_MOUSE_DPI	.pc/touch-point-orientation-size.patch/src/libinput-util.h	44;"	d
+DEFAULT_MOUSE_DPI	src/libinput-util.h	44;"	d
+DEFAULT_SCROLL_THRESHOLD	src/evdev-mt-touchpad-edge-scroll.c	39;"	d	file:
+DEFAULT_TAP_MOVE_THRESHOLD	src/evdev-mt-touchpad-tap.c	40;"	d	file:
+DEFAULT_TAP_TIMEOUT_PERIOD	src/evdev-mt-touchpad-tap.c	38;"	d	file:
+DEFAULT_THRESHOLD	src/filter.c	108;"	d	file:
+DEFAULT_TOUCH_MAJOR	src/evdev.c	50;"	d	file:
+DEFAULT_TOUCH_MINOR	src/evdev.c	51;"	d	file:
+DEFAULT_TOUCH_ORIENTATION	src/evdev.c	49;"	d	file:
+DEFAULT_TOUCH_PRESSURE	src/evdev.c	48;"	d	file:
+DEFAULT_TRACKPOINT_ACCEL	.pc/touch-point-orientation-size.patch/src/evdev.h	43;"	d
+DEFAULT_TRACKPOINT_ACCEL	src/evdev.h	43;"	d
+DEFAULT_TRACKPOINT_ACTIVITY_TIMEOUT	src/evdev-mt-touchpad.c	33;"	d	file:
+DEFAULT_WHEEL_CLICK_ANGLE	.pc/touch-point-orientation-size.patch/src/evdev.c	46;"	d	file:
+DEFAULT_WHEEL_CLICK_ANGLE	src/evdev.c	46;"	d	file:
+E	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	E  = 1 << 2,$/;"	e	enum:directions
+E	src/libinput-private.h	/^	E  = 1 << 2,$/;"	e	enum:directions
+EDGE_BOTTOM	src/evdev-mt-touchpad.h	/^	EDGE_BOTTOM = (1 << 1),$/;"	e	enum:tp_edge
+EDGE_NONE	src/evdev-mt-touchpad.h	/^	EDGE_NONE = 0,$/;"	e	enum:tp_edge
+EDGE_RIGHT	src/evdev-mt-touchpad.h	/^	EDGE_RIGHT = (1 << 0),$/;"	e	enum:tp_edge
+EDGE_SCROLL_TOUCH_STATE_AREA	src/evdev-mt-touchpad.h	/^	EDGE_SCROLL_TOUCH_STATE_AREA,$/;"	e	enum:tp_edge_scroll_touch_state
+EDGE_SCROLL_TOUCH_STATE_EDGE	src/evdev-mt-touchpad.h	/^	EDGE_SCROLL_TOUCH_STATE_EDGE,$/;"	e	enum:tp_edge_scroll_touch_state
+EDGE_SCROLL_TOUCH_STATE_EDGE_NEW	src/evdev-mt-touchpad.h	/^	EDGE_SCROLL_TOUCH_STATE_EDGE_NEW,$/;"	e	enum:tp_edge_scroll_touch_state
+EDGE_SCROLL_TOUCH_STATE_NONE	src/evdev-mt-touchpad.h	/^	EDGE_SCROLL_TOUCH_STATE_NONE,$/;"	e	enum:tp_edge_scroll_touch_state
+EVDEV_ABSOLUTE_MOTION	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_ABSOLUTE_MOTION,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MOTION	src/evdev.h	/^	EVDEV_ABSOLUTE_MOTION,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MT_DOWN	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_ABSOLUTE_MT_DOWN,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MT_DOWN	src/evdev.h	/^	EVDEV_ABSOLUTE_MT_DOWN,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MT_MOTION	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_ABSOLUTE_MT_MOTION,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MT_MOTION	src/evdev.h	/^	EVDEV_ABSOLUTE_MT_MOTION,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MT_UP	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_ABSOLUTE_MT_UP,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_MT_UP	src/evdev.h	/^	EVDEV_ABSOLUTE_MT_UP,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_TOUCH_DOWN	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_ABSOLUTE_TOUCH_DOWN,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_TOUCH_DOWN	src/evdev.h	/^	EVDEV_ABSOLUTE_TOUCH_DOWN,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_TOUCH_UP	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_ABSOLUTE_TOUCH_UP,$/;"	e	enum:evdev_event_type
+EVDEV_ABSOLUTE_TOUCH_UP	src/evdev.h	/^	EVDEV_ABSOLUTE_TOUCH_UP,$/;"	e	enum:evdev_event_type
+EVDEV_DEVICE_GESTURE	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_DEVICE_GESTURE = (1 << 5),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_GESTURE	src/evdev.h	/^	EVDEV_DEVICE_GESTURE = (1 << 5),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_KEYBOARD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_DEVICE_KEYBOARD = (1 << 1),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_KEYBOARD	src/evdev.h	/^	EVDEV_DEVICE_KEYBOARD = (1 << 1),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_POINTER	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_DEVICE_POINTER = (1 << 0),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_POINTER	src/evdev.h	/^	EVDEV_DEVICE_POINTER = (1 << 0),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_TOUCH	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_DEVICE_TOUCH = (1 << 2),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_DEVICE_TOUCH	src/evdev.h	/^	EVDEV_DEVICE_TOUCH = (1 << 2),$/;"	e	enum:evdev_device_seat_capability
+EVDEV_FAKE_RESOLUTION	.pc/touch-point-orientation-size.patch/src/evdev.h	46;"	d
+EVDEV_FAKE_RESOLUTION	src/evdev.h	46;"	d
+EVDEV_H	.pc/touch-point-orientation-size.patch/src/evdev.h	27;"	d
+EVDEV_H	src/evdev.h	27;"	d
+EVDEV_KEY_TYPE_BUTTON	.pc/touch-point-orientation-size.patch/src/evdev.c	/^	EVDEV_KEY_TYPE_BUTTON,$/;"	e	enum:evdev_key_type	file:
+EVDEV_KEY_TYPE_BUTTON	src/evdev.c	/^	EVDEV_KEY_TYPE_BUTTON,$/;"	e	enum:evdev_key_type	file:
+EVDEV_KEY_TYPE_KEY	.pc/touch-point-orientation-size.patch/src/evdev.c	/^	EVDEV_KEY_TYPE_KEY,$/;"	e	enum:evdev_key_type	file:
+EVDEV_KEY_TYPE_KEY	src/evdev.c	/^	EVDEV_KEY_TYPE_KEY,$/;"	e	enum:evdev_key_type	file:
+EVDEV_KEY_TYPE_NONE	.pc/touch-point-orientation-size.patch/src/evdev.c	/^	EVDEV_KEY_TYPE_NONE,$/;"	e	enum:evdev_key_type	file:
+EVDEV_KEY_TYPE_NONE	src/evdev.c	/^	EVDEV_KEY_TYPE_NONE,$/;"	e	enum:evdev_key_type	file:
+EVDEV_MODEL_ALPS_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_ALPS_TOUCHPAD = (1 << 8),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_ALPS_TOUCHPAD	src/evdev.h	/^	EVDEV_MODEL_ALPS_TOUCHPAD = (1 << 8),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_APPLE_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_APPLE_TOUCHPAD = (1 << 6),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_APPLE_TOUCHPAD	src/evdev.h	/^	EVDEV_MODEL_APPLE_TOUCHPAD = (1 << 6),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_CHROMEBOOK	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_CHROMEBOOK = (1 << 1),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_CHROMEBOOK	src/evdev.h	/^	EVDEV_MODEL_CHROMEBOOK = (1 << 1),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_CLEVO_W740SU	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_CLEVO_W740SU = (1 << 5),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_CLEVO_W740SU	src/evdev.h	/^	EVDEV_MODEL_CLEVO_W740SU = (1 << 5),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_DEFAULT	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_DEFAULT = 0,$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_DEFAULT	src/evdev.h	/^	EVDEV_MODEL_DEFAULT = 0,$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_ELANTECH_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_ELANTECH_TOUCHPAD = (1 << 11),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_ELANTECH_TOUCHPAD	src/evdev.h	/^	EVDEV_MODEL_ELANTECH_TOUCHPAD = (1 << 11),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_JUMPING_SEMI_MT	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_JUMPING_SEMI_MT = (1 << 10),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_JUMPING_SEMI_MT	src/evdev.h	/^	EVDEV_MODEL_JUMPING_SEMI_MT = (1 << 10),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_LENOVO_X230	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_LENOVO_X230 = (1 << 0),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_LENOVO_X230	src/evdev.h	/^	EVDEV_MODEL_LENOVO_X230 = (1 << 0),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYNAPTICS_SERIAL_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_SYNAPTICS_SERIAL_TOUCHPAD = (1 << 9),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYNAPTICS_SERIAL_TOUCHPAD	src/evdev.h	/^	EVDEV_MODEL_SYNAPTICS_SERIAL_TOUCHPAD = (1 << 9),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYSTEM76_BONOBO	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_SYSTEM76_BONOBO = (1 << 2),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYSTEM76_BONOBO	src/evdev.h	/^	EVDEV_MODEL_SYSTEM76_BONOBO = (1 << 2),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYSTEM76_GALAGO	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_SYSTEM76_GALAGO = (1 << 3),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYSTEM76_GALAGO	src/evdev.h	/^	EVDEV_MODEL_SYSTEM76_GALAGO = (1 << 3),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYSTEM76_KUDU	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_SYSTEM76_KUDU = (1 << 4),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_SYSTEM76_KUDU	src/evdev.h	/^	EVDEV_MODEL_SYSTEM76_KUDU = (1 << 4),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_WACOM_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_MODEL_WACOM_TOUCHPAD = (1 << 7),$/;"	e	enum:evdev_device_model
+EVDEV_MODEL_WACOM_TOUCHPAD	src/evdev.h	/^	EVDEV_MODEL_WACOM_TOUCHPAD = (1 << 7),$/;"	e	enum:evdev_device_model
+EVDEV_MT_TOUCHPAD_H	src/evdev-mt-touchpad.h	25;"	d
+EVDEV_NONE	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_NONE,$/;"	e	enum:evdev_event_type
+EVDEV_NONE	src/evdev.h	/^	EVDEV_NONE,$/;"	e	enum:evdev_event_type
+EVDEV_RELATIVE_MOTION	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_RELATIVE_MOTION,$/;"	e	enum:evdev_event_type
+EVDEV_RELATIVE_MOTION	src/evdev.h	/^	EVDEV_RELATIVE_MOTION,$/;"	e	enum:evdev_event_type
+EVDEV_TAG_EXTERNAL_MOUSE	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_TAG_EXTERNAL_MOUSE = (1 << 0),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_EXTERNAL_MOUSE	src/evdev.h	/^	EVDEV_TAG_EXTERNAL_MOUSE = (1 << 0),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_INTERNAL_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_TAG_INTERNAL_TOUCHPAD = (1 << 1),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_INTERNAL_TOUCHPAD	src/evdev.h	/^	EVDEV_TAG_INTERNAL_TOUCHPAD = (1 << 1),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_KEYBOARD	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_TAG_KEYBOARD = (1 << 3),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_KEYBOARD	src/evdev.h	/^	EVDEV_TAG_KEYBOARD = (1 << 3),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_TRACKPOINT	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	EVDEV_TAG_TRACKPOINT = (1 << 2),$/;"	e	enum:evdev_device_tags
+EVDEV_TAG_TRACKPOINT	src/evdev.h	/^	EVDEV_TAG_TRACKPOINT = (1 << 2),$/;"	e	enum:evdev_device_tags
+EVDEV_UDEV_TAG_ACCELEROMETER	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_ACCELEROMETER = (1 << 7),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_ACCELEROMETER	src/evdev.c	/^        EVDEV_UDEV_TAG_ACCELEROMETER = (1 << 7),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_BUTTONSET	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_BUTTONSET = (1 << 8),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_BUTTONSET	src/evdev.c	/^        EVDEV_UDEV_TAG_BUTTONSET = (1 << 8),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_INPUT	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_INPUT = (1 << 0),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_INPUT	src/evdev.c	/^        EVDEV_UDEV_TAG_INPUT = (1 << 0),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_JOYSTICK	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_JOYSTICK = (1 << 6),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_JOYSTICK	src/evdev.c	/^        EVDEV_UDEV_TAG_JOYSTICK = (1 << 6),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_KEYBOARD	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_KEYBOARD = (1 << 1),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_KEYBOARD	src/evdev.c	/^        EVDEV_UDEV_TAG_KEYBOARD = (1 << 1),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_MOUSE	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_MOUSE = (1 << 2),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_MOUSE	src/evdev.c	/^        EVDEV_UDEV_TAG_MOUSE = (1 << 2),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_POINTINGSTICK	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_POINTINGSTICK = (1 << 9),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_POINTINGSTICK	src/evdev.c	/^        EVDEV_UDEV_TAG_POINTINGSTICK = (1 << 9),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_TABLET	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_TABLET = (1 << 5),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_TABLET	src/evdev.c	/^        EVDEV_UDEV_TAG_TABLET = (1 << 5),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_TOUCHPAD	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_TOUCHPAD = (1 << 3),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_TOUCHPAD	src/evdev.c	/^        EVDEV_UDEV_TAG_TOUCHPAD = (1 << 3),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_TOUCHSCREEN	.pc/touch-point-orientation-size.patch/src/evdev.c	/^        EVDEV_UDEV_TAG_TOUCHSCREEN = (1 << 4),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UDEV_TAG_TOUCHSCREEN	src/evdev.c	/^        EVDEV_UDEV_TAG_TOUCHSCREEN = (1 << 4),$/;"	e	enum:evdev_device_udev_tags	file:
+EVDEV_UNHANDLED_DEVICE	.pc/touch-point-orientation-size.patch/src/evdev.h	231;"	d
+EVDEV_UNHANDLED_DEVICE	src/evdev.h	236;"	d
+EVIOCGABS	include/linux/input.h	143;"	d
+EVIOCGBIT	include/linux/input.h	142;"	d
+EVIOCGEFFECTS	include/linux/input.h	148;"	d
+EVIOCGID	include/linux/input.h	97;"	d
+EVIOCGKEY	include/linux/input.h	137;"	d
+EVIOCGKEYCODE	include/linux/input.h	101;"	d
+EVIOCGKEYCODE_V2	include/linux/input.h	102;"	d
+EVIOCGLED	include/linux/input.h	138;"	d
+EVIOCGMTSLOTS	include/linux/input.h	135;"	d
+EVIOCGNAME	include/linux/input.h	106;"	d
+EVIOCGPHYS	include/linux/input.h	107;"	d
+EVIOCGPROP	include/linux/input.h	109;"	d
+EVIOCGRAB	include/linux/input.h	150;"	d
+EVIOCGREP	include/linux/input.h	98;"	d
+EVIOCGSND	include/linux/input.h	139;"	d
+EVIOCGSW	include/linux/input.h	140;"	d
+EVIOCGUNIQ	include/linux/input.h	108;"	d
+EVIOCGVERSION	include/linux/input.h	96;"	d
+EVIOCREVOKE	include/linux/input.h	151;"	d
+EVIOCRMFF	include/linux/input.h	147;"	d
+EVIOCSABS	include/linux/input.h	144;"	d
+EVIOCSCLOCKID	include/linux/input.h	153;"	d
+EVIOCSFF	include/linux/input.h	146;"	d
+EVIOCSKEYCODE	include/linux/input.h	103;"	d
+EVIOCSKEYCODE_V2	include/linux/input.h	104;"	d
+EVIOCSREP	include/linux/input.h	99;"	d
+EV_ABS	include/linux/input.h	177;"	d
+EV_CNT	include/linux/input.h	187;"	d
+EV_FF	include/linux/input.h	183;"	d
+EV_FF_STATUS	include/linux/input.h	185;"	d
+EV_KEY	include/linux/input.h	175;"	d
+EV_LED	include/linux/input.h	180;"	d
+EV_MAX	include/linux/input.h	186;"	d
+EV_MSC	include/linux/input.h	178;"	d
+EV_PWR	include/linux/input.h	184;"	d
+EV_REL	include/linux/input.h	176;"	d
+EV_REP	include/linux/input.h	182;"	d
+EV_SND	include/linux/input.h	181;"	d
+EV_SW	include/linux/input.h	179;"	d
+EV_SYN	include/linux/input.h	174;"	d
+EV_VERSION	include/linux/input.h	31;"	d
+FAKE_FINGER_OVERFLOW	src/evdev-mt-touchpad.c	37;"	d	file:
+FF_AUTOCENTER	include/linux/input.h	1191;"	d
+FF_CNT	include/linux/input.h	1194;"	d
+FF_CONSTANT	include/linux/input.h	1162;"	d
+FF_CUSTOM	include/linux/input.h	1181;"	d
+FF_DAMPER	include/linux/input.h	1165;"	d
+FF_EFFECT_MAX	include/linux/input.h	1170;"	d
+FF_EFFECT_MIN	include/linux/input.h	1169;"	d
+FF_FRICTION	include/linux/input.h	1164;"	d
+FF_GAIN	include/linux/input.h	1190;"	d
+FF_INERTIA	include/linux/input.h	1166;"	d
+FF_MAX	include/linux/input.h	1193;"	d
+FF_PERIODIC	include/linux/input.h	1161;"	d
+FF_RAMP	include/linux/input.h	1167;"	d
+FF_RUMBLE	include/linux/input.h	1160;"	d
+FF_SAW_DOWN	include/linux/input.h	1180;"	d
+FF_SAW_UP	include/linux/input.h	1179;"	d
+FF_SINE	include/linux/input.h	1178;"	d
+FF_SPRING	include/linux/input.h	1163;"	d
+FF_SQUARE	include/linux/input.h	1176;"	d
+FF_STATUS_MAX	include/linux/input.h	979;"	d
+FF_STATUS_PLAYING	include/linux/input.h	978;"	d
+FF_STATUS_STOPPED	include/linux/input.h	977;"	d
+FF_TRIANGLE	include/linux/input.h	1177;"	d
+FF_WAVEFORM_MAX	include/linux/input.h	1184;"	d
+FF_WAVEFORM_MIN	include/linux/input.h	1183;"	d
+FILTER_H	src/filter.h	26;"	d
+FILTER_PRIVATE_H	src/filter-private.h	25;"	d
+GESTURE_2FG_STATE_NONE	src/evdev-mt-touchpad.h	/^	GESTURE_2FG_STATE_NONE,$/;"	e	enum:tp_gesture_2fg_state
+GESTURE_2FG_STATE_PINCH	src/evdev-mt-touchpad.h	/^	GESTURE_2FG_STATE_PINCH,$/;"	e	enum:tp_gesture_2fg_state
+GESTURE_2FG_STATE_SCROLL	src/evdev-mt-touchpad.h	/^	GESTURE_2FG_STATE_SCROLL,$/;"	e	enum:tp_gesture_2fg_state
+GESTURE_2FG_STATE_UNKNOWN	src/evdev-mt-touchpad.h	/^	GESTURE_2FG_STATE_UNKNOWN,$/;"	e	enum:tp_gesture_2fg_state
+ID_BUS	include/linux/input.h	940;"	d
+ID_PRODUCT	include/linux/input.h	942;"	d
+ID_VENDOR	include/linux/input.h	941;"	d
+ID_VERSION	include/linux/input.h	943;"	d
+INPUT_KEYMAP_BY_INDEX	include/linux/input.h	88;"	d
+INPUT_PROP_ACCELEROMETER	include/linux/input.h	165;"	d
+INPUT_PROP_BUTTONPAD	include/linux/input.h	161;"	d
+INPUT_PROP_CNT	include/linux/input.h	168;"	d
+INPUT_PROP_DIRECT	include/linux/input.h	160;"	d
+INPUT_PROP_MAX	include/linux/input.h	167;"	d
+INPUT_PROP_POINTER	include/linux/input.h	159;"	d
+INPUT_PROP_POINTING_STICK	include/linux/input.h	164;"	d
+INPUT_PROP_SEMI_MT	include/linux/input.h	162;"	d
+INPUT_PROP_TOPBUTTONPAD	include/linux/input.h	163;"	d
+KEY_0	include/linux/input.h	222;"	d
+KEY_1	include/linux/input.h	213;"	d
+KEY_102ND	include/linux/input.h	297;"	d
+KEY_10CHANNELSDOWN	include/linux/input.h	648;"	d
+KEY_10CHANNELSUP	include/linux/input.h	647;"	d
+KEY_2	include/linux/input.h	214;"	d
+KEY_3	include/linux/input.h	215;"	d
+KEY_4	include/linux/input.h	216;"	d
+KEY_5	include/linux/input.h	217;"	d
+KEY_6	include/linux/input.h	218;"	d
+KEY_7	include/linux/input.h	219;"	d
+KEY_8	include/linux/input.h	220;"	d
+KEY_9	include/linux/input.h	221;"	d
+KEY_A	include/linux/input.h	241;"	d
+KEY_AB	include/linux/input.h	610;"	d
+KEY_ADDRESSBOOK	include/linux/input.h	633;"	d
+KEY_AGAIN	include/linux/input.h	343;"	d
+KEY_ALS_TOGGLE	include/linux/input.h	726;"	d
+KEY_ALTERASE	include/linux/input.h	434;"	d
+KEY_ANGLE	include/linux/input.h	575;"	d
+KEY_APOSTROPHE	include/linux/input.h	251;"	d
+KEY_APPSELECT	include/linux/input.h	732;"	d
+KEY_ARCHIVE	include/linux/input.h	565;"	d
+KEY_ATTENDANT_OFF	include/linux/input.h	717;"	d
+KEY_ATTENDANT_ON	include/linux/input.h	716;"	d
+KEY_ATTENDANT_TOGGLE	include/linux/input.h	718;"	d
+KEY_AUDIO	include/linux/input.h	596;"	d
+KEY_AUX	include/linux/input.h	594;"	d
+KEY_B	include/linux/input.h	259;"	d
+KEY_BACK	include/linux/input.h	373;"	d
+KEY_BACKSLASH	include/linux/input.h	254;"	d
+KEY_BACKSPACE	include/linux/input.h	225;"	d
+KEY_BASSBOOST	include/linux/input.h	421;"	d
+KEY_BATTERY	include/linux/input.h	452;"	d
+KEY_BLUE	include/linux/input.h	605;"	d
+KEY_BLUETOOTH	include/linux/input.h	454;"	d
+KEY_BOOKMARKS	include/linux/input.h	371;"	d
+KEY_BREAK	include/linux/input.h	615;"	d
+KEY_BRIGHTNESSDOWN	include/linux/input.h	436;"	d
+KEY_BRIGHTNESSUP	include/linux/input.h	437;"	d
+KEY_BRIGHTNESS_AUTO	include/linux/input.h	463;"	d
+KEY_BRIGHTNESS_CYCLE	include/linux/input.h	462;"	d
+KEY_BRIGHTNESS_MAX	include/linux/input.h	737;"	d
+KEY_BRIGHTNESS_MIN	include/linux/input.h	736;"	d
+KEY_BRIGHTNESS_TOGGLE	include/linux/input.h	636;"	d
+KEY_BRIGHTNESS_ZERO	include/linux/input.h	466;"	d
+KEY_BRL_DOT1	include/linux/input.h	678;"	d
+KEY_BRL_DOT10	include/linux/input.h	687;"	d
+KEY_BRL_DOT2	include/linux/input.h	679;"	d
+KEY_BRL_DOT3	include/linux/input.h	680;"	d
+KEY_BRL_DOT4	include/linux/input.h	681;"	d
+KEY_BRL_DOT5	include/linux/input.h	682;"	d
+KEY_BRL_DOT6	include/linux/input.h	683;"	d
+KEY_BRL_DOT7	include/linux/input.h	684;"	d
+KEY_BRL_DOT8	include/linux/input.h	685;"	d
+KEY_BRL_DOT9	include/linux/input.h	686;"	d
+KEY_BUTTONCONFIG	include/linux/input.h	728;"	d
+KEY_C	include/linux/input.h	257;"	d
+KEY_CALC	include/linux/input.h	354;"	d
+KEY_CALENDAR	include/linux/input.h	601;"	d
+KEY_CAMERA	include/linux/input.h	424;"	d
+KEY_CAMERA_DOWN	include/linux/input.h	712;"	d
+KEY_CAMERA_FOCUS	include/linux/input.h	702;"	d
+KEY_CAMERA_LEFT	include/linux/input.h	713;"	d
+KEY_CAMERA_RIGHT	include/linux/input.h	714;"	d
+KEY_CAMERA_UP	include/linux/input.h	711;"	d
+KEY_CAMERA_ZOOMIN	include/linux/input.h	709;"	d
+KEY_CAMERA_ZOOMOUT	include/linux/input.h	710;"	d
+KEY_CANCEL	include/linux/input.h	435;"	d
+KEY_CAPSLOCK	include/linux/input.h	269;"	d
+KEY_CD	include/linux/input.h	587;"	d
+KEY_CHANNEL	include/linux/input.h	567;"	d
+KEY_CHANNELDOWN	include/linux/input.h	607;"	d
+KEY_CHANNELUP	include/linux/input.h	606;"	d
+KEY_CHAT	include/linux/input.h	428;"	d
+KEY_CLEAR	include/linux/input.h	559;"	d
+KEY_CLOSE	include/linux/input.h	418;"	d
+KEY_CLOSECD	include/linux/input.h	375;"	d
+KEY_CNT	include/linux/input.h	791;"	d
+KEY_COFFEE	include/linux/input.h	366;"	d
+KEY_COMMA	include/linux/input.h	262;"	d
+KEY_COMPOSE	include/linux/input.h	340;"	d
+KEY_COMPUTER	include/linux/input.h	372;"	d
+KEY_CONFIG	include/linux/input.h	386;"	d
+KEY_CONNECT	include/linux/input.h	430;"	d
+KEY_CONTEXT_MENU	include/linux/input.h	645;"	d
+KEY_CONTROLPANEL	include/linux/input.h	731;"	d
+KEY_COPY	include/linux/input.h	347;"	d
+KEY_CUT	include/linux/input.h	351;"	d
+KEY_CYCLEWINDOWS	include/linux/input.h	369;"	d
+KEY_D	include/linux/input.h	243;"	d
+KEY_DASHBOARD	include/linux/input.h	416;"	d
+KEY_DATABASE	include/linux/input.h	630;"	d
+KEY_DELETE	include/linux/input.h	322;"	d
+KEY_DELETEFILE	include/linux/input.h	360;"	d
+KEY_DEL_EOL	include/linux/input.h	651;"	d
+KEY_DEL_EOS	include/linux/input.h	652;"	d
+KEY_DEL_LINE	include/linux/input.h	654;"	d
+KEY_DIGITS	include/linux/input.h	617;"	d
+KEY_DIRECTION	include/linux/input.h	368;"	d
+KEY_DIRECTORY	include/linux/input.h	598;"	d
+KEY_DISPLAYTOGGLE	include/linux/input.h	635;"	d
+KEY_DISPLAY_OFF	include/linux/input.h	467;"	d
+KEY_DOCUMENTS	include/linux/input.h	450;"	d
+KEY_DOLLAR	include/linux/input.h	640;"	d
+KEY_DOT	include/linux/input.h	263;"	d
+KEY_DOWN	include/linux/input.h	319;"	d
+KEY_DVD	include/linux/input.h	593;"	d
+KEY_E	include/linux/input.h	229;"	d
+KEY_EDIT	include/linux/input.h	391;"	d
+KEY_EDITOR	include/linux/input.h	626;"	d
+KEY_EJECTCD	include/linux/input.h	376;"	d
+KEY_EJECTCLOSECD	include/linux/input.h	377;"	d
+KEY_EMAIL	include/linux/input.h	427;"	d
+KEY_END	include/linux/input.h	318;"	d
+KEY_ENTER	include/linux/input.h	239;"	d
+KEY_EPG	include/linux/input.h	569;"	d
+KEY_EQUAL	include/linux/input.h	224;"	d
+KEY_ESC	include/linux/input.h	212;"	d
+KEY_EURO	include/linux/input.h	641;"	d
+KEY_EXIT	include/linux/input.h	389;"	d
+KEY_F	include/linux/input.h	244;"	d
+KEY_F1	include/linux/input.h	270;"	d
+KEY_F10	include/linux/input.h	279;"	d
+KEY_F11	include/linux/input.h	298;"	d
+KEY_F12	include/linux/input.h	299;"	d
+KEY_F13	include/linux/input.h	399;"	d
+KEY_F14	include/linux/input.h	400;"	d
+KEY_F15	include/linux/input.h	401;"	d
+KEY_F16	include/linux/input.h	402;"	d
+KEY_F17	include/linux/input.h	403;"	d
+KEY_F18	include/linux/input.h	404;"	d
+KEY_F19	include/linux/input.h	405;"	d
+KEY_F2	include/linux/input.h	271;"	d
+KEY_F20	include/linux/input.h	406;"	d
+KEY_F21	include/linux/input.h	407;"	d
+KEY_F22	include/linux/input.h	408;"	d
+KEY_F23	include/linux/input.h	409;"	d
+KEY_F24	include/linux/input.h	410;"	d
+KEY_F3	include/linux/input.h	272;"	d
+KEY_F4	include/linux/input.h	273;"	d
+KEY_F5	include/linux/input.h	274;"	d
+KEY_F6	include/linux/input.h	275;"	d
+KEY_F7	include/linux/input.h	276;"	d
+KEY_F8	include/linux/input.h	277;"	d
+KEY_F9	include/linux/input.h	278;"	d
+KEY_FASTFORWARD	include/linux/input.h	420;"	d
+KEY_FAVORITES	include/linux/input.h	568;"	d
+KEY_FILE	include/linux/input.h	358;"	d
+KEY_FINANCE	include/linux/input.h	431;"	d
+KEY_FIND	include/linux/input.h	350;"	d
+KEY_FIRST	include/linux/input.h	608;"	d
+KEY_FN	include/linux/input.h	656;"	d
+KEY_FN_1	include/linux/input.h	670;"	d
+KEY_FN_2	include/linux/input.h	671;"	d
+KEY_FN_B	include/linux/input.h	676;"	d
+KEY_FN_D	include/linux/input.h	672;"	d
+KEY_FN_E	include/linux/input.h	673;"	d
+KEY_FN_ESC	include/linux/input.h	657;"	d
+KEY_FN_F	include/linux/input.h	674;"	d
+KEY_FN_F1	include/linux/input.h	658;"	d
+KEY_FN_F10	include/linux/input.h	667;"	d
+KEY_FN_F11	include/linux/input.h	668;"	d
+KEY_FN_F12	include/linux/input.h	669;"	d
+KEY_FN_F2	include/linux/input.h	659;"	d
+KEY_FN_F3	include/linux/input.h	660;"	d
+KEY_FN_F4	include/linux/input.h	661;"	d
+KEY_FN_F5	include/linux/input.h	662;"	d
+KEY_FN_F6	include/linux/input.h	663;"	d
+KEY_FN_F7	include/linux/input.h	664;"	d
+KEY_FN_F8	include/linux/input.h	665;"	d
+KEY_FN_F9	include/linux/input.h	666;"	d
+KEY_FN_S	include/linux/input.h	675;"	d
+KEY_FORWARD	include/linux/input.h	374;"	d
+KEY_FORWARDMAIL	include/linux/input.h	448;"	d
+KEY_FRAMEBACK	include/linux/input.h	643;"	d
+KEY_FRAMEFORWARD	include/linux/input.h	644;"	d
+KEY_FRONT	include/linux/input.h	346;"	d
+KEY_G	include/linux/input.h	245;"	d
+KEY_GAMES	include/linux/input.h	621;"	d
+KEY_GOTO	include/linux/input.h	558;"	d
+KEY_GRAPHICSEDITOR	include/linux/input.h	628;"	d
+KEY_GRAVE	include/linux/input.h	252;"	d
+KEY_GREEN	include/linux/input.h	603;"	d
+KEY_H	include/linux/input.h	246;"	d
+KEY_HANGEUL	include/linux/input.h	334;"	d
+KEY_HANGUEL	include/linux/input.h	335;"	d
+KEY_HANJA	include/linux/input.h	336;"	d
+KEY_HELP	include/linux/input.h	352;"	d
+KEY_HENKAN	include/linux/input.h	303;"	d
+KEY_HIRAGANA	include/linux/input.h	302;"	d
+KEY_HOME	include/linux/input.h	313;"	d
+KEY_HOMEPAGE	include/linux/input.h	387;"	d
+KEY_HP	include/linux/input.h	423;"	d
+KEY_I	include/linux/input.h	234;"	d
+KEY_IMAGES	include/linux/input.h	649;"	d
+KEY_INFO	include/linux/input.h	562;"	d
+KEY_INSERT	include/linux/input.h	321;"	d
+KEY_INS_LINE	include/linux/input.h	653;"	d
+KEY_ISO	include/linux/input.h	385;"	d
+KEY_J	include/linux/input.h	247;"	d
+KEY_JOURNAL	include/linux/input.h	730;"	d
+KEY_K	include/linux/input.h	248;"	d
+KEY_KATAKANA	include/linux/input.h	301;"	d
+KEY_KATAKANAHIRAGANA	include/linux/input.h	304;"	d
+KEY_KBDILLUMDOWN	include/linux/input.h	443;"	d
+KEY_KBDILLUMTOGGLE	include/linux/input.h	442;"	d
+KEY_KBDILLUMUP	include/linux/input.h	444;"	d
+KEY_KBDINPUTASSIST_ACCEPT	include/linux/input.h	743;"	d
+KEY_KBDINPUTASSIST_CANCEL	include/linux/input.h	744;"	d
+KEY_KBDINPUTASSIST_NEXT	include/linux/input.h	740;"	d
+KEY_KBDINPUTASSIST_NEXTGROUP	include/linux/input.h	742;"	d
+KEY_KBDINPUTASSIST_PREV	include/linux/input.h	739;"	d
+KEY_KBDINPUTASSIST_PREVGROUP	include/linux/input.h	741;"	d
+KEY_KEYBOARD	include/linux/input.h	578;"	d
+KEY_KP0	include/linux/input.h	293;"	d
+KEY_KP1	include/linux/input.h	290;"	d
+KEY_KP2	include/linux/input.h	291;"	d
+KEY_KP3	include/linux/input.h	292;"	d
+KEY_KP4	include/linux/input.h	286;"	d
+KEY_KP5	include/linux/input.h	287;"	d
+KEY_KP6	include/linux/input.h	288;"	d
+KEY_KP7	include/linux/input.h	282;"	d
+KEY_KP8	include/linux/input.h	283;"	d
+KEY_KP9	include/linux/input.h	284;"	d
+KEY_KPASTERISK	include/linux/input.h	266;"	d
+KEY_KPCOMMA	include/linux/input.h	333;"	d
+KEY_KPDOT	include/linux/input.h	294;"	d
+KEY_KPENTER	include/linux/input.h	307;"	d
+KEY_KPEQUAL	include/linux/input.h	328;"	d
+KEY_KPJPCOMMA	include/linux/input.h	306;"	d
+KEY_KPLEFTPAREN	include/linux/input.h	394;"	d
+KEY_KPMINUS	include/linux/input.h	285;"	d
+KEY_KPPLUS	include/linux/input.h	289;"	d
+KEY_KPPLUSMINUS	include/linux/input.h	329;"	d
+KEY_KPRIGHTPAREN	include/linux/input.h	395;"	d
+KEY_KPSLASH	include/linux/input.h	309;"	d
+KEY_L	include/linux/input.h	249;"	d
+KEY_LANGUAGE	include/linux/input.h	572;"	d
+KEY_LAST	include/linux/input.h	609;"	d
+KEY_LEFT	include/linux/input.h	316;"	d
+KEY_LEFTALT	include/linux/input.h	267;"	d
+KEY_LEFTBRACE	include/linux/input.h	237;"	d
+KEY_LEFTCTRL	include/linux/input.h	240;"	d
+KEY_LEFTMETA	include/linux/input.h	338;"	d
+KEY_LEFTSHIFT	include/linux/input.h	253;"	d
+KEY_LIGHTS_TOGGLE	include/linux/input.h	719;"	d
+KEY_LINEFEED	include/linux/input.h	312;"	d
+KEY_LIST	include/linux/input.h	599;"	d
+KEY_LOGOFF	include/linux/input.h	638;"	d
+KEY_M	include/linux/input.h	261;"	d
+KEY_MACRO	include/linux/input.h	323;"	d
+KEY_MAIL	include/linux/input.h	370;"	d
+KEY_MAX	include/linux/input.h	790;"	d
+KEY_MEDIA	include/linux/input.h	438;"	d
+KEY_MEDIA_REPEAT	include/linux/input.h	646;"	d
+KEY_MEMO	include/linux/input.h	600;"	d
+KEY_MENU	include/linux/input.h	353;"	d
+KEY_MESSENGER	include/linux/input.h	634;"	d
+KEY_MHP	include/linux/input.h	571;"	d
+KEY_MICMUTE	include/linux/input.h	473;"	d
+KEY_MINUS	include/linux/input.h	223;"	d
+KEY_MIN_INTERESTING	include/linux/input.h	789;"	d
+KEY_MODE	include/linux/input.h	577;"	d
+KEY_MOVE	include/linux/input.h	390;"	d
+KEY_MP3	include/linux/input.h	595;"	d
+KEY_MSDOS	include/linux/input.h	365;"	d
+KEY_MUHENKAN	include/linux/input.h	305;"	d
+KEY_MUTE	include/linux/input.h	324;"	d
+KEY_N	include/linux/input.h	260;"	d
+KEY_NEW	include/linux/input.h	396;"	d
+KEY_NEWS	include/linux/input.h	631;"	d
+KEY_NEXT	include/linux/input.h	611;"	d
+KEY_NEXTSONG	include/linux/input.h	378;"	d
+KEY_NUMERIC_0	include/linux/input.h	689;"	d
+KEY_NUMERIC_1	include/linux/input.h	690;"	d
+KEY_NUMERIC_2	include/linux/input.h	691;"	d
+KEY_NUMERIC_3	include/linux/input.h	692;"	d
+KEY_NUMERIC_4	include/linux/input.h	693;"	d
+KEY_NUMERIC_5	include/linux/input.h	694;"	d
+KEY_NUMERIC_6	include/linux/input.h	695;"	d
+KEY_NUMERIC_7	include/linux/input.h	696;"	d
+KEY_NUMERIC_8	include/linux/input.h	697;"	d
+KEY_NUMERIC_9	include/linux/input.h	698;"	d
+KEY_NUMERIC_POUND	include/linux/input.h	700;"	d
+KEY_NUMERIC_STAR	include/linux/input.h	699;"	d
+KEY_NUMLOCK	include/linux/input.h	280;"	d
+KEY_O	include/linux/input.h	235;"	d
+KEY_OK	include/linux/input.h	556;"	d
+KEY_OPEN	include/linux/input.h	348;"	d
+KEY_OPTION	include/linux/input.h	561;"	d
+KEY_P	include/linux/input.h	236;"	d
+KEY_PAGEDOWN	include/linux/input.h	320;"	d
+KEY_PAGEUP	include/linux/input.h	315;"	d
+KEY_PASTE	include/linux/input.h	349;"	d
+KEY_PAUSE	include/linux/input.h	330;"	d
+KEY_PAUSECD	include/linux/input.h	413;"	d
+KEY_PC	include/linux/input.h	580;"	d
+KEY_PHONE	include/linux/input.h	384;"	d
+KEY_PLAY	include/linux/input.h	419;"	d
+KEY_PLAYCD	include/linux/input.h	412;"	d
+KEY_PLAYER	include/linux/input.h	591;"	d
+KEY_PLAYPAUSE	include/linux/input.h	379;"	d
+KEY_POWER	include/linux/input.h	327;"	d
+KEY_POWER2	include/linux/input.h	560;"	d
+KEY_PRESENTATION	include/linux/input.h	629;"	d
+KEY_PREVIOUS	include/linux/input.h	616;"	d
+KEY_PREVIOUSSONG	include/linux/input.h	380;"	d
+KEY_PRINT	include/linux/input.h	422;"	d
+KEY_PROG1	include/linux/input.h	362;"	d
+KEY_PROG2	include/linux/input.h	363;"	d
+KEY_PROG3	include/linux/input.h	414;"	d
+KEY_PROG4	include/linux/input.h	415;"	d
+KEY_PROGRAM	include/linux/input.h	566;"	d
+KEY_PROPS	include/linux/input.h	344;"	d
+KEY_PVR	include/linux/input.h	570;"	d
+KEY_Q	include/linux/input.h	227;"	d
+KEY_QUESTION	include/linux/input.h	426;"	d
+KEY_R	include/linux/input.h	230;"	d
+KEY_RADIO	include/linux/input.h	589;"	d
+KEY_RECORD	include/linux/input.h	382;"	d
+KEY_RED	include/linux/input.h	602;"	d
+KEY_REDO	include/linux/input.h	397;"	d
+KEY_REFRESH	include/linux/input.h	388;"	d
+KEY_REPLY	include/linux/input.h	447;"	d
+KEY_RESERVED	include/linux/input.h	211;"	d
+KEY_RESTART	include/linux/input.h	612;"	d
+KEY_REWIND	include/linux/input.h	383;"	d
+KEY_RFKILL	include/linux/input.h	471;"	d
+KEY_RIGHT	include/linux/input.h	317;"	d
+KEY_RIGHTALT	include/linux/input.h	311;"	d
+KEY_RIGHTBRACE	include/linux/input.h	238;"	d
+KEY_RIGHTCTRL	include/linux/input.h	308;"	d
+KEY_RIGHTMETA	include/linux/input.h	339;"	d
+KEY_RIGHTSHIFT	include/linux/input.h	265;"	d
+KEY_RO	include/linux/input.h	300;"	d
+KEY_S	include/linux/input.h	242;"	d
+KEY_SAT	include/linux/input.h	585;"	d
+KEY_SAT2	include/linux/input.h	586;"	d
+KEY_SAVE	include/linux/input.h	449;"	d
+KEY_SCALE	include/linux/input.h	331;"	d
+KEY_SCREEN	include/linux/input.h	579;"	d
+KEY_SCREENLOCK	include/linux/input.h	367;"	d
+KEY_SCREENSAVER	include/linux/input.h	733;"	d
+KEY_SCROLLDOWN	include/linux/input.h	393;"	d
+KEY_SCROLLLOCK	include/linux/input.h	281;"	d
+KEY_SCROLLUP	include/linux/input.h	392;"	d
+KEY_SEARCH	include/linux/input.h	429;"	d
+KEY_SELECT	include/linux/input.h	557;"	d
+KEY_SEMICOLON	include/linux/input.h	250;"	d
+KEY_SEND	include/linux/input.h	446;"	d
+KEY_SENDFILE	include/linux/input.h	359;"	d
+KEY_SETUP	include/linux/input.h	355;"	d
+KEY_SHOP	include/linux/input.h	433;"	d
+KEY_SHUFFLE	include/linux/input.h	614;"	d
+KEY_SLASH	include/linux/input.h	264;"	d
+KEY_SLEEP	include/linux/input.h	356;"	d
+KEY_SLOW	include/linux/input.h	613;"	d
+KEY_SOUND	include/linux/input.h	425;"	d
+KEY_SPACE	include/linux/input.h	268;"	d
+KEY_SPELLCHECK	include/linux/input.h	637;"	d
+KEY_SPORT	include/linux/input.h	432;"	d
+KEY_SPREADSHEET	include/linux/input.h	627;"	d
+KEY_STOP	include/linux/input.h	342;"	d
+KEY_STOPCD	include/linux/input.h	381;"	d
+KEY_SUBTITLE	include/linux/input.h	574;"	d
+KEY_SUSPEND	include/linux/input.h	417;"	d
+KEY_SWITCHVIDEOMODE	include/linux/input.h	440;"	d
+KEY_SYSRQ	include/linux/input.h	310;"	d
+KEY_T	include/linux/input.h	231;"	d
+KEY_TAB	include/linux/input.h	226;"	d
+KEY_TAPE	include/linux/input.h	588;"	d
+KEY_TASKMANAGER	include/linux/input.h	729;"	d
+KEY_TEEN	include/linux/input.h	618;"	d
+KEY_TEXT	include/linux/input.h	592;"	d
+KEY_TIME	include/linux/input.h	563;"	d
+KEY_TITLE	include/linux/input.h	573;"	d
+KEY_TOUCHPAD_OFF	include/linux/input.h	707;"	d
+KEY_TOUCHPAD_ON	include/linux/input.h	706;"	d
+KEY_TOUCHPAD_TOGGLE	include/linux/input.h	705;"	d
+KEY_TUNER	include/linux/input.h	590;"	d
+KEY_TV	include/linux/input.h	581;"	d
+KEY_TV2	include/linux/input.h	582;"	d
+KEY_TWEN	include/linux/input.h	619;"	d
+KEY_U	include/linux/input.h	233;"	d
+KEY_UNDO	include/linux/input.h	345;"	d
+KEY_UNKNOWN	include/linux/input.h	458;"	d
+KEY_UP	include/linux/input.h	314;"	d
+KEY_UWB	include/linux/input.h	456;"	d
+KEY_V	include/linux/input.h	258;"	d
+KEY_VCR	include/linux/input.h	583;"	d
+KEY_VCR2	include/linux/input.h	584;"	d
+KEY_VENDOR	include/linux/input.h	564;"	d
+KEY_VIDEO	include/linux/input.h	597;"	d
+KEY_VIDEOPHONE	include/linux/input.h	620;"	d
+KEY_VIDEO_NEXT	include/linux/input.h	460;"	d
+KEY_VIDEO_PREV	include/linux/input.h	461;"	d
+KEY_VOICECOMMAND	include/linux/input.h	734;"	d
+KEY_VOICEMAIL	include/linux/input.h	632;"	d
+KEY_VOLUMEDOWN	include/linux/input.h	325;"	d
+KEY_VOLUMEUP	include/linux/input.h	326;"	d
+KEY_W	include/linux/input.h	228;"	d
+KEY_WAKEUP	include/linux/input.h	357;"	d
+KEY_WIMAX	include/linux/input.h	470;"	d
+KEY_WLAN	include/linux/input.h	455;"	d
+KEY_WORDPROCESSOR	include/linux/input.h	625;"	d
+KEY_WPS_BUTTON	include/linux/input.h	703;"	d
+KEY_WWAN	include/linux/input.h	469;"	d
+KEY_WWW	include/linux/input.h	364;"	d
+KEY_X	include/linux/input.h	256;"	d
+KEY_XFER	include/linux/input.h	361;"	d
+KEY_Y	include/linux/input.h	232;"	d
+KEY_YELLOW	include/linux/input.h	604;"	d
+KEY_YEN	include/linux/input.h	337;"	d
+KEY_Z	include/linux/input.h	255;"	d
+KEY_ZENKAKUHANKAKU	include/linux/input.h	296;"	d
+KEY_ZOOM	include/linux/input.h	576;"	d
+KEY_ZOOMIN	include/linux/input.h	622;"	d
+KEY_ZOOMOUT	include/linux/input.h	623;"	d
+KEY_ZOOMRESET	include/linux/input.h	624;"	d
+LED_CAPSL	include/linux/input.h	904;"	d
+LED_CHARGING	include/linux/input.h	913;"	d
+LED_CNT	include/linux/input.h	915;"	d
+LED_COMPOSE	include/linux/input.h	906;"	d
+LED_KANA	include/linux/input.h	907;"	d
+LED_MAIL	include/linux/input.h	912;"	d
+LED_MAX	include/linux/input.h	914;"	d
+LED_MISC	include/linux/input.h	911;"	d
+LED_MUTE	include/linux/input.h	910;"	d
+LED_NUML	include/linux/input.h	903;"	d
+LED_SCROLLL	include/linux/input.h	905;"	d
+LED_SLEEP	include/linux/input.h	908;"	d
+LED_SUSPEND	include/linux/input.h	909;"	d
+LIBINPUT_ATTRIBUTE_DEPRECATED	.pc/touch-point-orientation-size.patch/src/libinput.h	38;"	d
+LIBINPUT_ATTRIBUTE_DEPRECATED	src/libinput.h	38;"	d
+LIBINPUT_ATTRIBUTE_PRINTF	.pc/touch-point-orientation-size.patch/src/libinput.h	36;"	d
+LIBINPUT_ATTRIBUTE_PRINTF	src/libinput.h	36;"	d
+LIBINPUT_BUTTON_STATE_PRESSED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_BUTTON_STATE_PRESSED = 1$/;"	e	enum:libinput_button_state
+LIBINPUT_BUTTON_STATE_PRESSED	src/libinput.h	/^	LIBINPUT_BUTTON_STATE_PRESSED = 1$/;"	e	enum:libinput_button_state
+LIBINPUT_BUTTON_STATE_RELEASED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_BUTTON_STATE_RELEASED = 0,$/;"	e	enum:libinput_button_state
+LIBINPUT_BUTTON_STATE_RELEASED	src/libinput.h	/^	LIBINPUT_BUTTON_STATE_RELEASED = 0,$/;"	e	enum:libinput_button_state
+LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS = (1 << 0),$/;"	e	enum:libinput_config_click_method
+LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS	src/libinput.h	/^	LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS = (1 << 0),$/;"	e	enum:libinput_config_click_method
+LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER = (1 << 1),$/;"	e	enum:libinput_config_click_method
+LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER	src/libinput.h	/^	LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER = (1 << 1),$/;"	e	enum:libinput_config_click_method
+LIBINPUT_CONFIG_CLICK_METHOD_NONE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_CLICK_METHOD_NONE = 0,$/;"	e	enum:libinput_config_click_method
+LIBINPUT_CONFIG_CLICK_METHOD_NONE	src/libinput.h	/^	LIBINPUT_CONFIG_CLICK_METHOD_NONE = 0,$/;"	e	enum:libinput_config_click_method
+LIBINPUT_CONFIG_DRAG_LOCK_DISABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_DRAG_LOCK_DISABLED,$/;"	e	enum:libinput_config_drag_lock_state
+LIBINPUT_CONFIG_DRAG_LOCK_DISABLED	src/libinput.h	/^	LIBINPUT_CONFIG_DRAG_LOCK_DISABLED,$/;"	e	enum:libinput_config_drag_lock_state
+LIBINPUT_CONFIG_DRAG_LOCK_ENABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_DRAG_LOCK_ENABLED,$/;"	e	enum:libinput_config_drag_lock_state
+LIBINPUT_CONFIG_DRAG_LOCK_ENABLED	src/libinput.h	/^	LIBINPUT_CONFIG_DRAG_LOCK_ENABLED,$/;"	e	enum:libinput_config_drag_lock_state
+LIBINPUT_CONFIG_DWT_DISABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_DWT_DISABLED,$/;"	e	enum:libinput_config_dwt_state
+LIBINPUT_CONFIG_DWT_DISABLED	src/libinput.h	/^	LIBINPUT_CONFIG_DWT_DISABLED,$/;"	e	enum:libinput_config_dwt_state
+LIBINPUT_CONFIG_DWT_ENABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_DWT_ENABLED,$/;"	e	enum:libinput_config_dwt_state
+LIBINPUT_CONFIG_DWT_ENABLED	src/libinput.h	/^	LIBINPUT_CONFIG_DWT_ENABLED,$/;"	e	enum:libinput_config_dwt_state
+LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED,$/;"	e	enum:libinput_config_middle_emulation_state
+LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED	src/libinput.h	/^	LIBINPUT_CONFIG_MIDDLE_EMULATION_DISABLED,$/;"	e	enum:libinput_config_middle_emulation_state
+LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED,$/;"	e	enum:libinput_config_middle_emulation_state
+LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED	src/libinput.h	/^	LIBINPUT_CONFIG_MIDDLE_EMULATION_ENABLED,$/;"	e	enum:libinput_config_middle_emulation_state
+LIBINPUT_CONFIG_SCROLL_2FG	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_2FG = (1 << 0),$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_2FG	src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_2FG = (1 << 0),$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_EDGE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_EDGE = (1 << 1),$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_EDGE	src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_EDGE = (1 << 1),$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_NO_SCROLL	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_NO_SCROLL = 0,$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_NO_SCROLL	src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_NO_SCROLL = 0,$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN = (1 << 2),$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN	src/libinput.h	/^	LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN = (1 << 2),$/;"	e	enum:libinput_config_scroll_method
+LIBINPUT_CONFIG_SEND_EVENTS_DISABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SEND_EVENTS_DISABLED = (1 << 0),$/;"	e	enum:libinput_config_send_events_mode
+LIBINPUT_CONFIG_SEND_EVENTS_DISABLED	src/libinput.h	/^	LIBINPUT_CONFIG_SEND_EVENTS_DISABLED = (1 << 0),$/;"	e	enum:libinput_config_send_events_mode
+LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE = (1 << 1),$/;"	e	enum:libinput_config_send_events_mode
+LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE	src/libinput.h	/^	LIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE = (1 << 1),$/;"	e	enum:libinput_config_send_events_mode
+LIBINPUT_CONFIG_SEND_EVENTS_ENABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_SEND_EVENTS_ENABLED = 0,$/;"	e	enum:libinput_config_send_events_mode
+LIBINPUT_CONFIG_SEND_EVENTS_ENABLED	src/libinput.h	/^	LIBINPUT_CONFIG_SEND_EVENTS_ENABLED = 0,$/;"	e	enum:libinput_config_send_events_mode
+LIBINPUT_CONFIG_STATUS_INVALID	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_STATUS_INVALID,		\/**< Invalid parameter range *\/$/;"	e	enum:libinput_config_status
+LIBINPUT_CONFIG_STATUS_INVALID	src/libinput.h	/^	LIBINPUT_CONFIG_STATUS_INVALID,		\/**< Invalid parameter range *\/$/;"	e	enum:libinput_config_status
+LIBINPUT_CONFIG_STATUS_SUCCESS	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_STATUS_SUCCESS = 0,	\/**< Config applied successfully *\/$/;"	e	enum:libinput_config_status
+LIBINPUT_CONFIG_STATUS_SUCCESS	src/libinput.h	/^	LIBINPUT_CONFIG_STATUS_SUCCESS = 0,	\/**< Config applied successfully *\/$/;"	e	enum:libinput_config_status
+LIBINPUT_CONFIG_STATUS_UNSUPPORTED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_STATUS_UNSUPPORTED,	\/**< Configuration not available on$/;"	e	enum:libinput_config_status
+LIBINPUT_CONFIG_STATUS_UNSUPPORTED	src/libinput.h	/^	LIBINPUT_CONFIG_STATUS_UNSUPPORTED,	\/**< Configuration not available on$/;"	e	enum:libinput_config_status
+LIBINPUT_CONFIG_TAP_DISABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_TAP_DISABLED, \/**< Tapping is to be disabled, or is$/;"	e	enum:libinput_config_tap_state
+LIBINPUT_CONFIG_TAP_DISABLED	src/libinput.h	/^	LIBINPUT_CONFIG_TAP_DISABLED, \/**< Tapping is to be disabled, or is$/;"	e	enum:libinput_config_tap_state
+LIBINPUT_CONFIG_TAP_ENABLED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_CONFIG_TAP_ENABLED, \/**< Tapping is to be enabled, or is$/;"	e	enum:libinput_config_tap_state
+LIBINPUT_CONFIG_TAP_ENABLED	src/libinput.h	/^	LIBINPUT_CONFIG_TAP_ENABLED, \/**< Tapping is to be enabled, or is$/;"	e	enum:libinput_config_tap_state
+LIBINPUT_DEVICE_CAP_GESTURE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_DEVICE_CAP_GESTURE = 5,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_GESTURE	src/libinput.h	/^	LIBINPUT_DEVICE_CAP_GESTURE = 5,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_KEYBOARD	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_DEVICE_CAP_KEYBOARD = 0,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_KEYBOARD	src/libinput.h	/^	LIBINPUT_DEVICE_CAP_KEYBOARD = 0,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_POINTER	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_DEVICE_CAP_POINTER = 1,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_POINTER	src/libinput.h	/^	LIBINPUT_DEVICE_CAP_POINTER = 1,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_TOUCH	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_DEVICE_CAP_TOUCH = 2,$/;"	e	enum:libinput_device_capability
+LIBINPUT_DEVICE_CAP_TOUCH	src/libinput.h	/^	LIBINPUT_DEVICE_CAP_TOUCH = 2,$/;"	e	enum:libinput_device_capability
+LIBINPUT_EVENT_DEVICE_ADDED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_DEVICE_ADDED,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_DEVICE_ADDED	src/libinput.h	/^	LIBINPUT_EVENT_DEVICE_ADDED,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_DEVICE_REMOVED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_DEVICE_REMOVED,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_DEVICE_REMOVED	src/libinput.h	/^	LIBINPUT_EVENT_DEVICE_REMOVED,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_PINCH_BEGIN	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_PINCH_BEGIN	src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_PINCH_BEGIN,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_PINCH_END	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_PINCH_END,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_PINCH_END	src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_PINCH_END,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_PINCH_UPDATE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_PINCH_UPDATE	src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_PINCH_UPDATE,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN = 800,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN	src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_SWIPE_BEGIN = 800,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_SWIPE_END	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_SWIPE_END,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_SWIPE_END	src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_SWIPE_END,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE	src/libinput.h	/^	LIBINPUT_EVENT_GESTURE_SWIPE_UPDATE,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_KEYBOARD_KEY	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_KEYBOARD_KEY = 300,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_KEYBOARD_KEY	src/libinput.h	/^	LIBINPUT_EVENT_KEYBOARD_KEY = 300,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_NONE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_NONE = 0,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_NONE	src/libinput.h	/^	LIBINPUT_EVENT_NONE = 0,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_AXIS	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_POINTER_AXIS,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_AXIS	src/libinput.h	/^	LIBINPUT_EVENT_POINTER_AXIS,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_BUTTON	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_POINTER_BUTTON,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_BUTTON	src/libinput.h	/^	LIBINPUT_EVENT_POINTER_BUTTON,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_MOTION	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_POINTER_MOTION = 400,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_MOTION	src/libinput.h	/^	LIBINPUT_EVENT_POINTER_MOTION = 400,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE	src/libinput.h	/^	LIBINPUT_EVENT_POINTER_MOTION_ABSOLUTE,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_CANCEL	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_CANCEL,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_CANCEL	src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_CANCEL,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_DOWN	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_DOWN = 500,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_DOWN	src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_DOWN = 500,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_FRAME	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_FRAME,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_FRAME	src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_FRAME,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_MOTION	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_MOTION,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_MOTION	src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_MOTION,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_UP	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_UP,$/;"	e	enum:libinput_event_type
+LIBINPUT_EVENT_TOUCH_UP	src/libinput.h	/^	LIBINPUT_EVENT_TOUCH_UP,$/;"	e	enum:libinput_event_type
+LIBINPUT_EXPORT	.pc/touch-point-orientation-size.patch/src/libinput-util.h	107;"	d
+LIBINPUT_EXPORT	src/libinput-util.h	107;"	d
+LIBINPUT_H	.pc/touch-point-orientation-size.patch/src/libinput.h	26;"	d
+LIBINPUT_H	src/libinput.h	26;"	d
+LIBINPUT_KEY_STATE_PRESSED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_KEY_STATE_PRESSED = 1$/;"	e	enum:libinput_key_state
+LIBINPUT_KEY_STATE_PRESSED	src/libinput.h	/^	LIBINPUT_KEY_STATE_PRESSED = 1$/;"	e	enum:libinput_key_state
+LIBINPUT_KEY_STATE_RELEASED	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_KEY_STATE_RELEASED = 0,$/;"	e	enum:libinput_key_state
+LIBINPUT_KEY_STATE_RELEASED	src/libinput.h	/^	LIBINPUT_KEY_STATE_RELEASED = 0,$/;"	e	enum:libinput_key_state
+LIBINPUT_LED_CAPS_LOCK	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_LED_CAPS_LOCK = (1 << 1),$/;"	e	enum:libinput_led
+LIBINPUT_LED_CAPS_LOCK	src/libinput.h	/^	LIBINPUT_LED_CAPS_LOCK = (1 << 1),$/;"	e	enum:libinput_led
+LIBINPUT_LED_NUM_LOCK	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_LED_NUM_LOCK = (1 << 0),$/;"	e	enum:libinput_led
+LIBINPUT_LED_NUM_LOCK	src/libinput.h	/^	LIBINPUT_LED_NUM_LOCK = (1 << 0),$/;"	e	enum:libinput_led
+LIBINPUT_LED_SCROLL_LOCK	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_LED_SCROLL_LOCK = (1 << 2)$/;"	e	enum:libinput_led
+LIBINPUT_LED_SCROLL_LOCK	src/libinput.h	/^	LIBINPUT_LED_SCROLL_LOCK = (1 << 2)$/;"	e	enum:libinput_led
+LIBINPUT_LOG_PRIORITY_DEBUG	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_LOG_PRIORITY_DEBUG = 10,$/;"	e	enum:libinput_log_priority
+LIBINPUT_LOG_PRIORITY_DEBUG	src/libinput.h	/^	LIBINPUT_LOG_PRIORITY_DEBUG = 10,$/;"	e	enum:libinput_log_priority
+LIBINPUT_LOG_PRIORITY_ERROR	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_LOG_PRIORITY_ERROR = 30,$/;"	e	enum:libinput_log_priority
+LIBINPUT_LOG_PRIORITY_ERROR	src/libinput.h	/^	LIBINPUT_LOG_PRIORITY_ERROR = 30,$/;"	e	enum:libinput_log_priority
+LIBINPUT_LOG_PRIORITY_INFO	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_LOG_PRIORITY_INFO = 20,$/;"	e	enum:libinput_log_priority
+LIBINPUT_LOG_PRIORITY_INFO	src/libinput.h	/^	LIBINPUT_LOG_PRIORITY_INFO = 20,$/;"	e	enum:libinput_log_priority
+LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL = 1,$/;"	e	enum:libinput_pointer_axis
+LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL	src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SCROLL_HORIZONTAL = 1,$/;"	e	enum:libinput_pointer_axis
+LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL = 0,$/;"	e	enum:libinput_pointer_axis
+LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL	src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SCROLL_VERTICAL = 0,$/;"	e	enum:libinput_pointer_axis
+LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS,$/;"	e	enum:libinput_pointer_axis_source
+LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS	src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SOURCE_CONTINUOUS,$/;"	e	enum:libinput_pointer_axis_source
+LIBINPUT_POINTER_AXIS_SOURCE_FINGER	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SOURCE_FINGER,$/;"	e	enum:libinput_pointer_axis_source
+LIBINPUT_POINTER_AXIS_SOURCE_FINGER	src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SOURCE_FINGER,$/;"	e	enum:libinput_pointer_axis_source
+LIBINPUT_POINTER_AXIS_SOURCE_WHEEL	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SOURCE_WHEEL = 1,$/;"	e	enum:libinput_pointer_axis_source
+LIBINPUT_POINTER_AXIS_SOURCE_WHEEL	src/libinput.h	/^	LIBINPUT_POINTER_AXIS_SOURCE_WHEEL = 1,$/;"	e	enum:libinput_pointer_axis_source
+LIBINPUT_PRIVATE_H	.pc/touch-point-orientation-size.patch/src/libinput-private.h	26;"	d
+LIBINPUT_PRIVATE_H	src/libinput-private.h	26;"	d
+LIBINPUT_UTIL_H	.pc/touch-point-orientation-size.patch/src/libinput-util.h	26;"	d
+LIBINPUT_UTIL_H	src/libinput-util.h	26;"	d
+LITEST_ABSOLUTE	test/litest.h	/^	LITEST_ABSOLUTE = 1 << 13,$/;"	e	enum:litest_device_feature
+LITEST_ALPS_DUALPOINT	test/litest.h	/^	LITEST_ALPS_DUALPOINT = -25,$/;"	e	enum:litest_device_type
+LITEST_ALPS_SEMI_MT	test/litest.h	/^	LITEST_ALPS_SEMI_MT = -10,$/;"	e	enum:litest_device_type
+LITEST_ANY	test/litest.h	/^	LITEST_ANY = 0,$/;"	e	enum:litest_device_feature
+LITEST_APPLE_CLICKPAD	test/litest.h	/^	LITEST_APPLE_CLICKPAD = 1 << 8,$/;"	e	enum:litest_device_feature
+LITEST_ATMEL_HOVER	test/litest.h	/^	LITEST_ATMEL_HOVER = -24,$/;"	e	enum:litest_device_type
+LITEST_AUTO_ASSIGN	test/litest-int.h	34;"	d
+LITEST_BCM5974	test/litest.h	/^	LITEST_BCM5974 = -5,$/;"	e	enum:litest_device_type
+LITEST_BUTTON	test/litest.h	/^	LITEST_BUTTON = 1 << 2,$/;"	e	enum:litest_device_feature
+LITEST_CLICKPAD	test/litest.h	/^	LITEST_CLICKPAD = 1 << 1,$/;"	e	enum:litest_device_feature
+LITEST_DISABLE_DEVICE	test/litest.h	/^	LITEST_DISABLE_DEVICE = -1,$/;"	e	enum:litest_device_feature
+LITEST_ELANTECH_TOUCHPAD	test/litest.h	/^	LITEST_ELANTECH_TOUCHPAD = -30,$/;"	e	enum:litest_device_type
+LITEST_ELLIPSE	test/litest.h	/^	LITEST_ELLIPSE = 1 << 16,$/;"	e	enum:litest_device_feature
+LITEST_FAKE_MT	test/litest.h	/^	LITEST_FAKE_MT = 1 << 12,$/;"	e	enum:litest_device_feature
+LITEST_GENERIC_MULTITOUCH_SCREEN	test/litest.h	/^	LITEST_GENERIC_MULTITOUCH_SCREEN = -27,$/;"	e	enum:litest_device_type
+LITEST_GENERIC_SINGLETOUCH	test/litest.h	/^	LITEST_GENERIC_SINGLETOUCH = -11,$/;"	e	enum:litest_device_type
+LITEST_H	test/litest.h	29;"	d
+LITEST_HOVER	test/litest.h	/^	LITEST_HOVER = 1 << 15,$/;"	e	enum:litest_device_feature
+LITEST_INT_H	test/litest-int.h	30;"	d
+LITEST_KEYBOARD	test/litest.h	/^	LITEST_KEYBOARD = -6,$/;"	e	enum:litest_device_type
+LITEST_KEYBOARD_BLACKWIDOW	test/litest.h	/^	LITEST_KEYBOARD_BLACKWIDOW = -20,$/;"	e	enum:litest_device_type
+LITEST_KEYS	test/litest.h	/^	LITEST_KEYS = 1 << 3,$/;"	e	enum:litest_device_feature
+LITEST_LOGITECH_TRACKBALL	test/litest.h	/^	LITEST_LOGITECH_TRACKBALL = -23,$/;"	e	enum:litest_device_type
+LITEST_MAGIC_TRACKPAD	test/litest.h	/^	LITEST_MAGIC_TRACKPAD = -29,$/;"	e	enum:litest_device_type
+LITEST_MODE_ERROR	.pc/fix-litest.patch/test/litest.c	/^	LITEST_MODE_ERROR,$/;"	e	enum:litest_mode	file:
+LITEST_MODE_ERROR	test/litest.c	/^	LITEST_MODE_ERROR,$/;"	e	enum:litest_mode	file:
+LITEST_MODE_LIST	.pc/fix-litest.patch/test/litest.c	/^	LITEST_MODE_LIST,$/;"	e	enum:litest_mode	file:
+LITEST_MODE_LIST	test/litest.c	/^	LITEST_MODE_LIST,$/;"	e	enum:litest_mode	file:
+LITEST_MODE_TEST	.pc/fix-litest.patch/test/litest.c	/^	LITEST_MODE_TEST,$/;"	e	enum:litest_mode	file:
+LITEST_MODE_TEST	test/litest.c	/^	LITEST_MODE_TEST,$/;"	e	enum:litest_mode	file:
+LITEST_MOUSE	test/litest.h	/^	LITEST_MOUSE = -8,$/;"	e	enum:litest_device_type
+LITEST_MOUSE_LOW_DPI	test/litest.h	/^	LITEST_MOUSE_LOW_DPI = -26,$/;"	e	enum:litest_device_type
+LITEST_MOUSE_ROCCAT	test/litest.h	/^	LITEST_MOUSE_ROCCAT = -22,$/;"	e	enum:litest_device_type
+LITEST_MS_SURFACE_COVER	test/litest.h	/^	LITEST_MS_SURFACE_COVER = -12,$/;"	e	enum:litest_device_type
+LITEST_NEXUS4_TOUCH_SCREEN	test/litest.h	/^	LITEST_NEXUS4_TOUCH_SCREEN = -28,$/;"	e	enum:litest_device_type
+LITEST_NO_DEVICE	test/litest.h	/^	LITEST_NO_DEVICE = -1,$/;"	e	enum:litest_device_type
+LITEST_POINTINGSTICK	test/litest.h	/^	LITEST_POINTINGSTICK = 1 << 11,$/;"	e	enum:litest_device_feature
+LITEST_PROTOCOL_A	test/litest.h	/^	LITEST_PROTOCOL_A = 1 << 14,$/;"	e	enum:litest_device_feature
+LITEST_PROTOCOL_A_SCREEN	test/litest.h	/^	LITEST_PROTOCOL_A_SCREEN = -18,$/;"	e	enum:litest_device_type
+LITEST_QEMU_TABLET	test/litest.h	/^	LITEST_QEMU_TABLET = -13,$/;"	e	enum:litest_device_type
+LITEST_RELATIVE	test/litest.h	/^	LITEST_RELATIVE = 1 << 4,$/;"	e	enum:litest_device_feature
+LITEST_SEMI_MT	test/litest.h	/^	LITEST_SEMI_MT = 1 << 10,$/;"	e	enum:litest_device_feature
+LITEST_SINGLE_TOUCH	test/litest.h	/^	LITEST_SINGLE_TOUCH = 1 << 7,$/;"	e	enum:litest_device_feature
+LITEST_SYNAPTICS_CLICKPAD	test/litest.h	/^	LITEST_SYNAPTICS_CLICKPAD = -2,$/;"	e	enum:litest_device_type
+LITEST_SYNAPTICS_HOVER_SEMI_MT	test/litest.h	/^	LITEST_SYNAPTICS_HOVER_SEMI_MT = -16,$/;"	e	enum:litest_device_type
+LITEST_SYNAPTICS_TOPBUTTONPAD	test/litest.h	/^	LITEST_SYNAPTICS_TOPBUTTONPAD = -4,$/;"	e	enum:litest_device_type
+LITEST_SYNAPTICS_TOUCHPAD	test/litest.h	/^	LITEST_SYNAPTICS_TOUCHPAD = -3,$/;"	e	enum:litest_device_type
+LITEST_SYNAPTICS_TRACKPOINT_BUTTONS	test/litest.h	/^	LITEST_SYNAPTICS_TRACKPOINT_BUTTONS = -17,$/;"	e	enum:litest_device_type
+LITEST_TOPBUTTONPAD	test/litest.h	/^	LITEST_TOPBUTTONPAD = 1 << 9,$/;"	e	enum:litest_device_feature
+LITEST_TOUCH	test/litest.h	/^	LITEST_TOUCH = 1 << 6,$/;"	e	enum:litest_device_feature
+LITEST_TOUCHPAD	test/litest.h	/^	LITEST_TOUCHPAD = 1 << 0,$/;"	e	enum:litest_device_feature
+LITEST_TRACKPOINT	test/litest.h	/^	LITEST_TRACKPOINT = -7,$/;"	e	enum:litest_device_type
+LITEST_VMWARE_VIRTMOUSE	test/litest.h	/^	LITEST_VMWARE_VIRTMOUSE = -15,$/;"	e	enum:litest_device_type
+LITEST_WACOM_FINGER	test/litest.h	/^	LITEST_WACOM_FINGER = -19,$/;"	e	enum:litest_device_type
+LITEST_WACOM_TOUCH	test/litest.h	/^	LITEST_WACOM_TOUCH = -9,$/;"	e	enum:litest_device_type
+LITEST_WHEEL	test/litest.h	/^	LITEST_WHEEL = 1 << 5,$/;"	e	enum:litest_device_feature
+LITEST_WHEEL_ONLY	test/litest.h	/^	LITEST_WHEEL_ONLY = -21,$/;"	e	enum:litest_device_type
+LITEST_XEN_VIRTUAL_POINTER	test/litest.h	/^	LITEST_XEN_VIRTUAL_POINTER = -14,$/;"	e	enum:litest_device_type
+LONG_BITS	.pc/touch-point-orientation-size.patch/src/libinput-util.h	86;"	d
+LONG_BITS	src/libinput-util.h	86;"	d
+MAX_VELOCITY_DIFF	src/filter.c	124;"	d	file:
+MIDDLEBUTTON_EVENT_ALL_UP	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_ALL_UP,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_ALL_UP	src/evdev.h	/^	MIDDLEBUTTON_EVENT_ALL_UP,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_L_DOWN	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_L_DOWN,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_L_DOWN	src/evdev.h	/^	MIDDLEBUTTON_EVENT_L_DOWN,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_L_UP	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_L_UP,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_L_UP	src/evdev.h	/^	MIDDLEBUTTON_EVENT_L_UP,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_OTHER	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_OTHER,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_OTHER	src/evdev.h	/^	MIDDLEBUTTON_EVENT_OTHER,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_R_DOWN	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_R_DOWN,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_R_DOWN	src/evdev.h	/^	MIDDLEBUTTON_EVENT_R_DOWN,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_R_UP	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_R_UP,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_R_UP	src/evdev.h	/^	MIDDLEBUTTON_EVENT_R_UP,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_TIMEOUT	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_EVENT_TIMEOUT,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_EVENT_TIMEOUT	src/evdev.h	/^	MIDDLEBUTTON_EVENT_TIMEOUT,$/;"	e	enum:evdev_middlebutton_event
+MIDDLEBUTTON_IDLE	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_IDLE,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IDLE	src/evdev.h	/^	MIDDLEBUTTON_IDLE,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IGNORE_L	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_IGNORE_L,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IGNORE_L	src/evdev.h	/^	MIDDLEBUTTON_IGNORE_L,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IGNORE_LR	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_IGNORE_LR,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IGNORE_LR	src/evdev.h	/^	MIDDLEBUTTON_IGNORE_LR,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IGNORE_R	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_IGNORE_R,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_IGNORE_R	src/evdev.h	/^	MIDDLEBUTTON_IGNORE_R,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_LEFT_DOWN	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_LEFT_DOWN,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_LEFT_DOWN	src/evdev.h	/^	MIDDLEBUTTON_LEFT_DOWN,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_LEFT_UP_PENDING	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_LEFT_UP_PENDING,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_LEFT_UP_PENDING	src/evdev.h	/^	MIDDLEBUTTON_LEFT_UP_PENDING,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_MIDDLE	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_MIDDLE,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_MIDDLE	src/evdev.h	/^	MIDDLEBUTTON_MIDDLE,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_PASSTHROUGH	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_PASSTHROUGH,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_PASSTHROUGH	src/evdev.h	/^	MIDDLEBUTTON_PASSTHROUGH,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_RIGHT_DOWN	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_RIGHT_DOWN,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_RIGHT_DOWN	src/evdev.h	/^	MIDDLEBUTTON_RIGHT_DOWN,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_RIGHT_UP_PENDING	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	MIDDLEBUTTON_RIGHT_UP_PENDING,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_RIGHT_UP_PENDING	src/evdev.h	/^	MIDDLEBUTTON_RIGHT_UP_PENDING,$/;"	e	enum:evdev_middlebutton_state
+MIDDLEBUTTON_TIMEOUT	src/evdev-middle-button.c	30;"	d	file:
+MINIMUM_THRESHOLD	src/filter.c	109;"	d	file:
+MODEL_ALPS	src/evdev-mt-touchpad.h	/^	MODEL_ALPS,$/;"	e	enum:touchpad_model
+MODEL_APPLETOUCH	src/evdev-mt-touchpad.h	/^	MODEL_APPLETOUCH,$/;"	e	enum:touchpad_model
+MODEL_ELANTECH	src/evdev-mt-touchpad.h	/^	MODEL_ELANTECH,$/;"	e	enum:touchpad_model
+MODEL_SYNAPTICS	src/evdev-mt-touchpad.h	/^	MODEL_SYNAPTICS,$/;"	e	enum:touchpad_model
+MODEL_UNIBODY_MACBOOK	src/evdev-mt-touchpad.h	/^	MODEL_UNIBODY_MACBOOK$/;"	e	enum:touchpad_model
+MODEL_UNKNOWN	src/evdev-mt-touchpad.h	/^	MODEL_UNKNOWN = 0,$/;"	e	enum:touchpad_model
+MOTION_TIMEOUT	src/filter.c	125;"	d	file:
+MSC_CNT	include/linux/input.h	897;"	d
+MSC_GESTURE	include/linux/input.h	892;"	d
+MSC_MAX	include/linux/input.h	896;"	d
+MSC_PULSELED	include/linux/input.h	891;"	d
+MSC_RAW	include/linux/input.h	893;"	d
+MSC_SCAN	include/linux/input.h	894;"	d
+MSC_SERIAL	include/linux/input.h	890;"	d
+MSC_TIMESTAMP	include/linux/input.h	895;"	d
+MT_TOOL_FINGER	include/linux/input.h	969;"	d
+MT_TOOL_MAX	include/linux/input.h	972;"	d
+MT_TOOL_PALM	include/linux/input.h	971;"	d
+MT_TOOL_PEN	include/linux/input.h	970;"	d
+N	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	N  = 1 << 0,$/;"	e	enum:directions
+N	src/libinput-private.h	/^	N  = 1 << 0,$/;"	e	enum:directions
+NE	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	NE = 1 << 1,$/;"	e	enum:directions
+NE	src/libinput-private.h	/^	NE = 1 << 1,$/;"	e	enum:directions
+NLONGS	.pc/touch-point-orientation-size.patch/src/libinput-util.h	87;"	d
+NLONGS	src/libinput-util.h	87;"	d
+NUM_POINTER_TRACKERS	src/filter.c	126;"	d	file:
+NW	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	NW = 1 << 7,$/;"	e	enum:directions
+NW	src/libinput-private.h	/^	NW = 1 << 7,$/;"	e	enum:directions
+OPT_CLICK_METHOD	tools/shared.c	/^	OPT_CLICK_METHOD,$/;"	e	enum:options	file:
+OPT_DEVICE	tools/shared.c	/^	OPT_DEVICE,$/;"	e	enum:options	file:
+OPT_DRAG_LOCK_DISABLE	tools/shared.c	/^	OPT_DRAG_LOCK_DISABLE,$/;"	e	enum:options	file:
+OPT_DRAG_LOCK_ENABLE	tools/shared.c	/^	OPT_DRAG_LOCK_ENABLE,$/;"	e	enum:options	file:
+OPT_DWT_DISABLE	tools/shared.c	/^	OPT_DWT_DISABLE,$/;"	e	enum:options	file:
+OPT_DWT_ENABLE	tools/shared.c	/^	OPT_DWT_ENABLE,$/;"	e	enum:options	file:
+OPT_GRAB	tools/shared.c	/^	OPT_GRAB,$/;"	e	enum:options	file:
+OPT_HELP	tools/shared.c	/^	OPT_HELP,$/;"	e	enum:options	file:
+OPT_LEFT_HANDED_DISABLE	tools/shared.c	/^	OPT_LEFT_HANDED_DISABLE,$/;"	e	enum:options	file:
+OPT_LEFT_HANDED_ENABLE	tools/shared.c	/^	OPT_LEFT_HANDED_ENABLE,$/;"	e	enum:options	file:
+OPT_MIDDLEBUTTON_DISABLE	tools/shared.c	/^	OPT_MIDDLEBUTTON_DISABLE,$/;"	e	enum:options	file:
+OPT_MIDDLEBUTTON_ENABLE	tools/shared.c	/^	OPT_MIDDLEBUTTON_ENABLE,$/;"	e	enum:options	file:
+OPT_NATURAL_SCROLL_DISABLE	tools/shared.c	/^	OPT_NATURAL_SCROLL_DISABLE,$/;"	e	enum:options	file:
+OPT_NATURAL_SCROLL_ENABLE	tools/shared.c	/^	OPT_NATURAL_SCROLL_ENABLE,$/;"	e	enum:options	file:
+OPT_SCROLL_BUTTON	tools/shared.c	/^	OPT_SCROLL_BUTTON,$/;"	e	enum:options	file:
+OPT_SCROLL_METHOD	tools/shared.c	/^	OPT_SCROLL_METHOD,$/;"	e	enum:options	file:
+OPT_SPEED	tools/shared.c	/^	OPT_SPEED,$/;"	e	enum:options	file:
+OPT_TAP_DISABLE	tools/shared.c	/^	OPT_TAP_DISABLE,$/;"	e	enum:options	file:
+OPT_TAP_ENABLE	tools/shared.c	/^	OPT_TAP_ENABLE,$/;"	e	enum:options	file:
+OPT_UDEV	tools/shared.c	/^	OPT_UDEV,$/;"	e	enum:options	file:
+OPT_VERBOSE	tools/shared.c	/^	OPT_VERBOSE,$/;"	e	enum:options	file:
+PALM_EDGE	src/evdev-mt-touchpad.h	/^	PALM_EDGE,$/;"	e	enum:touch_palm_state
+PALM_NONE	src/evdev-mt-touchpad.h	/^	PALM_NONE = 0,$/;"	e	enum:touch_palm_state
+PALM_TRACKPOINT	src/evdev-mt-touchpad.h	/^	PALM_TRACKPOINT,$/;"	e	enum:touch_palm_state
+PALM_TYPING	src/evdev-mt-touchpad.h	/^	PALM_TYPING,$/;"	e	enum:touch_palm_state
+PRODUCT_ID_SYNAPTICS_SERIAL	.pc/touch-point-orientation-size.patch/src/libinput-util.h	41;"	d
+PRODUCT_ID_SYNAPTICS_SERIAL	src/libinput-util.h	41;"	d
+RATELIMIT_EXCEEDED	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	RATELIMIT_EXCEEDED,$/;"	e	enum:ratelimit_state
+RATELIMIT_EXCEEDED	src/libinput-util.h	/^	RATELIMIT_EXCEEDED,$/;"	e	enum:ratelimit_state
+RATELIMIT_PASS	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	RATELIMIT_PASS,$/;"	e	enum:ratelimit_state
+RATELIMIT_PASS	src/libinput-util.h	/^	RATELIMIT_PASS,$/;"	e	enum:ratelimit_state
+RATELIMIT_THRESHOLD	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	RATELIMIT_THRESHOLD,$/;"	e	enum:ratelimit_state
+RATELIMIT_THRESHOLD	src/libinput-util.h	/^	RATELIMIT_THRESHOLD,$/;"	e	enum:ratelimit_state
+REL_CNT	include/linux/input.h	808;"	d
+REL_DIAL	include/linux/input.h	804;"	d
+REL_HWHEEL	include/linux/input.h	803;"	d
+REL_MAX	include/linux/input.h	807;"	d
+REL_MISC	include/linux/input.h	806;"	d
+REL_RX	include/linux/input.h	800;"	d
+REL_RY	include/linux/input.h	801;"	d
+REL_RZ	include/linux/input.h	802;"	d
+REL_WHEEL	include/linux/input.h	805;"	d
+REL_X	include/linux/input.h	797;"	d
+REL_Y	include/linux/input.h	798;"	d
+REL_Z	include/linux/input.h	799;"	d
+REP_CNT	include/linux/input.h	924;"	d
+REP_DELAY	include/linux/input.h	921;"	d
+REP_MAX	include/linux/input.h	923;"	d
+REP_PERIOD	include/linux/input.h	922;"	d
+S	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	S  = 1 << 4,$/;"	e	enum:directions
+S	src/libinput-private.h	/^	S  = 1 << 4,$/;"	e	enum:directions
+SCROLL_EVENT_MOTION	src/evdev-mt-touchpad-edge-scroll.c	/^	SCROLL_EVENT_MOTION,$/;"	e	enum:scroll_event	file:
+SCROLL_EVENT_POSTED	src/evdev-mt-touchpad-edge-scroll.c	/^	SCROLL_EVENT_POSTED,$/;"	e	enum:scroll_event	file:
+SCROLL_EVENT_RELEASE	src/evdev-mt-touchpad-edge-scroll.c	/^	SCROLL_EVENT_RELEASE,$/;"	e	enum:scroll_event	file:
+SCROLL_EVENT_TIMEOUT	src/evdev-mt-touchpad-edge-scroll.c	/^	SCROLL_EVENT_TIMEOUT,$/;"	e	enum:scroll_event	file:
+SCROLL_EVENT_TOUCH	src/evdev-mt-touchpad-edge-scroll.c	/^	SCROLL_EVENT_TOUCH,$/;"	e	enum:scroll_event	file:
+SE	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	SE = 1 << 3,$/;"	e	enum:directions
+SE	src/libinput-private.h	/^	SE = 1 << 3,$/;"	e	enum:directions
+SND_BELL	include/linux/input.h	931;"	d
+SND_CLICK	include/linux/input.h	930;"	d
+SND_CNT	include/linux/input.h	934;"	d
+SND_MAX	include/linux/input.h	933;"	d
+SND_TONE	include/linux/input.h	932;"	d
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(fake_mt_exists)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(fake_mt_no_touch_events)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_abs_transform)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_calibration_rotation)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_calibration_scale)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_calibration_translation)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_double_touch_down_up)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_frame_events)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_initial_state)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_many_slots)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_no_left_handed)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_protocol_a_2fg_touch)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_protocol_a_init)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_protocol_a_touch)$/;"	f
+START_TEST	.pc/touch-point-orientation-size.patch/test/touch.c	/^START_TEST(touch_time_usec)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_device_missing_res)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_device_no_absx)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_device_no_absy)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_device_no_range)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_mt_device_missing_res)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_mt_device_no_absx)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_mt_device_no_absy)$/;"	f
+START_TEST	test/device.c	/^START_TEST(abs_mt_device_no_range)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_abs_rel)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_context)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_events_pending)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_release_buttons)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_release_keys)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_release_softbutton)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_release_tap)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_release_tap_n_drag)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_topsoftbutton)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_disable_touchpad)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_double_disable)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_double_enable)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_get_udev_handle)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_group_get)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_group_ref)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_ids)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_nonpointer_rel)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_reenable_device_removed)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_reenable_syspath_changed)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_sendevents_config)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_sendevents_config_default)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_sendevents_config_invalid)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_sendevents_config_touchpad)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_sendevents_config_touchpad_superset)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_touch_rel)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_touchpad_rel)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_udev_tag_alps)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_udev_tag_apple)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_udev_tag_synaptics_serial)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_udev_tag_wacom)$/;"	f
+START_TEST	test/device.c	/^START_TEST(device_wheel_only)$/;"	f
+START_TEST	test/gestures.c	/^START_TEST(gestures_cap)$/;"	f
+START_TEST	test/gestures.c	/^START_TEST(gestures_nocap)$/;"	f
+START_TEST	test/gestures.c	/^START_TEST(gestures_pinch)$/;"	f
+START_TEST	test/gestures.c	/^START_TEST(gestures_spread)$/;"	f
+START_TEST	test/gestures.c	/^START_TEST(gestures_swipe_3fg)$/;"	f
+START_TEST	test/gestures.c	/^START_TEST(gestures_time_usec)$/;"	f
+START_TEST	test/keyboard.c	/^START_TEST(keyboard_has_key)$/;"	f
+START_TEST	test/keyboard.c	/^START_TEST(keyboard_ignore_no_pressed_release)$/;"	f
+START_TEST	test/keyboard.c	/^START_TEST(keyboard_key_auto_release)$/;"	f
+START_TEST	test/keyboard.c	/^START_TEST(keyboard_keys_bad_device)$/;"	f
+START_TEST	test/keyboard.c	/^START_TEST(keyboard_seat_key_count)$/;"	f
+START_TEST	test/keyboard.c	/^START_TEST(keyboard_time_usec)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_eq_and_ne)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_eq_fails)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_ge_fails)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_gt_fails)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_le_fails)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_lt_fails)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_lt_gt)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(ck_double_ne_fails)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_abort_msg_NULL_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_abort_msg_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_assert_msg_NULL_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_assert_msg_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_assert_msg_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_assert_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_assert_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_eq_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_eq_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_ge_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_ge_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_gt_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_gt_trigger_eq)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_gt_trigger_lt)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_le_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_le_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_lt_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_lt_trigger_eq)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_lt_trigger_gt)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_ne_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_int_ne_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_eq_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_eq_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_eq_trigger_NULL)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_eq_trigger_NULL2)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_ne_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_ne_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_ne_trigger_NULL)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_ne_trigger_NULL2)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_notnull_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_notnull_trigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_notnull_trigger_NULL)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_null_notrigger)$/;"	f
+START_TEST	test/litest-selftest.c	/^START_TEST(litest_ptr_null_trigger)$/;"	f
+START_TEST	test/log.c	/^START_TEST(log_default_priority)$/;"	f
+START_TEST	test/log.c	/^START_TEST(log_handler_NULL)$/;"	f
+START_TEST	test/log.c	/^START_TEST(log_handler_invoked)$/;"	f
+START_TEST	test/log.c	/^START_TEST(log_priority)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(config_status_string)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(context_ref_counting)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(dimension_prop_parser)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(dpi_parser)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(event_conversion_device_notify)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(event_conversion_gesture)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(event_conversion_key)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(event_conversion_pointer)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(event_conversion_pointer_abs)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(event_conversion_touch)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(matrix_helpers)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(ratelimit_helpers)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(time_conversion)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(trackpoint_accel_parser)$/;"	f
+START_TEST	test/misc.c	/^START_TEST(wheel_click_parser)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_add_device)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_add_device_suspend_resume)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_add_device_suspend_resume_fail)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_add_device_suspend_resume_remove_device)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_add_invalid_path)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_added_device)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_added_seat)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_create_NULL)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_create_destroy)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_create_invalid)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_device_sysname)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_double_remove_device)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_double_resume)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_double_suspend)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_remove_device)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_seat_change)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_seat_recycle)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_set_user_data)$/;"	f
+START_TEST	test/path.c	/^START_TEST(path_suspend)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_default_alps)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_default_clickpad)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_default_disabled)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_default_enabled)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_default_touchpad)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_doubleclick)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_middleclick)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_middleclick_during)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(middlebutton_timeout)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_absolute_initial_state)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_accel_defaults)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_accel_defaults_absolute)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_accel_defaults_absolute_relative)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_accel_direction_change)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_accel_invalid)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_button)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_button_auto_release)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_left_handed)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_left_handed_defaults)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_left_handed_during_click)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_left_handed_during_click_multiple_buttons)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_motion_absolute)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_motion_relative)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_motion_relative_min_decel)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_motion_relative_zero)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_motion_unaccel)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_no_calibration)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_scroll_button)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_scroll_natural_defaults)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_scroll_natural_enable_config)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_scroll_natural_wheel)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_scroll_nowheel_defaults)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_scroll_wheel)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_seat_button_count)$/;"	f
+START_TEST	test/pointer.c	/^START_TEST(pointer_time_usec)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(fake_mt_exists)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(fake_mt_no_touch_events)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_abs_transform)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_calibration_rotation)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_calibration_scale)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_calibration_translation)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_double_touch_down_up)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_frame_events)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_initial_state)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_many_slots)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_no_left_handed)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_point_no_minor_or_orienation)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_point_properties)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_protocol_a_2fg_touch)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_protocol_a_init)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_protocol_a_touch)$/;"	f
+START_TEST	test/touch.c	/^START_TEST(touch_time_usec)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_btn_left)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_click_n_drag)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_finger_pin)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_left)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_left_1st_fg_move)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_left_2nd_fg_move)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_left_tap_n_drag)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_left_to_right)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_right)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_right_tap_n_drag)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_softbutton_right_to_left)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_topsoftbuttons_clickfinger)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_topsoftbuttons_clickfinger_dev_disabled)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_topsoftbuttons_left)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_topsoftbuttons_middle)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_topsoftbuttons_move_out_ignore)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(clickpad_topsoftbuttons_right)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_1fg_clickfinger)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_1fg_clickfinger_no_touch)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_2fg_clickfinger)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_2fg_clickfinger_bottom)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_2fg_clickfinger_distance)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_3fg_clickfinger)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_3fg_clickfinger_btntool)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_3fg_clickfinger_distance)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_3fg_clickfinger_distance_btntool)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_4fg_clickfinger)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_4fg_clickfinger_btntool_2slots)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_4fg_clickfinger_btntool_3slots)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_area_to_clickfinger_method)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_area_to_clickfinger_method_while_down)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_btn_left)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_click_defaults_btnarea)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_click_defaults_clickfinger)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_click_defaults_none)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_clickfinger_3fg_tool_position)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_clickfinger_4fg_tool_position)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_clickfinger_to_area_method)$/;"	f
+START_TEST	test/touchpad-buttons.c	/^START_TEST(touchpad_clickfinger_to_area_method_while_down)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(clickpad_1fg_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(clickpad_2fg_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_double_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_doubletap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap_n_drag_2fg)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap_n_drag_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap_n_drag_move)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap_n_drag_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap_n_drag_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_multitap_n_drag_timeout)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_n_drag)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_n_drag_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_n_drag_draglock)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_n_drag_draglock_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_n_drag_draglock_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_1fg_tap_n_drag_draglock_timeout)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_click)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_click_apple)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_inverted)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_n_drag)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_n_drag_3fg)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_n_drag_3fg_btntool)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_2fg_tap_quickrelease)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_3fg_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_3fg_tap_btntool)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_3fg_tap_btntool_inverted)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_3fg_tap_quickrelease)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_4fg_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_4fg_tap_quickrelease)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_5fg_tap)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_5fg_tap_quickrelease)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_drag_lock_default_disabled)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_drag_lock_default_unavailable)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_no_2fg_tap_after_move)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_no_2fg_tap_after_timeout)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_no_first_fg_tap_after_move)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_tap_default_disabled)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_tap_default_enabled)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_tap_invalid)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_tap_is_available)$/;"	f
+START_TEST	test/touchpad-tap.c	/^START_TEST(touchpad_tap_is_not_available)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_1fg_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_2fg_no_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_2fg_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_2fg_scroll_return_to_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_2fg_scroll_semi_mt)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_2fg_scroll_slow_distance)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_2fg_scroll_source)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_click)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_config_default_off)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_config_default_on)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_disable_before_touch)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_disable_during_touch)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_disabled)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_edge_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_edge_scroll_interrupt)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_enable_before_touch)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_enable_during_tap)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_enable_during_touch)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_enable_touch)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_key_hold)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_tap)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_tap_drag)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_touch_hold)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_type)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_dwt_type_short_timeout)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_buttonareas_click_stops_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_clickfinger_click_stops_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_into_area)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_into_buttonareas)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_no_2fg)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_no_edge_after_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_no_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_source)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_timeout)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_edge_scroll_within_buttonareas)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_hover_2fg_1fg_down)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_hover_2fg_noevent)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_hover_down)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_hover_down_hover_down)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_hover_down_up)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_hover_noevent)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_initial_state)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed_clickfinger)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed_clickpad)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed_clickpad_delayed)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed_delayed)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed_tapping)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_left_handed_tapping_2fg)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_no_palm_detect_at_edge_for_edge_scrolling)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_at_bottom_corners)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_at_edge)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_at_top_corners)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_no_palm_moving_into_edges)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_palm_becomes_pointer)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_palm_stays_palm)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_palm_detect_tap)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_scroll_defaults)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_scroll_natural_2fg)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_scroll_natural_defaults)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_scroll_natural_edge)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_scroll_natural_enable_config)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_semi_mt_hover_2fg_1fg_down)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_semi_mt_hover_2fg_noevent)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_semi_mt_hover_down)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_semi_mt_hover_down_hover_down)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_semi_mt_hover_down_up)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_semi_mt_hover_noevent)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_begin_no_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_btnarea)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_clickfinger)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_edgescroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_moving)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_tap_begin)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_tap_hold)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_tap_hold_2ndfg)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_tap_hold_2ndfg_tap)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_tap_touch)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_thumb_update_no_motion)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_time_usec)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_tool_tripletap_touch_count)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_trackpoint_buttons)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_trackpoint_buttons_2fg_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_trackpoint_buttons_softbuttons)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_trackpoint_mb_click)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_trackpoint_mb_scroll)$/;"	f
+START_TEST	test/touchpad.c	/^START_TEST(touchpad_trackpoint_no_trackpoint)$/;"	f
+START_TEST	test/trackpoint.c	/^START_TEST(trackpoint_middlebutton)$/;"	f
+START_TEST	test/trackpoint.c	/^START_TEST(trackpoint_middlebutton_noscroll)$/;"	f
+START_TEST	test/trackpoint.c	/^START_TEST(trackpoint_scroll)$/;"	f
+START_TEST	test/trackpoint.c	/^START_TEST(trackpoint_scroll_source)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_added_seat_default)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_change_seat)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_create_NULL)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_create_empty_seat)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_create_seat0)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_device_sysname)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_double_resume)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_double_suspend)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_seat_recycle)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_set_user_data)$/;"	f
+START_TEST	test/udev.c	/^START_TEST(udev_suspend_resume)$/;"	f
+SW	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	SW = 1 << 5,$/;"	e	enum:directions
+SW	src/libinput-private.h	/^	SW = 1 << 5,$/;"	e	enum:directions
+SW_CAMERA_LENS_COVER	include/linux/input.h	877;"	d
+SW_CNT	include/linux/input.h	884;"	d
+SW_DOCK	include/linux/input.h	873;"	d
+SW_FRONT_PROXIMITY	include/linux/input.h	879;"	d
+SW_HEADPHONE_INSERT	include/linux/input.h	868;"	d
+SW_JACK_PHYSICAL_INSERT	include/linux/input.h	875;"	d
+SW_KEYPAD_SLIDE	include/linux/input.h	878;"	d
+SW_LID	include/linux/input.h	866;"	d
+SW_LINEIN_INSERT	include/linux/input.h	881;"	d
+SW_LINEOUT_INSERT	include/linux/input.h	874;"	d
+SW_MAX	include/linux/input.h	883;"	d
+SW_MICROPHONE_INSERT	include/linux/input.h	872;"	d
+SW_MUTE_DEVICE	include/linux/input.h	882;"	d
+SW_RADIO	include/linux/input.h	871;"	d
+SW_RFKILL_ALL	include/linux/input.h	869;"	d
+SW_ROTATE_LOCK	include/linux/input.h	880;"	d
+SW_TABLET_MODE	include/linux/input.h	867;"	d
+SW_VIDEOOUT_INSERT	include/linux/input.h	876;"	d
+SYN_CNT	include/linux/input.h	198;"	d
+SYN_CONFIG	include/linux/input.h	194;"	d
+SYN_DROPPED	include/linux/input.h	196;"	d
+SYN_MAX	include/linux/input.h	197;"	d
+SYN_MT_REPORT	include/linux/input.h	195;"	d
+SYN_REPORT	include/linux/input.h	193;"	d
+TAP_EVENT_BUTTON	src/evdev-mt-touchpad-tap.c	/^	TAP_EVENT_BUTTON,$/;"	e	enum:tap_event	file:
+TAP_EVENT_MOTION	src/evdev-mt-touchpad-tap.c	/^	TAP_EVENT_MOTION,$/;"	e	enum:tap_event	file:
+TAP_EVENT_RELEASE	src/evdev-mt-touchpad-tap.c	/^	TAP_EVENT_RELEASE,$/;"	e	enum:tap_event	file:
+TAP_EVENT_THUMB	src/evdev-mt-touchpad-tap.c	/^	TAP_EVENT_THUMB,$/;"	e	enum:tap_event	file:
+TAP_EVENT_TIMEOUT	src/evdev-mt-touchpad-tap.c	/^	TAP_EVENT_TIMEOUT,$/;"	e	enum:tap_event	file:
+TAP_EVENT_TOUCH	src/evdev-mt-touchpad-tap.c	/^	TAP_EVENT_TOUCH = 12,$/;"	e	enum:tap_event	file:
+TAP_STATE_DEAD	src/evdev-mt-touchpad.h	/^	TAP_STATE_DEAD, \/**< finger count exceeded *\/$/;"	e	enum:tp_tap_state
+TAP_STATE_DRAGGING	src/evdev-mt-touchpad.h	/^	TAP_STATE_DRAGGING,$/;"	e	enum:tp_tap_state
+TAP_STATE_DRAGGING_2	src/evdev-mt-touchpad.h	/^	TAP_STATE_DRAGGING_2,$/;"	e	enum:tp_tap_state
+TAP_STATE_DRAGGING_OR_DOUBLETAP	src/evdev-mt-touchpad.h	/^	TAP_STATE_DRAGGING_OR_DOUBLETAP,$/;"	e	enum:tp_tap_state
+TAP_STATE_DRAGGING_OR_TAP	src/evdev-mt-touchpad.h	/^	TAP_STATE_DRAGGING_OR_TAP,$/;"	e	enum:tp_tap_state
+TAP_STATE_DRAGGING_WAIT	src/evdev-mt-touchpad.h	/^	TAP_STATE_DRAGGING_WAIT,$/;"	e	enum:tp_tap_state
+TAP_STATE_HOLD	src/evdev-mt-touchpad.h	/^	TAP_STATE_HOLD,$/;"	e	enum:tp_tap_state
+TAP_STATE_IDLE	src/evdev-mt-touchpad.h	/^	TAP_STATE_IDLE = 4,$/;"	e	enum:tp_tap_state
+TAP_STATE_MULTITAP	src/evdev-mt-touchpad.h	/^	TAP_STATE_MULTITAP,$/;"	e	enum:tp_tap_state
+TAP_STATE_MULTITAP_DOWN	src/evdev-mt-touchpad.h	/^	TAP_STATE_MULTITAP_DOWN,$/;"	e	enum:tp_tap_state
+TAP_STATE_TAPPED	src/evdev-mt-touchpad.h	/^	TAP_STATE_TAPPED,$/;"	e	enum:tp_tap_state
+TAP_STATE_TOUCH	src/evdev-mt-touchpad.h	/^	TAP_STATE_TOUCH,$/;"	e	enum:tp_tap_state
+TAP_STATE_TOUCH_2	src/evdev-mt-touchpad.h	/^	TAP_STATE_TOUCH_2,$/;"	e	enum:tp_tap_state
+TAP_STATE_TOUCH_2_HOLD	src/evdev-mt-touchpad.h	/^	TAP_STATE_TOUCH_2_HOLD,$/;"	e	enum:tp_tap_state
+TAP_STATE_TOUCH_3	src/evdev-mt-touchpad.h	/^	TAP_STATE_TOUCH_3,$/;"	e	enum:tp_tap_state
+TAP_STATE_TOUCH_3_HOLD	src/evdev-mt-touchpad.h	/^	TAP_STATE_TOUCH_3_HOLD,$/;"	e	enum:tp_tap_state
+TAP_TOUCH_STATE_DEAD	src/evdev-mt-touchpad.h	/^	TAP_TOUCH_STATE_DEAD,		\/**< exceeded motion\/timeout *\/$/;"	e	enum:tp_tap_touch_state
+TAP_TOUCH_STATE_IDLE	src/evdev-mt-touchpad.h	/^	TAP_TOUCH_STATE_IDLE = 16,	\/**< not in touch *\/$/;"	e	enum:tp_tap_touch_state
+TAP_TOUCH_STATE_TOUCH	src/evdev-mt-touchpad.h	/^	TAP_TOUCH_STATE_TOUCH,		\/**< touching, may tap *\/$/;"	e	enum:tp_tap_touch_state
+THUMB_MOVE_TIMEOUT	src/evdev-mt-touchpad.c	36;"	d	file:
+THUMB_STATE_MAYBE	src/evdev-mt-touchpad.h	/^	THUMB_STATE_MAYBE,$/;"	e	enum:tp_thumb_state
+THUMB_STATE_NO	src/evdev-mt-touchpad.h	/^	THUMB_STATE_NO,$/;"	e	enum:tp_thumb_state
+THUMB_STATE_YES	src/evdev-mt-touchpad.h	/^	THUMB_STATE_YES,$/;"	e	enum:tp_thumb_state
+TIMER_H	src/timer.h	25;"	d
+TOUCHPAD_EVENT_BUTTON_PRESS	src/evdev-mt-touchpad.h	/^	TOUCHPAD_EVENT_BUTTON_PRESS	= (1 << 1),$/;"	e	enum:touchpad_event
+TOUCHPAD_EVENT_BUTTON_RELEASE	src/evdev-mt-touchpad.h	/^	TOUCHPAD_EVENT_BUTTON_RELEASE	= (1 << 2),$/;"	e	enum:touchpad_event
+TOUCHPAD_EVENT_MOTION	src/evdev-mt-touchpad.h	/^	TOUCHPAD_EVENT_MOTION		= (1 << 0),$/;"	e	enum:touchpad_event
+TOUCHPAD_EVENT_NONE	src/evdev-mt-touchpad.h	/^	TOUCHPAD_EVENT_NONE		= 0,$/;"	e	enum:touchpad_event
+TOUCHPAD_HISTORY_LENGTH	src/evdev-mt-touchpad.h	33;"	d
+TOUCHPAD_MIN_SAMPLES	src/evdev-mt-touchpad.h	34;"	d
+TOUCH_BEGIN	src/evdev-mt-touchpad.h	/^	TOUCH_BEGIN,$/;"	e	enum:touch_state
+TOUCH_END	src/evdev-mt-touchpad.h	/^	TOUCH_END$/;"	e	enum:touch_state
+TOUCH_HOVERING	src/evdev-mt-touchpad.h	/^	TOUCH_HOVERING,$/;"	e	enum:touch_state
+TOUCH_NONE	src/evdev-mt-touchpad.h	/^	TOUCH_NONE = 0,$/;"	e	enum:touch_state
+TOUCH_SLOT_DATA_MAJOR	src/libinput-private.h	/^	TOUCH_SLOT_DATA_MAJOR = (1 << 1),$/;"	e	enum:touch_slot_data
+TOUCH_SLOT_DATA_MINOR	src/libinput-private.h	/^	TOUCH_SLOT_DATA_MINOR = (1 << 2),$/;"	e	enum:touch_slot_data
+TOUCH_SLOT_DATA_NONE	src/libinput-private.h	/^	TOUCH_SLOT_DATA_NONE = 0,$/;"	e	enum:touch_slot_data
+TOUCH_SLOT_DATA_ORIENTATION	src/libinput-private.h	/^	TOUCH_SLOT_DATA_ORIENTATION = (1 << 3),$/;"	e	enum:touch_slot_data
+TOUCH_SLOT_DATA_PRESSURE	src/libinput-private.h	/^	TOUCH_SLOT_DATA_PRESSURE = (1 << 4),$/;"	e	enum:touch_slot_data
+TOUCH_UPDATE	src/evdev-mt-touchpad.h	/^	TOUCH_UPDATE,$/;"	e	enum:touch_state
+TP_MAGIC_SLOWDOWN	src/filter.c	43;"	d	file:
+TP_MM_TO_DPI_NORMALIZED	src/evdev-mt-touchpad.h	37;"	d
+UDEV_HWDB_D	.pc/fix-litest.patch/test/litest.c	57;"	d	file:
+UDEV_HWDB_D	test/litest.c	57;"	d	file:
+UDEV_MODEL_QUIRKS_HWDB_FILE	.pc/fix-litest.patch/test/litest.c	60;"	d	file:
+UDEV_MODEL_QUIRKS_HWDB_FILE	test/litest.c	60;"	d	file:
+UDEV_MODEL_QUIRKS_RULE_FILE	.pc/fix-litest.patch/test/litest.c	58;"	d	file:
+UDEV_MODEL_QUIRKS_RULE_FILE	test/litest.c	58;"	d	file:
+UDEV_RULES_D	.pc/fix-litest.patch/test/litest.c	55;"	d	file:
+UDEV_RULES_D	test/litest.c	55;"	d	file:
+UDEV_RULE_PREFIX	.pc/fix-litest.patch/test/litest.c	56;"	d	file:
+UDEV_RULE_PREFIX	test/litest.c	56;"	d	file:
+UDEV_TEST_DEVICE_RULE_FILE	.pc/fix-litest.patch/test/litest.c	62;"	d	file:
+UDEV_TEST_DEVICE_RULE_FILE	test/litest.c	62;"	d	file:
+UNDEFINED_DIRECTION	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	UNDEFINED_DIRECTION = 0xff$/;"	e	enum:directions
+UNDEFINED_DIRECTION	src/libinput-private.h	/^	UNDEFINED_DIRECTION = 0xff$/;"	e	enum:directions
+UNW_LOCAL_ONLY	.pc/fix-litest.patch/test/litest.c	84;"	d	file:
+UNW_LOCAL_ONLY	test/litest.c	84;"	d	file:
+VENDOR_ID_APPLE	.pc/touch-point-orientation-size.patch/src/libinput-util.h	38;"	d
+VENDOR_ID_APPLE	src/libinput-util.h	38;"	d
+VENDOR_ID_SYNAPTICS_SERIAL	.pc/touch-point-orientation-size.patch/src/libinput-util.h	40;"	d
+VENDOR_ID_SYNAPTICS_SERIAL	src/libinput-util.h	40;"	d
+VENDOR_ID_WACOM	.pc/touch-point-orientation-size.patch/src/libinput-util.h	39;"	d
+VENDOR_ID_WACOM	src/libinput-util.h	39;"	d
+W	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	W  = 1 << 6,$/;"	e	enum:directions
+W	src/libinput-private.h	/^	W  = 1 << 6,$/;"	e	enum:directions
+X230_ACCELERATION	src/filter.c	115;"	d	file:
+X230_INCLINE	src/filter.c	116;"	d	file:
+X230_MAGIC_SLOWDOWN	src/filter.c	117;"	d	file:
+X230_THRESHOLD	src/filter.c	114;"	d	file:
+X230_TP_MAGIC_LOW_RES_FACTOR	src/filter.c	118;"	d	file:
+_GNU_SOURCE	tools/event-debug.c	24;"	d	file:
+_GNU_SOURCE	tools/event-gui.c	23;"	d	file:
+_GNU_SOURCE	tools/libinput-list-devices.c	24;"	d	file:
+_GNU_SOURCE	tools/ptraccel-debug.c	23;"	d	file:
+_GNU_SOURCE	tools/shared.c	24;"	d	file:
+_INPUT_H	include/linux/input.h	9;"	d
+_PATH_H_	src/path.h	25;"	d
+_SHARED_H_	tools/shared.h	25;"	d
+_UDEV_SEAT_H_	src/udev-seat.h	25;"	d
+_ck_assert_double_eq	test/litest.h	591;"	d
+_ck_assert_double_ne	test/litest.h	603;"	d
+_litest_add	.pc/fix-litest.patch/test/litest.c	/^_litest_add(const char *name,$/;"	f
+_litest_add	test/litest.c	/^_litest_add(const char *name,$/;"	f
+_litest_add_for_device	.pc/fix-litest.patch/test/litest.c	/^_litest_add_for_device(const char *name,$/;"	f
+_litest_add_for_device	test/litest.c	/^_litest_add_for_device(const char *name,$/;"	f
+_litest_add_no_device	.pc/fix-litest.patch/test/litest.c	/^_litest_add_no_device(const char *name, const char *funcname, void *func)$/;"	f
+_litest_add_no_device	test/litest.c	/^_litest_add_no_device(const char *name, const char *funcname, void *func)$/;"	f
+_litest_add_ranged	.pc/fix-litest.patch/test/litest.c	/^_litest_add_ranged(const char *name,$/;"	f
+_litest_add_ranged	test/litest.c	/^_litest_add_ranged(const char *name,$/;"	f
+_litest_add_ranged_for_device	.pc/fix-litest.patch/test/litest.c	/^_litest_add_ranged_for_device(const char *name,$/;"	f
+_litest_add_ranged_for_device	test/litest.c	/^_litest_add_ranged_for_device(const char *name,$/;"	f
+_litest_add_ranged_no_device	.pc/fix-litest.patch/test/litest.c	/^_litest_add_ranged_no_device(const char *name,$/;"	f
+_litest_add_ranged_no_device	test/litest.c	/^_litest_add_ranged_no_device(const char *name,$/;"	f
+abs	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} abs;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon4
+abs	src/evdev.h	/^	} abs;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon34
+absinfo	test/litest-device-alps-dualpoint.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-alps-semi-mt.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-atmel-hover.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-bcm5974.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-elantech-touchpad.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-generic-singletouch.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-keyboard-razer-blackwidow.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-magic-trackpad.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-mouse-roccat.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-ms-surface-cover.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-nexus4-touch-screen.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-protocol-a-touch-screen.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-qemu-usb-tablet.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-synaptics-hover.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-synaptics-st.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-synaptics-t440.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-synaptics-x1-carbon-3rd.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-synaptics.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-touch-screen.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-vmware-virtual-usb-mouse.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-wacom-intuos-finger.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-wacom-touch.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-device-xen-virtual-pointer.c	/^static struct input_absinfo absinfo[] = {$/;"	v	typeref:struct:input_absinfo	file:
+absinfo	test/litest-int.h	/^       struct input_absinfo *absinfo;$/;"	m	struct:litest_test_device	typeref:struct:litest_test_device::input_absinfo
+absinfo_orientation	src/evdev.h	/^					   *absinfo_orientation;$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::
+absinfo_pressure	src/evdev.h	/^		const struct input_absinfo *absinfo_pressure,$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::input_absinfo
+absinfo_x	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		const struct input_absinfo *absinfo_x, *absinfo_y;$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::input_absinfo
+absinfo_x	src/evdev.h	/^		const struct input_absinfo *absinfo_x, *absinfo_y;$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::input_absinfo
+absinfo_y	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		const struct input_absinfo *absinfo_x, *absinfo_y;$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::
+absinfo_y	src/evdev.h	/^		const struct input_absinfo *absinfo_x, *absinfo_y;$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::
+absolute	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct device_coords absolute;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::device_coords	file:
+absolute	src/libinput.c	/^	struct device_coords absolute;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::device_coords	file:
+absx	tools/event-gui.c	/^	int absx, absy;$/;"	m	struct:window	file:
+absy	tools/event-gui.c	/^	int absx, absy;$/;"	m	struct:window	file:
+ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
+ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
+ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
+ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
+ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
+ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
+ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
+ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
+ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
+ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
+ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
+accel	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_accel *accel;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_accel
+accel	src/evdev-mt-touchpad.h	/^	} accel;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon21
+accel	src/filter.c	/^	double accel;		\/* unitless factor *\/$/;"	m	struct:pointer_accelerator	file:
+accel	src/libinput-private.h	/^	struct libinput_device_config_accel *accel;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_accel
+accel_profile_func_t	src/filter.h	/^typedef double (*accel_profile_func_t)(struct motion_filter *filter,$/;"	t
+acceleration_profile	src/filter.c	/^acceleration_profile(struct pointer_accelerator *accel,$/;"	f	file:
+accelerator_destroy	src/filter.c	/^accelerator_destroy(struct motion_filter *filter)$/;"	f	file:
+accelerator_filter	src/filter.c	/^accelerator_filter(struct motion_filter *filter,$/;"	f	file:
+accelerator_filter_constant_x230	src/filter.c	/^accelerator_filter_constant_x230(struct motion_filter *filter,$/;"	f	file:
+accelerator_filter_low_dpi	src/filter.c	/^accelerator_filter_low_dpi(struct motion_filter *filter,$/;"	f	file:
+accelerator_filter_noop	src/filter.c	/^accelerator_filter_noop(struct motion_filter *filter,$/;"	f	file:
+accelerator_filter_trackpoint	src/filter.c	/^accelerator_filter_trackpoint(struct motion_filter *filter,$/;"	f	file:
+accelerator_filter_x230	src/filter.c	/^accelerator_filter_x230(struct motion_filter *filter,$/;"	f	file:
+accelerator_interface	src/filter.c	/^struct motion_filter_interface accelerator_interface = {$/;"	v	typeref:struct:motion_filter_interface
+accelerator_interface_low_dpi	src/filter.c	/^struct motion_filter_interface accelerator_interface_low_dpi = {$/;"	v	typeref:struct:motion_filter_interface
+accelerator_interface_touchpad	src/filter.c	/^struct motion_filter_interface accelerator_interface_touchpad = {$/;"	v	typeref:struct:motion_filter_interface
+accelerator_interface_trackpoint	src/filter.c	/^struct motion_filter_interface accelerator_interface_trackpoint = {$/;"	v	typeref:struct:motion_filter_interface
+accelerator_interface_x230	src/filter.c	/^struct motion_filter_interface accelerator_interface_x230 = {$/;"	v	typeref:struct:motion_filter_interface
+accelerator_restart	src/filter.c	/^accelerator_restart(struct motion_filter *filter,$/;"	f	file:
+accelerator_set_speed	src/filter.c	/^accelerator_set_speed(struct motion_filter *filter,$/;"	f	file:
+active	src/evdev-mt-touchpad.h	/^		unsigned int active;		\/* currently active button, for release event *\/$/;"	m	struct:tp_dispatch::__anon23
+active	tools/event-gui.c	/^	int active;$/;"	m	struct:touch	file:
+active_is_topbutton	src/evdev-mt-touchpad.h	/^		bool active_is_topbutton;	\/* is active a top button? *\/$/;"	m	struct:tp_dispatch::__anon23
+aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
+all_tests	.pc/fix-litest.patch/test/litest.c	/^static struct list all_tests;$/;"	v	typeref:struct:list	file:
+all_tests	test/litest.c	/^static struct list all_tests;$/;"	v	typeref:struct:list	file:
+almost_equal	.pc/touch-point-orientation-size.patch/test/touch.c	323;"	d	file:
+almost_equal	.pc/touch-point-orientation-size.patch/test/touch.c	344;"	d	file:
+almost_equal	test/touch.c	323;"	d	file:
+almost_equal	test/touch.c	344;"	d	file:
+alps_create	test/litest-device-alps-semi-mt.c	/^alps_create(struct litest_device *d)$/;"	f	file:
+alps_dualpoint_create	test/litest-device-alps-dualpoint.c	/^alps_dualpoint_create(struct litest_device *d)$/;"	f	file:
+alps_dualpoint_touch_down	test/litest-device-alps-dualpoint.c	/^alps_dualpoint_touch_down(struct litest_device *d, unsigned int slot, double x, double y)$/;"	f	file:
+alps_dualpoint_touch_move	test/litest-device-alps-dualpoint.c	/^alps_dualpoint_touch_move(struct litest_device *d, unsigned int slot, double x, double y)$/;"	f	file:
+alps_dualpoint_touch_up	test/litest-device-alps-dualpoint.c	/^alps_dualpoint_touch_up(struct litest_device *d, unsigned int slot)$/;"	f	file:
+alps_touch_down	test/litest-device-alps-semi-mt.c	/^alps_touch_down(struct litest_device *d, unsigned int slot, double x, double y)$/;"	f	file:
+alps_touch_move	test/litest-device-alps-semi-mt.c	/^alps_touch_move(struct litest_device *d, unsigned int slot, double x, double y)$/;"	f	file:
+alps_touch_up	test/litest-device-alps-semi-mt.c	/^alps_touch_up(struct litest_device *d, unsigned int slot)$/;"	f	file:
+angle	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	double angle;$/;"	m	struct:libinput_event_gesture	file:
+angle	src/evdev-mt-touchpad.h	/^		double angle;$/;"	m	struct:tp_dispatch::__anon22
+angle	src/libinput.c	/^	double angle;$/;"	m	struct:libinput_event_gesture	file:
+angle	tools/event-gui.c	/^		double angle;$/;"	m	struct:window::__anon2	file:
+apply_calibration	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		int apply_calibration;$/;"	m	struct:evdev_device::__anon4
+apply_calibration	src/evdev.h	/^		int apply_calibration;$/;"	m	struct:evdev_device::__anon34
+area	src/evdev.h	/^	struct ellipse area;$/;"	m	struct:mt_slot	typeref:struct:mt_slot::ellipse
+area	src/libinput.c	/^	struct ellipse area;$/;"	m	struct:libinput_event_touch	typeref:struct:libinput_event_touch::ellipse	file:
+area	tools/event-gui.c	/^	GtkWidget *area;$/;"	m	struct:window	file:
+as_fn_append	configure	/^  as_fn_append ()$/;"	f
+as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
+as_fn_error	configure	/^as_fn_error ()$/;"	f
+as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
+as_fn_exit	configure	/^as_fn_exit ()$/;"	f
+as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
+as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
+as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
+as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
+as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
+as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
+as_fn_unset	configure	/^as_fn_unset ()$/;"	f
+assert_btnevent_from_device	test/touchpad.c	/^assert_btnevent_from_device(struct litest_device *device,$/;"	f	file:
+assert_device_ignored	test/device.c	/^assert_device_ignored(struct libinput *li, struct input_absinfo *absinfo)$/;"	f	file:
+atmel_hover_create	test/litest-device-atmel-hover.c	/^atmel_hover_create(struct litest_device *d)$/;"	f	file:
+attack_length	include/linux/input.h	/^	__u16 attack_length;$/;"	m	struct:ff_envelope
+attack_level	include/linux/input.h	/^	__u16 attack_level;$/;"	m	struct:ff_envelope
+available	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*available)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_accel
+available	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*available)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_middle_emulation
+available	src/libinput-private.h	/^	int (*available)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_accel
+available	src/libinput-private.h	/^	int (*available)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_middle_emulation
+available_data	src/evdev.h	/^	enum touch_slot_data available_data;$/;"	m	struct:mt_slot	typeref:enum:mt_slot::touch_slot_data
+available_data	src/libinput.c	/^	enum touch_slot_data available_data;$/;"	m	struct:libinput_event_touch	typeref:enum:libinput_event_touch::touch_slot_data	file:
+axes	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint32_t axes;$/;"	m	struct:libinput_event_pointer	file:
+axes	src/libinput.c	/^	uint32_t axes;$/;"	m	struct:libinput_event_pointer	file:
+axis_replacement	test/litest.h	/^struct axis_replacement {$/;"	s
+axis_replacement_value	.pc/fix-litest.patch/test/litest.c	/^axis_replacement_value(struct axis_replacement *axes,$/;"	f	file:
+axis_replacement_value	test/litest.c	/^axis_replacement_value(struct axis_replacement *axes,$/;"	f	file:
+backend	tools/shared.h	/^	enum tools_backend backend;$/;"	m	struct:tools_options	typeref:enum:tools_options::tools_backend
+base	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct libinput_device base;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::libinput_device
+base	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_device_notify	typeref:struct:libinput_event_device_notify::libinput_event	file:
+base	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_gesture	typeref:struct:libinput_event_gesture::libinput_event	file:
+base	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_keyboard	typeref:struct:libinput_event_keyboard::libinput_event	file:
+base	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::libinput_event	file:
+base	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_touch	typeref:struct:libinput_event_touch::libinput_event	file:
+base	src/evdev-mt-touchpad.h	/^	struct evdev_dispatch base;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::evdev_dispatch
+base	src/evdev.h	/^	struct libinput_device base;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::libinput_device
+base	src/filter.c	/^	struct motion_filter base;$/;"	m	struct:pointer_accelerator	typeref:struct:pointer_accelerator::motion_filter	file:
+base	src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_device_notify	typeref:struct:libinput_event_device_notify::libinput_event	file:
+base	src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_gesture	typeref:struct:libinput_event_gesture::libinput_event	file:
+base	src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_keyboard	typeref:struct:libinput_event_keyboard::libinput_event	file:
+base	src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::libinput_event	file:
+base	src/libinput.c	/^	struct libinput_event base;$/;"	m	struct:libinput_event_touch	typeref:struct:libinput_event_touch::libinput_event	file:
+base	src/path.h	/^	struct libinput base;$/;"	m	struct:path_input	typeref:struct:path_input::libinput
+base	src/path.h	/^	struct libinput_seat base;$/;"	m	struct:path_seat	typeref:struct:path_seat::libinput_seat
+base	src/udev-seat.h	/^	struct libinput base;$/;"	m	struct:udev_input	typeref:struct:udev_input::libinput
+base	src/udev-seat.h	/^	struct libinput_seat base;$/;"	m	struct:udev_seat	typeref:struct:udev_seat::libinput_seat
+begin	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	uint64_t begin;$/;"	m	struct:ratelimit
+begin	src/libinput-util.h	/^	uint64_t begin;$/;"	m	struct:ratelimit
+bottom_area	src/evdev-mt-touchpad.h	/^		} bottom_area;$/;"	m	struct:tp_dispatch::__anon23	typeref:struct:tp_dispatch::__anon23::__anon25
+bottom_edge	src/evdev-mt-touchpad.h	/^			int32_t bottom_edge;	\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon23::__anon26
+bottom_edge	src/evdev-mt-touchpad.h	/^		int32_t bottom_edge;		\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon27
+buildup	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct normalized_coords buildup;$/;"	m	struct:evdev_device::__anon6	typeref:struct:evdev_device::__anon6::normalized_coords
+buildup	src/evdev.h	/^		struct normalized_coords buildup;$/;"	m	struct:evdev_device::__anon36	typeref:struct:evdev_device::__anon36::normalized_coords
+burst	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	unsigned int burst;$/;"	m	struct:ratelimit
+burst	src/libinput-util.h	/^	unsigned int burst;$/;"	m	struct:ratelimit
+bustype	include/linux/input.h	/^	__u16 bustype;$/;"	m	struct:input_id
+button	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		uint32_t button;$/;"	m	struct:evdev_device::__anon6
+button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint32_t button;$/;"	m	struct:libinput_event_pointer	file:
+button	include/linux/input.h	/^	__u16 button;$/;"	m	struct:ff_trigger
+button	src/evdev-mt-touchpad.h	/^	} button;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon15
+button	src/evdev.h	/^		uint32_t button;$/;"	m	struct:evdev_device::__anon36
+button	src/libinput.c	/^	uint32_t button;$/;"	m	struct:libinput_event_pointer	file:
+button_count	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t button_count[KEY_CNT];$/;"	m	struct:libinput_seat
+button_count	src/libinput-private.h	/^	uint32_t button_count[KEY_CNT];$/;"	m	struct:libinput_seat
+button_down_time	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		uint64_t button_down_time;$/;"	m	struct:evdev_device::__anon6
+button_down_time	src/evdev.h	/^		uint64_t button_down_time;$/;"	m	struct:evdev_device::__anon36
+button_event	src/evdev-mt-touchpad.h	/^enum button_event {$/;"	g
+button_event_to_str	src/evdev-mt-touchpad-buttons.c	/^button_event_to_str(enum button_event event) {$/;"	f	file:
+button_mask	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		uint32_t button_mask;$/;"	m	struct:evdev_device::__anon9
+button_mask	src/evdev.h	/^		uint32_t button_mask;$/;"	m	struct:evdev_device::__anon39
+button_scroll_active	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool button_scroll_active;$/;"	m	struct:evdev_device::__anon6
+button_scroll_active	src/evdev.h	/^		bool button_scroll_active;$/;"	m	struct:evdev_device::__anon36
+button_state	src/evdev-mt-touchpad.h	/^enum button_state {$/;"	g
+button_state_to_str	src/evdev-mt-touchpad-buttons.c	/^button_state_to_str(enum button_state state) {$/;"	f	file:
+buttons	src/evdev-mt-touchpad.h	/^	} buttons;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon23
+buttons_pressed	src/evdev-mt-touchpad.h	/^		uint32_t buttons_pressed;$/;"	m	struct:tp_dispatch::__anon28
+calc_diameter_scale	test/touch.c	/^static inline double calc_diameter_scale(double x_res,$/;"	f	file:
+calculate_acceleration	src/filter.c	/^calculate_acceleration(struct pointer_accelerator *accel,$/;"	f	file:
+calculate_acceleration_factor	src/filter.c	/^calculate_acceleration_factor(struct pointer_accelerator *accel,$/;"	f	file:
+calculate_tracker_velocity	src/filter.c	/^calculate_tracker_velocity(struct pointer_tracker *tracker, uint64_t time)$/;"	f	file:
+calculate_velocity	src/filter.c	/^calculate_velocity(struct pointer_accelerator *accel, uint64_t time)$/;"	f	file:
+calculate_velocity_after_timeout	src/filter.c	/^calculate_velocity_after_timeout(struct pointer_tracker *tracker)$/;"	f	file:
+calibration	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct matrix calibration;$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::matrix
+calibration	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct libinput_device_config_calibration calibration;$/;"	m	struct:evdev_dispatch	typeref:struct:evdev_dispatch::libinput_device_config_calibration
+calibration	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_calibration *calibration;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_calibration
+calibration	src/evdev.h	/^		struct matrix calibration;$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::matrix
+calibration	src/evdev.h	/^	struct libinput_device_config_calibration calibration;$/;"	m	struct:evdev_dispatch	typeref:struct:evdev_dispatch::libinput_device_config_calibration
+calibration	src/libinput-private.h	/^	struct libinput_device_config_calibration *calibration;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_calibration
+calibration_default	tools/libinput-list-devices.c	/^calibration_default(struct libinput_device *device)$/;"	f	file:
+cancelled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	int cancelled;$/;"	m	struct:libinput_event_gesture	file:
+cancelled	src/libinput.c	/^	int cancelled;$/;"	m	struct:libinput_event_gesture	file:
+center	include/linux/input.h	/^	__s16 center;$/;"	m	struct:ff_condition_effect
+center	src/evdev-mt-touchpad.h	/^		struct device_coords center;$/;"	m	struct:tp_touch::__anon14	typeref:struct:tp_touch::__anon14::device_coords
+center	src/evdev-mt-touchpad.h	/^		struct device_float_coords center;$/;"	m	struct:tp_dispatch::__anon22	typeref:struct:tp_dispatch::__anon22::device_float_coords
+change_ptraccel	tools/event-gui.c	/^change_ptraccel(struct window *w, double amount)$/;"	f	file:
+change_scroll_method	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		void (*change_scroll_method)(struct evdev_device *device);$/;"	m	struct:evdev_device::__anon6
+change_scroll_method	src/evdev.h	/^		void (*change_scroll_method)(struct evdev_device *device);$/;"	m	struct:evdev_device::__anon36
+change_to_enabled	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		void (*change_to_enabled)(struct evdev_device *device);$/;"	m	struct:evdev_device::__anon8
+change_to_enabled	src/evdev.h	/^		void (*change_to_enabled)(struct evdev_device *device);$/;"	m	struct:evdev_device::__anon38
+check_event_type	.pc/touch-point-orientation-size.patch/src/libinput.c	/^check_event_type(struct libinput *libinput,$/;"	f	file:
+check_event_type	src/libinput.c	/^check_event_type(struct libinput *libinput,$/;"	f	file:
+ck_assert_double_eq	test/litest.h	569;"	d
+ck_assert_double_ge	test/litest.h	617;"	d
+ck_assert_double_gt	test/litest.h	616;"	d
+ck_assert_double_le	test/litest.h	615;"	d
+ck_assert_double_lt	test/litest.h	614;"	d
+ck_assert_double_ne	test/litest.h	580;"	d
+ck_assert_notnull	test/litest.h	448;"	d
+click_defaults	tools/libinput-list-devices.c	/^click_defaults(struct libinput_device *device)$/;"	f	file:
+click_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_click_method *click_method;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_click_method
+click_method	src/evdev-mt-touchpad.h	/^		enum libinput_config_click_method click_method;$/;"	m	struct:tp_dispatch::__anon23	typeref:enum:tp_dispatch::__anon23::libinput_config_click_method
+click_method	src/libinput-private.h	/^	struct libinput_device_config_click_method *click_method;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_click_method
+click_method	tools/shared.h	/^	enum libinput_config_click_method click_method;$/;"	m	struct:tools_options	typeref:enum:tools_options::libinput_config_click_method
+click_pending	src/evdev-mt-touchpad.h	/^		bool click_pending;$/;"	m	struct:tp_dispatch::__anon23
+clip	tools/event-gui.c	45;"	d	file:
+close_func_count	test/path.c	/^static int close_func_count = 0;$/;"	v	file:
+close_restricted	.pc/fix-litest.patch/test/litest.c	/^close_restricted(int fd, void *userdata)$/;"	f	file:
+close_restricted	.pc/touch-point-orientation-size.patch/src/libinput.c	/^close_restricted(struct libinput *libinput, int fd)$/;"	f
+close_restricted	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	void (*close_restricted)(int fd, void *user_data);$/;"	m	struct:libinput_interface
+close_restricted	src/libinput.c	/^close_restricted(struct libinput *libinput, int fd)$/;"	f
+close_restricted	src/libinput.h	/^	void (*close_restricted)(int fd, void *user_data);$/;"	m	struct:libinput_interface
+close_restricted	test/litest.c	/^close_restricted(int fd, void *userdata)$/;"	f	file:
+close_restricted	test/log.c	/^static void close_restricted(int fd, void *data)$/;"	f	file:
+close_restricted	test/misc.c	/^static void close_restricted(int fd, void *data)$/;"	f	file:
+close_restricted	test/path.c	/^static void close_restricted(int fd, void *data)$/;"	f	file:
+close_restricted	test/udev.c	/^static void close_restricted(int fd, void *data)$/;"	f	file:
+close_restricted	tools/shared.c	/^close_restricted(int fd, void *user_data)$/;"	f	file:
+code	include/linux/input.h	/^	__u16 code;$/;"	m	struct:input_event
+condition	include/linux/input.h	/^		struct ff_condition_effect condition[2]; \/* One for each axis *\/$/;"	m	union:ff_effect::__anon41	typeref:struct:ff_effect::__anon41::ff_condition_effect
+config	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_device_config_accel config;$/;"	m	struct:evdev_device::__anon7	typeref:struct:evdev_device::__anon7::libinput_device_config_accel
+config	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_device_config_left_handed config;$/;"	m	struct:evdev_device::__anon8	typeref:struct:evdev_device::__anon8::libinput_device_config_left_handed
+config	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_device_config_middle_emulation config;$/;"	m	struct:evdev_device::__anon9	typeref:struct:evdev_device::__anon9::libinput_device_config_middle_emulation
+config	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_device_config_scroll_method config;$/;"	m	struct:evdev_device::__anon6	typeref:struct:evdev_device::__anon6::libinput_device_config_scroll_method
+config	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_device_config_send_events config;$/;"	m	struct:evdev_dispatch::__anon10	typeref:struct:evdev_dispatch::__anon10::libinput_device_config_send_events
+config	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config config;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::libinput_device_config
+config	src/evdev-mt-touchpad.h	/^		struct libinput_device_config_dwt config;$/;"	m	struct:tp_dispatch::__anon31	typeref:struct:tp_dispatch::__anon31::libinput_device_config_dwt
+config	src/evdev-mt-touchpad.h	/^		struct libinput_device_config_send_events config;$/;"	m	struct:tp_dispatch::__anon30	typeref:struct:tp_dispatch::__anon30::libinput_device_config_send_events
+config	src/evdev-mt-touchpad.h	/^		struct libinput_device_config_tap config;$/;"	m	struct:tp_dispatch::__anon28	typeref:struct:tp_dispatch::__anon28::libinput_device_config_tap
+config	src/evdev.h	/^		struct libinput_device_config_accel config;$/;"	m	struct:evdev_device::__anon37	typeref:struct:evdev_device::__anon37::libinput_device_config_accel
+config	src/evdev.h	/^		struct libinput_device_config_left_handed config;$/;"	m	struct:evdev_device::__anon38	typeref:struct:evdev_device::__anon38::libinput_device_config_left_handed
+config	src/evdev.h	/^		struct libinput_device_config_middle_emulation config;$/;"	m	struct:evdev_device::__anon39	typeref:struct:evdev_device::__anon39::libinput_device_config_middle_emulation
+config	src/evdev.h	/^		struct libinput_device_config_scroll_method config;$/;"	m	struct:evdev_device::__anon36	typeref:struct:evdev_device::__anon36::libinput_device_config_scroll_method
+config	src/evdev.h	/^		struct libinput_device_config_send_events config;$/;"	m	struct:evdev_dispatch::__anon40	typeref:struct:evdev_dispatch::__anon40::libinput_device_config_send_events
+config	src/libinput-private.h	/^	struct libinput_device_config config;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::libinput_device_config
+config_method	src/evdev-mt-touchpad.h	/^		struct libinput_device_config_click_method config_method;$/;"	m	struct:tp_dispatch::__anon23	typeref:struct:tp_dispatch::__anon23::libinput_device_config_click_method
+config_method	src/evdev-mt-touchpad.h	/^		struct libinput_device_config_scroll_method config_method;$/;"	m	struct:tp_dispatch::__anon27	typeref:struct:tp_dispatch::__anon27::libinput_device_config_scroll_method
+config_natural	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_device_config_natural_scroll config_natural;$/;"	m	struct:evdev_device::__anon6	typeref:struct:evdev_device::__anon6::libinput_device_config_natural_scroll
+config_natural	src/evdev.h	/^		struct libinput_device_config_natural_scroll config_natural;$/;"	m	struct:evdev_device::__anon36	typeref:struct:evdev_device::__anon36::libinput_device_config_natural_scroll
+constant	include/linux/input.h	/^		struct ff_constant_effect constant;$/;"	m	union:ff_effect::__anon41	typeref:struct:ff_effect::__anon41::ff_constant_effect
+container_of	.pc/touch-point-orientation-size.patch/src/libinput-util.h	64;"	d
+container_of	.pc/touch-point-orientation-size.patch/src/libinput-util.h	68;"	d
+container_of	src/libinput-util.h	64;"	d
+container_of	src/libinput-util.h	68;"	d
+context	tools/event-debug.c	/^struct tools_context context;$/;"	v	typeref:struct:tools_context
+context	tools/event-gui.c	/^struct tools_context context;$/;"	v	typeref:struct:tools_context
+count	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*count)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap
+count	src/evdev-mt-touchpad.h	/^		unsigned int count;$/;"	m	struct:tp_touch::__anon13
+count	src/libinput-private.h	/^	int (*count)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap
+create	test/litest-int.h	/^       void (*create)(struct litest_device *d);$/;"	m	struct:litest_test_device
+create_default_filter	src/filter.c	/^create_default_filter(int dpi)$/;"	f	file:
+create_pointer_accelerator_filter_lenovo_x230	src/filter.c	/^create_pointer_accelerator_filter_lenovo_x230(int dpi)$/;"	f
+create_pointer_accelerator_filter_linear	src/filter.c	/^create_pointer_accelerator_filter_linear(int dpi)$/;"	f
+create_pointer_accelerator_filter_linear_low_dpi	src/filter.c	/^create_pointer_accelerator_filter_linear_low_dpi(int dpi)$/;"	f
+create_pointer_accelerator_filter_touchpad	src/filter.c	/^create_pointer_accelerator_filter_touchpad(int dpi)$/;"	f
+create_pointer_accelerator_filter_trackpoint	src/filter.c	/^create_pointer_accelerator_filter_trackpoint(int dpi)$/;"	f
+create_simple_test_device	test/misc.c	/^create_simple_test_device(const char *name, ...)$/;"	f	file:
+cur_tracker	src/filter.c	/^	int cur_tracker;$/;"	m	struct:pointer_accelerator	file:
+curr	src/evdev-mt-touchpad.h	/^		enum button_event curr;$/;"	m	struct:tp_touch::__anon15	typeref:enum:tp_touch::__anon15::button_event
+current_device	.pc/fix-litest.patch/test/litest.c	/^static struct litest_device *current_device;$/;"	v	typeref:struct:litest_device	file:
+current_device	test/litest.c	/^static struct litest_device *current_device;$/;"	v	typeref:struct:litest_device	file:
+current_mode	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		enum libinput_config_send_events_mode current_mode;$/;"	m	struct:evdev_dispatch::__anon10	typeref:enum:evdev_dispatch::__anon10::libinput_config_send_events_mode
+current_mode	src/evdev-mt-touchpad.h	/^		enum libinput_config_send_events_mode current_mode;$/;"	m	struct:tp_dispatch::__anon30	typeref:enum:tp_dispatch::__anon30::libinput_config_send_events_mode
+current_mode	src/evdev.h	/^		enum libinput_config_send_events_mode current_mode;$/;"	m	struct:evdev_dispatch::__anon40	typeref:enum:evdev_dispatch::__anon40::libinput_config_send_events_mode
+custom_data	include/linux/input.h	/^	__s16 *custom_data;$/;"	m	struct:ff_periodic_effect
+custom_len	include/linux/input.h	/^	__u32 custom_len;$/;"	m	struct:ff_periodic_effect
+cwd	.pc/fix-litest.patch/test/litest.c	/^static char cwd[PATH_MAX];$/;"	v	file:
+cwd	test/litest.c	/^static char cwd[PATH_MAX];$/;"	v	file:
+deadband	include/linux/input.h	/^	__u16 deadband;$/;"	m	struct:ff_condition_effect
+debug_trace	.pc/touch-point-orientation-size.patch/src/libinput-util.h	105;"	d
+debug_trace	.pc/touch-point-orientation-size.patch/src/libinput-util.h	99;"	d
+debug_trace	src/libinput-util.h	105;"	d
+debug_trace	src/libinput-util.h	99;"	d
+default_calibration	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct matrix default_calibration; \/* from LIBINPUT_CALIBRATION_MATRIX *\/$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::matrix
+default_calibration	src/evdev.h	/^		struct matrix default_calibration; \/* from LIBINPUT_CALIBRATION_MATRIX *\/$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::matrix
+default_seat	src/path.c	/^static const char default_seat[] = "seat0";$/;"	v	file:
+default_seat	src/udev-seat.c	/^static const char default_seat[] = "seat0";$/;"	v	file:
+default_seat_name	src/path.c	/^static const char default_seat_name[] = "default";$/;"	v	file:
+default_seat_name	src/udev-seat.c	/^static const char default_seat_name[] = "default";$/;"	v	file:
+deg2rad	src/libinput-util.h	/^deg2rad(double angle)$/;"	f
+delay	include/linux/input.h	/^	__u16 delay;$/;"	m	struct:ff_replay
+delta	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct normalized_coords delta;$/;"	m	struct:libinput_event_gesture	typeref:struct:libinput_event_gesture::normalized_coords	file:
+delta	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct normalized_coords delta;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::normalized_coords	file:
+delta	src/filter.c	/^	struct normalized_coords delta; \/* delta to most recent event *\/$/;"	m	struct:pointer_tracker	typeref:struct:pointer_tracker::normalized_coords	file:
+delta	src/libinput.c	/^	struct normalized_coords delta;$/;"	m	struct:libinput_event_gesture	typeref:struct:libinput_event_gesture::normalized_coords	file:
+delta	src/libinput.c	/^	struct normalized_coords delta;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::normalized_coords	file:
+delta_raw	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct device_float_coords delta_raw;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::device_float_coords	file:
+delta_raw	src/libinput.c	/^	struct device_float_coords delta_raw;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::device_float_coords	file:
+delta_unaccel	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct normalized_coords delta_unaccel;$/;"	m	struct:libinput_event_gesture	typeref:struct:libinput_event_gesture::normalized_coords	file:
+delta_unaccel	src/libinput.c	/^	struct normalized_coords delta_unaccel;$/;"	m	struct:libinput_event_gesture	typeref:struct:libinput_event_gesture::normalized_coords	file:
+destroy	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*destroy)(struct evdev_dispatch *dispatch);$/;"	m	struct:evdev_dispatch_interface
+destroy	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	libinput_seat_destroy_func destroy;$/;"	m	struct:libinput_seat
+destroy	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void (*destroy)(struct libinput *libinput);$/;"	m	struct:libinput_interface_backend
+destroy	src/evdev.h	/^	void (*destroy)(struct evdev_dispatch *dispatch);$/;"	m	struct:evdev_dispatch_interface
+destroy	src/filter-private.h	/^	void (*destroy)(struct motion_filter *filter);$/;"	m	struct:motion_filter_interface
+destroy	src/libinput-private.h	/^	libinput_seat_destroy_func destroy;$/;"	m	struct:libinput_seat
+destroy	src/libinput-private.h	/^	void (*destroy)(struct libinput *libinput);$/;"	m	struct:libinput_interface_backend
+detect_thumbs	src/evdev-mt-touchpad.h	/^		bool detect_thumbs;$/;"	m	struct:tp_dispatch::__anon32
+device	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device *device;$/;"	m	struct:libinput_event	typeref:struct:libinput_event::libinput_device
+device	src/evdev-mt-touchpad.h	/^	struct evdev_device *device;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::evdev_device
+device	src/libinput-private.h	/^	struct libinput_device *device;$/;"	m	struct:libinput_event	typeref:struct:libinput_event::libinput_device
+device	tools/shared.h	/^	const char *device; \/* if backend is BACKEND_DEVICE *\/$/;"	m	struct:tools_options
+device_added	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*device_added)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_added	src/evdev.h	/^	void (*device_added)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_added	src/udev-seat.c	/^device_added(struct udev_device *udev_device,$/;"	f	file:
+device_average	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^device_average(struct device_coords a, struct device_coords b)$/;"	f
+device_average	src/libinput-private.h	/^device_average(struct device_coords a, struct device_coords b)$/;"	f
+device_change_seat	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*device_change_seat)(struct libinput_device *device,$/;"	m	struct:libinput_interface_backend
+device_change_seat	src/libinput-private.h	/^	int (*device_change_seat)(struct libinput_device *device,$/;"	m	struct:libinput_interface_backend
+device_coords	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct device_coords {$/;"	s
+device_coords	src/libinput-private.h	/^struct device_coords {$/;"	s
+device_delta	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^device_delta(struct device_coords a, struct device_coords b)$/;"	f
+device_delta	src/libinput-private.h	/^device_delta(struct device_coords a, struct device_coords b)$/;"	f
+device_float_average	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^device_float_average(struct device_float_coords a, struct device_float_coords b)$/;"	f
+device_float_average	src/libinput-private.h	/^device_float_average(struct device_float_coords a, struct device_float_coords b)$/;"	f
+device_float_coords	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct device_float_coords {$/;"	s
+device_float_coords	src/libinput-private.h	/^struct device_float_coords {$/;"	s
+device_float_delta	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^device_float_delta(struct device_float_coords a, struct device_float_coords b)$/;"	f
+device_float_delta	src/libinput-private.h	/^device_float_delta(struct device_float_coords a, struct device_float_coords b)$/;"	f
+device_has_cap	.pc/touch-point-orientation-size.patch/src/libinput.c	/^device_has_cap(struct libinput_device *device,$/;"	f	file:
+device_has_cap	src/libinput.c	/^device_has_cap(struct libinput_device *device,$/;"	f	file:
+device_removed	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*device_removed)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_removed	src/evdev.h	/^	void (*device_removed)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_removed	src/udev-seat.c	/^device_removed(struct udev_device *udev_device, struct udev_input *input)$/;"	f	file:
+device_resumed	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*device_resumed)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_resumed	src/evdev.h	/^	void (*device_resumed)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_suspended	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*device_suspended)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+device_suspended	src/evdev.h	/^	void (*device_suspended)(struct evdev_device *device,$/;"	m	struct:evdev_dispatch_interface
+devices	.pc/fix-litest.patch/test/litest.c	/^	enum litest_device_type devices;$/;"	m	struct:test	typeref:enum:test::litest_device_type	file:
+devices	.pc/fix-litest.patch/test/litest.c	/^struct litest_test_device* devices[] = {$/;"	v	typeref:struct:litest_test_device
+devices	test/litest.c	/^	enum litest_device_type devices;$/;"	m	struct:test	typeref:enum:test::litest_device_type	file:
+devices	test/litest.c	/^struct litest_test_device* devices[] = {$/;"	v	typeref:struct:litest_test_device
+devices	tools/event-gui.c	/^	struct libinput_device *devices[50];$/;"	m	struct:window	typeref:struct:window::libinput_device	file:
+devices_list	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list devices_list;$/;"	m	struct:libinput_seat	typeref:struct:libinput_seat::list
+devices_list	src/libinput-private.h	/^	struct list devices_list;$/;"	m	struct:libinput_seat	typeref:struct:libinput_seat::list
+devname	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	const char *devname;$/;"	m	struct:evdev_device
+devname	src/evdev.h	/^	const char *devname;$/;"	m	struct:evdev_device
+dimensions	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct device_coords dimensions;$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::device_coords
+dimensions	src/evdev.h	/^		struct device_coords dimensions;$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::device_coords
+dir	src/filter.c	/^	int dir;$/;"	m	struct:pointer_tracker	file:
+direction	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		uint32_t direction;$/;"	m	struct:evdev_device::__anon6
+direction	include/linux/input.h	/^	__u16 direction;$/;"	m	struct:ff_effect
+direction	src/evdev-mt-touchpad.h	/^		int direction;$/;"	m	struct:tp_touch::__anon17
+direction	src/evdev.h	/^		uint32_t direction;$/;"	m	struct:evdev_device::__anon36
+direction_lock_threshold	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		double direction_lock_threshold;$/;"	m	struct:evdev_device::__anon6
+direction_lock_threshold	src/evdev.h	/^		double direction_lock_threshold;$/;"	m	struct:evdev_device::__anon36
+directions	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^enum directions {$/;"	g
+directions	src/libinput-private.h	/^enum directions {$/;"	g
+dirty	src/evdev-mt-touchpad.h	/^	bool dirty;$/;"	m	struct:tp_touch
+disable_button_scrolling	test/pointer.c	/^disable_button_scrolling(struct litest_device *device)$/;"	f	file:
+disable_dwt	test/touchpad.c	/^disable_dwt(struct litest_device *dev)$/;"	f	file:
+discrete	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct discrete_coords discrete;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::discrete_coords	file:
+discrete	src/libinput.c	/^	struct discrete_coords discrete;$/;"	m	struct:libinput_event_pointer	typeref:struct:libinput_event_pointer::discrete_coords	file:
+discrete_coords	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct discrete_coords {$/;"	s
+discrete_coords	src/libinput-private.h	/^struct discrete_coords {$/;"	s
+dispatch	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct evdev_dispatch *dispatch;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::evdev_dispatch
+dispatch	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	libinput_source_dispatch_t dispatch;$/;"	m	struct:libinput_source	file:
+dispatch	src/evdev.h	/^	struct evdev_dispatch *dispatch;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::evdev_dispatch
+dispatch	src/libinput.c	/^	libinput_source_dispatch_t dispatch;$/;"	m	struct:libinput_source	file:
+distance	src/evdev-mt-touchpad.h	/^	int distance;				\/* distance == 0 means touch *\/$/;"	m	struct:tp_touch
+down	test/litest-device-atmel-hover.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-bcm5974.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-elantech-touchpad.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-generic-singletouch.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-magic-trackpad.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-ms-surface-cover.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-nexus4-touch-screen.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-protocol-a-touch-screen.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-synaptics-st.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-synaptics-t440.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-synaptics-x1-carbon-3rd.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-synaptics.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-touch-screen.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-wacom-intuos-finger.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+down	test/litest-device-wacom-touch.c	/^static struct input_event down[] = {$/;"	v	typeref:struct:input_event	file:
+dpi	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	int dpi; \/* HW resolution *\/$/;"	m	struct:evdev_device
+dpi	src/evdev.h	/^	int dpi; \/* HW resolution *\/$/;"	m	struct:evdev_device
+dpi_factor	src/filter.c	/^	double dpi_factor;$/;"	m	struct:pointer_accelerator	file:
+drag_lock	tools/shared.h	/^	int drag_lock;$/;"	m	struct:tools_options
+drag_lock_enabled	src/evdev-mt-touchpad.h	/^		bool drag_lock_enabled;$/;"	m	struct:tp_dispatch::__anon28
+draglock_default	tools/libinput-list-devices.c	/^draglock_default(struct libinput_device *device)$/;"	f	file:
+draw	tools/event-gui.c	/^draw(GtkWidget *widget, cairo_t *cr, gpointer data)$/;"	f	file:
+dwt	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_dwt *dwt;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_dwt
+dwt	src/evdev-mt-touchpad.h	/^	} dwt;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon31
+dwt	src/libinput-private.h	/^	struct libinput_device_config_dwt *dwt;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_dwt
+dwt	tools/shared.h	/^	int dwt;$/;"	m	struct:tools_options
+dwt_default	tools/libinput-list-devices.c	/^dwt_default(struct libinput_device *device)$/;"	f	file:
+dwt_enabled	src/evdev-mt-touchpad.h	/^		bool dwt_enabled;$/;"	m	struct:tp_dispatch::__anon31
+edge	src/evdev-mt-touchpad.h	/^		uint32_t edge;$/;"	m	struct:tp_touch::__anon17
+edge_event_to_str	src/evdev-mt-touchpad-edge-scroll.c	/^edge_event_to_str(enum scroll_event event)$/;"	f	file:
+edge_state	src/evdev-mt-touchpad.h	/^		enum tp_edge_scroll_touch_state edge_state;$/;"	m	struct:tp_touch::__anon17	typeref:enum:tp_touch::__anon17::tp_edge_scroll_touch_state
+edge_state_to_str	src/evdev-mt-touchpad-edge-scroll.c	/^edge_state_to_str(enum tp_edge_scroll_touch_state state)$/;"	f	file:
+ellipse	src/libinput-private.h	/^struct ellipse {$/;"	s
+enable_dwt	test/touchpad.c	/^enable_dwt(struct litest_device *dev)$/;"	f	file:
+enabled	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool enabled;$/;"	m	struct:evdev_device::__anon8
+enabled	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool enabled;$/;"	m	struct:evdev_device::__anon9
+enabled	src/evdev-mt-touchpad.h	/^		bool enabled;$/;"	m	struct:tp_dispatch::__anon22
+enabled	src/evdev-mt-touchpad.h	/^		bool enabled;$/;"	m	struct:tp_dispatch::__anon28
+enabled	src/evdev.h	/^		bool enabled;$/;"	m	struct:evdev_device::__anon38
+enabled	src/evdev.h	/^		bool enabled;$/;"	m	struct:evdev_device::__anon39
+enabled_default	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool enabled_default;$/;"	m	struct:evdev_device::__anon9
+enabled_default	src/evdev.h	/^		bool enabled_default;$/;"	m	struct:evdev_device::__anon39
+end_level	include/linux/input.h	/^	__s16 end_level;$/;"	m	struct:ff_ramp_effect
+envelope	include/linux/input.h	/^	struct ff_envelope envelope;$/;"	m	struct:ff_constant_effect	typeref:struct:ff_constant_effect::ff_envelope
+envelope	include/linux/input.h	/^	struct ff_envelope envelope;$/;"	m	struct:ff_periodic_effect	typeref:struct:ff_periodic_effect::ff_envelope
+envelope	include/linux/input.h	/^	struct ff_envelope envelope;$/;"	m	struct:ff_ramp_effect	typeref:struct:ff_ramp_effect::ff_envelope
+epoll_fd	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int epoll_fd;$/;"	m	struct:libinput
+epoll_fd	src/libinput-private.h	/^	int epoll_fd;$/;"	m	struct:libinput
+error	tools/event-gui.c	/^error(const char *fmt, ...)$/;"	f	file:
+evcode	test/litest.h	/^	int32_t evcode;$/;"	m	struct:axis_replacement
+evdev	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct libevdev *evdev;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::libevdev
+evdev	src/evdev.h	/^	struct libevdev *evdev;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::libevdev
+evdev	test/litest.h	/^	struct libevdev *evdev;$/;"	m	struct:litest_device	typeref:struct:litest_device::libevdev
+evdev_accel_config_available	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_accel_config_available(struct libinput_device *device)$/;"	f	file:
+evdev_accel_config_available	src/evdev.c	/^evdev_accel_config_available(struct libinput_device *device)$/;"	f	file:
+evdev_accel_config_get_default_speed	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_accel_config_get_default_speed(struct libinput_device *device)$/;"	f	file:
+evdev_accel_config_get_default_speed	src/evdev.c	/^evdev_accel_config_get_default_speed(struct libinput_device *device)$/;"	f	file:
+evdev_accel_config_get_speed	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_accel_config_get_speed(struct libinput_device *device)$/;"	f	file:
+evdev_accel_config_get_speed	src/evdev.c	/^evdev_accel_config_get_speed(struct libinput_device *device)$/;"	f	file:
+evdev_accel_config_set_speed	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_accel_config_set_speed(struct libinput_device *device, double speed)$/;"	f	file:
+evdev_accel_config_set_speed	src/evdev.c	/^evdev_accel_config_set_speed(struct libinput_device *device, double speed)$/;"	f	file:
+evdev_any_button_down	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_any_button_down(struct evdev_device *device)$/;"	f	file:
+evdev_any_button_down	src/evdev.c	/^evdev_any_button_down(struct evdev_device *device)$/;"	f	file:
+evdev_button_scroll_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_button_scroll_button(struct evdev_device *device,$/;"	f	file:
+evdev_button_scroll_button	src/evdev.c	/^evdev_button_scroll_button(struct evdev_device *device,$/;"	f	file:
+evdev_button_scroll_timeout	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_button_scroll_timeout(uint64_t time, void *data)$/;"	f	file:
+evdev_button_scroll_timeout	src/evdev.c	/^evdev_button_scroll_timeout(uint64_t time, void *data)$/;"	f	file:
+evdev_calibration_get_default_matrix	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_calibration_get_default_matrix(struct libinput_device *libinput_device,$/;"	f	file:
+evdev_calibration_get_default_matrix	src/evdev.c	/^evdev_calibration_get_default_matrix(struct libinput_device *libinput_device,$/;"	f	file:
+evdev_calibration_get_matrix	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_calibration_get_matrix(struct libinput_device *libinput_device,$/;"	f	file:
+evdev_calibration_get_matrix	src/evdev.c	/^evdev_calibration_get_matrix(struct libinput_device *libinput_device,$/;"	f	file:
+evdev_calibration_has_matrix	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_calibration_has_matrix(struct libinput_device *libinput_device)$/;"	f	file:
+evdev_calibration_has_matrix	src/evdev.c	/^evdev_calibration_has_matrix(struct libinput_device *libinput_device)$/;"	f	file:
+evdev_calibration_set_matrix	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_calibration_set_matrix(struct libinput_device *libinput_device,$/;"	f	file:
+evdev_calibration_set_matrix	src/evdev.c	/^evdev_calibration_set_matrix(struct libinput_device *libinput_device,$/;"	f	file:
+evdev_change_scroll_method	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_change_scroll_method(struct evdev_device *device)$/;"	f	file:
+evdev_change_scroll_method	src/evdev.c	/^evdev_change_scroll_method(struct evdev_device *device)$/;"	f	file:
+evdev_change_to_left_handed	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_change_to_left_handed(struct evdev_device *device)$/;"	f	file:
+evdev_change_to_left_handed	src/evdev.c	/^evdev_change_to_left_handed(struct evdev_device *device)$/;"	f	file:
+evdev_check_min_max	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_check_min_max(struct evdev_device *device, unsigned int code)$/;"	f	file:
+evdev_check_min_max	src/evdev.c	/^evdev_check_min_max(struct evdev_device *device, unsigned int code)$/;"	f	file:
+evdev_configure_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_configure_device(struct evdev_device *device)$/;"	f	file:
+evdev_configure_device	src/evdev.c	/^evdev_configure_device(struct evdev_device *device)$/;"	f	file:
+evdev_configure_mt_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_configure_mt_device(struct evdev_device *device)$/;"	f	file:
+evdev_configure_mt_device	src/evdev.c	/^evdev_configure_mt_device(struct evdev_device *device)$/;"	f	file:
+evdev_convert_to_mm	.pc/touch-point-orientation-size.patch/src/evdev.h	/^evdev_convert_to_mm(const struct input_absinfo *absinfo, double v)$/;"	f
+evdev_convert_to_mm	src/evdev.h	/^evdev_convert_to_mm(const struct input_absinfo *absinfo, double v)$/;"	f
+evdev_device	.pc/touch-point-orientation-size.patch/src/evdev.h	/^struct evdev_device {$/;"	s
+evdev_device	src/evdev.h	/^struct evdev_device {$/;"	s
+evdev_device_calibrate	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_calibrate(struct evdev_device *device,$/;"	f
+evdev_device_calibrate	src/evdev.c	/^evdev_device_calibrate(struct evdev_device *device,$/;"	f
+evdev_device_create	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_create(struct libinput_seat *seat,$/;"	f
+evdev_device_create	src/evdev.c	/^evdev_device_create(struct libinput_seat *seat,$/;"	f
+evdev_device_destroy	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_destroy(struct evdev_device *device)$/;"	f
+evdev_device_destroy	src/evdev.c	/^evdev_device_destroy(struct evdev_device *device)$/;"	f
+evdev_device_dispatch	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_dispatch(void *data)$/;"	f	file:
+evdev_device_dispatch	src/evdev.c	/^evdev_device_dispatch(void *data)$/;"	f	file:
+evdev_device_dispatch_one	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_dispatch_one(struct evdev_device *device,$/;"	f	file:
+evdev_device_dispatch_one	src/evdev.c	/^evdev_device_dispatch_one(struct evdev_device *device,$/;"	f	file:
+evdev_device_get_id_product	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_id_product(struct evdev_device *device)$/;"	f
+evdev_device_get_id_product	src/evdev.c	/^evdev_device_get_id_product(struct evdev_device *device)$/;"	f
+evdev_device_get_id_vendor	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_id_vendor(struct evdev_device *device)$/;"	f
+evdev_device_get_id_vendor	src/evdev.c	/^evdev_device_get_id_vendor(struct evdev_device *device)$/;"	f
+evdev_device_get_name	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_name(struct evdev_device *device)$/;"	f
+evdev_device_get_name	src/evdev.c	/^evdev_device_get_name(struct evdev_device *device)$/;"	f
+evdev_device_get_output	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_output(struct evdev_device *device)$/;"	f
+evdev_device_get_output	src/evdev.c	/^evdev_device_get_output(struct evdev_device *device)$/;"	f
+evdev_device_get_size	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_size(struct evdev_device *device,$/;"	f
+evdev_device_get_size	src/evdev.c	/^evdev_device_get_size(struct evdev_device *device,$/;"	f
+evdev_device_get_sysname	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_sysname(struct evdev_device *device)$/;"	f
+evdev_device_get_sysname	src/evdev.c	/^evdev_device_get_sysname(struct evdev_device *device)$/;"	f
+evdev_device_get_udev_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_udev_device(struct evdev_device *device)$/;"	f
+evdev_device_get_udev_device	src/evdev.c	/^evdev_device_get_udev_device(struct evdev_device *device)$/;"	f
+evdev_device_get_udev_tags	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_get_udev_tags(struct evdev_device *device,$/;"	f	file:
+evdev_device_get_udev_tags	src/evdev.c	/^evdev_device_get_udev_tags(struct evdev_device *device,$/;"	f	file:
+evdev_device_has_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_has_button(struct evdev_device *device, uint32_t code)$/;"	f
+evdev_device_has_button	src/evdev.c	/^evdev_device_has_button(struct evdev_device *device, uint32_t code)$/;"	f
+evdev_device_has_capability	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_has_capability(struct evdev_device *device,$/;"	f
+evdev_device_has_capability	src/evdev.c	/^evdev_device_has_capability(struct evdev_device *device,$/;"	f
+evdev_device_has_key	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_has_key(struct evdev_device *device, uint32_t code)$/;"	f
+evdev_device_has_key	src/evdev.c	/^evdev_device_has_key(struct evdev_device *device, uint32_t code)$/;"	f
+evdev_device_have_same_syspath	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_have_same_syspath(struct udev_device *udev_device, int fd)$/;"	f	file:
+evdev_device_have_same_syspath	src/evdev.c	/^evdev_device_have_same_syspath(struct udev_device *udev_device, int fd)$/;"	f	file:
+evdev_device_init_pointer_acceleration	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_init_pointer_acceleration(struct evdev_device *device,$/;"	f
+evdev_device_init_pointer_acceleration	src/evdev.c	/^evdev_device_init_pointer_acceleration(struct evdev_device *device,$/;"	f
+evdev_device_led_update	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_led_update(struct evdev_device *device, enum libinput_led leds)$/;"	f
+evdev_device_led_update	src/evdev.c	/^evdev_device_led_update(struct evdev_device *device, enum libinput_led leds)$/;"	f
+evdev_device_model	.pc/touch-point-orientation-size.patch/src/evdev.h	/^enum evdev_device_model {$/;"	g
+evdev_device_model	src/evdev.h	/^enum evdev_device_model {$/;"	g
+evdev_device_remove	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_remove(struct evdev_device *device)$/;"	f
+evdev_device_remove	src/evdev.c	/^evdev_device_remove(struct evdev_device *device)$/;"	f
+evdev_device_resume	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_resume(struct evdev_device *device)$/;"	f
+evdev_device_resume	src/evdev.c	/^evdev_device_resume(struct evdev_device *device)$/;"	f
+evdev_device_seat_capability	.pc/touch-point-orientation-size.patch/src/evdev.h	/^enum evdev_device_seat_capability {$/;"	g
+evdev_device_seat_capability	src/evdev.h	/^enum evdev_device_seat_capability {$/;"	g
+evdev_device_set_default_calibration	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_set_default_calibration(struct evdev_device *device,$/;"	f
+evdev_device_set_default_calibration	src/evdev.c	/^evdev_device_set_default_calibration(struct evdev_device *device,$/;"	f
+evdev_device_suspend	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_suspend(struct evdev_device *device)$/;"	f
+evdev_device_suspend	src/evdev.c	/^evdev_device_suspend(struct evdev_device *device)$/;"	f
+evdev_device_tags	.pc/touch-point-orientation-size.patch/src/evdev.h	/^enum evdev_device_tags {$/;"	g
+evdev_device_tags	src/evdev.h	/^enum evdev_device_tags {$/;"	g
+evdev_device_transform_ellipse_diameter	src/evdev.c	/^evdev_device_transform_ellipse_diameter(struct evdev_device *device,$/;"	f
+evdev_device_transform_ellipse_diameter_to_mm	src/evdev.c	/^evdev_device_transform_ellipse_diameter_to_mm(struct evdev_device *device,$/;"	f
+evdev_device_transform_orientation	src/evdev.c	/^evdev_device_transform_orientation(struct evdev_device *device,$/;"	f
+evdev_device_transform_pressure	src/evdev.c	/^evdev_device_transform_pressure(struct evdev_device *device,$/;"	f
+evdev_device_transform_x	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_transform_x(struct evdev_device *device,$/;"	f
+evdev_device_transform_x	src/evdev.c	/^evdev_device_transform_x(struct evdev_device *device,$/;"	f
+evdev_device_transform_y	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_device_transform_y(struct evdev_device *device,$/;"	f
+evdev_device_transform_y	src/evdev.c	/^evdev_device_transform_y(struct evdev_device *device,$/;"	f
+evdev_device_udev_tags	.pc/touch-point-orientation-size.patch/src/evdev.c	/^enum evdev_device_udev_tags {$/;"	g	file:
+evdev_device_udev_tags	src/evdev.c	/^enum evdev_device_udev_tags {$/;"	g	file:
+evdev_dispatch	.pc/touch-point-orientation-size.patch/src/evdev.h	/^struct evdev_dispatch {$/;"	s
+evdev_dispatch	src/evdev.h	/^struct evdev_dispatch {$/;"	s
+evdev_dispatch_interface	.pc/touch-point-orientation-size.patch/src/evdev.h	/^struct evdev_dispatch_interface {$/;"	s
+evdev_dispatch_interface	src/evdev.h	/^struct evdev_dispatch_interface {$/;"	s
+evdev_event_type	.pc/touch-point-orientation-size.patch/src/evdev.h	/^enum evdev_event_type {$/;"	g
+evdev_event_type	src/evdev.h	/^enum evdev_event_type {$/;"	g
+evdev_fix_abs_resolution	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_fix_abs_resolution(struct evdev_device *device,$/;"	f	file:
+evdev_fix_abs_resolution	src/evdev.c	/^evdev_fix_abs_resolution(struct evdev_device *device,$/;"	f	file:
+evdev_fix_android_mt	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_fix_android_mt(struct evdev_device *device)$/;"	f	file:
+evdev_fix_android_mt	src/evdev.c	/^evdev_fix_android_mt(struct evdev_device *device)$/;"	f	file:
+evdev_flush_pending_event	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_flush_pending_event(struct evdev_device *device, uint64_t time)$/;"	f	file:
+evdev_flush_pending_event	src/evdev.c	/^evdev_flush_pending_event(struct evdev_device *device, uint64_t time)$/;"	f	file:
+evdev_get_trackpoint_dpi	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_get_trackpoint_dpi(struct evdev_device *device)$/;"	f	file:
+evdev_get_trackpoint_dpi	src/evdev.c	/^evdev_get_trackpoint_dpi(struct evdev_device *device)$/;"	f	file:
+evdev_init_accel	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_init_accel(struct evdev_device *device)$/;"	f	file:
+evdev_init_accel	src/evdev.c	/^evdev_init_accel(struct evdev_device *device)$/;"	f	file:
+evdev_init_button_scroll	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_init_button_scroll(struct evdev_device *device,$/;"	f	file:
+evdev_init_button_scroll	src/evdev.c	/^evdev_init_button_scroll(struct evdev_device *device,$/;"	f	file:
+evdev_init_calibration	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_init_calibration(struct evdev_device *device,$/;"	f	file:
+evdev_init_calibration	src/evdev.c	/^evdev_init_calibration(struct evdev_device *device,$/;"	f	file:
+evdev_init_left_handed	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_init_left_handed(struct evdev_device *device,$/;"	f
+evdev_init_left_handed	src/evdev.c	/^evdev_init_left_handed(struct evdev_device *device,$/;"	f
+evdev_init_middlebutton	src/evdev-middle-button.c	/^evdev_init_middlebutton(struct evdev_device *device,$/;"	f
+evdev_init_natural_scroll	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_init_natural_scroll(struct evdev_device *device)$/;"	f
+evdev_init_natural_scroll	src/evdev.c	/^evdev_init_natural_scroll(struct evdev_device *device)$/;"	f
+evdev_init_sendevents	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_init_sendevents(struct evdev_device *device,$/;"	f	file:
+evdev_init_sendevents	src/evdev.c	/^evdev_init_sendevents(struct evdev_device *device,$/;"	f	file:
+evdev_is_fake_mt_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_is_fake_mt_device(struct evdev_device *device)$/;"	f	file:
+evdev_is_fake_mt_device	src/evdev.c	/^evdev_is_fake_mt_device(struct evdev_device *device)$/;"	f	file:
+evdev_is_scrolling	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_is_scrolling(const struct evdev_device *device,$/;"	f	file:
+evdev_is_scrolling	src/evdev.c	/^evdev_is_scrolling(const struct evdev_device *device,$/;"	f	file:
+evdev_key_type	.pc/touch-point-orientation-size.patch/src/evdev.c	/^enum evdev_key_type {$/;"	g	file:
+evdev_key_type	src/evdev.c	/^enum evdev_key_type {$/;"	g	file:
+evdev_keyboard_notify_key	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_keyboard_notify_key(struct evdev_device *device,$/;"	f
+evdev_keyboard_notify_key	src/evdev.c	/^evdev_keyboard_notify_key(struct evdev_device *device,$/;"	f
+evdev_left_handed_get	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_left_handed_get(struct libinput_device *device)$/;"	f	file:
+evdev_left_handed_get	src/evdev.c	/^evdev_left_handed_get(struct libinput_device *device)$/;"	f	file:
+evdev_left_handed_get_default	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_left_handed_get_default(struct libinput_device *device)$/;"	f	file:
+evdev_left_handed_get_default	src/evdev.c	/^evdev_left_handed_get_default(struct libinput_device *device)$/;"	f	file:
+evdev_left_handed_has	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_left_handed_has(struct libinput_device *device)$/;"	f	file:
+evdev_left_handed_has	src/evdev.c	/^evdev_left_handed_has(struct libinput_device *device)$/;"	f	file:
+evdev_left_handed_set	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_left_handed_set(struct libinput_device *device, int left_handed)$/;"	f	file:
+evdev_left_handed_set	src/evdev.c	/^evdev_left_handed_set(struct libinput_device *device, int left_handed)$/;"	f	file:
+evdev_middlebutton_apply_config	src/evdev-middle-button.c	/^evdev_middlebutton_apply_config(struct evdev_device *device)$/;"	f	file:
+evdev_middlebutton_event	.pc/touch-point-orientation-size.patch/src/evdev.h	/^enum evdev_middlebutton_event {$/;"	g
+evdev_middlebutton_event	src/evdev.h	/^enum evdev_middlebutton_event {$/;"	g
+evdev_middlebutton_filter_button	src/evdev-middle-button.c	/^evdev_middlebutton_filter_button(struct evdev_device *device,$/;"	f
+evdev_middlebutton_get	src/evdev-middle-button.c	/^evdev_middlebutton_get(struct libinput_device *device)$/;"	f	file:
+evdev_middlebutton_get_default	src/evdev-middle-button.c	/^evdev_middlebutton_get_default(struct libinput_device *device)$/;"	f	file:
+evdev_middlebutton_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_handle_timeout	src/evdev-middle-button.c	/^evdev_middlebutton_handle_timeout(uint64_t now, void *data)$/;"	f	file:
+evdev_middlebutton_idle_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_idle_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_ignore_l_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_ignore_l_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_ignore_lr_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_ignore_lr_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_ignore_r_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_ignore_r_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_is_available	src/evdev-middle-button.c	/^evdev_middlebutton_is_available(struct libinput_device *device)$/;"	f	file:
+evdev_middlebutton_ldown_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_ldown_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_lup_pending_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_lup_pending_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_middle_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_middle_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_passthrough_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_passthrough_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_rdown_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_rdown_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_rup_pending_handle_event	src/evdev-middle-button.c	/^evdev_middlebutton_rup_pending_handle_event(struct evdev_device *device,$/;"	f	file:
+evdev_middlebutton_set	src/evdev-middle-button.c	/^evdev_middlebutton_set(struct libinput_device *device,$/;"	f	file:
+evdev_middlebutton_state	.pc/touch-point-orientation-size.patch/src/evdev.h	/^enum evdev_middlebutton_state {$/;"	g
+evdev_middlebutton_state	src/evdev.h	/^enum evdev_middlebutton_state {$/;"	g
+evdev_mt_touchpad_create	src/evdev-mt-touchpad.c	/^evdev_mt_touchpad_create(struct evdev_device *device)$/;"	f
+evdev_need_mtdev	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_need_mtdev(struct evdev_device *device)$/;"	f	file:
+evdev_need_mtdev	src/evdev.c	/^evdev_need_mtdev(struct evdev_device *device)$/;"	f	file:
+evdev_need_touch_frame	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_need_touch_frame(struct evdev_device *device)$/;"	f	file:
+evdev_need_touch_frame	src/evdev.c	/^evdev_need_touch_frame(struct evdev_device *device)$/;"	f	file:
+evdev_notify_added_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_notify_added_device(struct evdev_device *device)$/;"	f	file:
+evdev_notify_added_device	src/evdev.c	/^evdev_notify_added_device(struct evdev_device *device)$/;"	f	file:
+evdev_notify_axis	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_notify_axis(struct evdev_device *device,$/;"	f
+evdev_notify_axis	src/evdev.c	/^evdev_notify_axis(struct evdev_device *device,$/;"	f
+evdev_notify_resumed_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_notify_resumed_device(struct evdev_device *device)$/;"	f
+evdev_notify_resumed_device	src/evdev.c	/^evdev_notify_resumed_device(struct evdev_device *device)$/;"	f
+evdev_notify_suspended_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_notify_suspended_device(struct evdev_device *device)$/;"	f
+evdev_notify_suspended_device	src/evdev.c	/^evdev_notify_suspended_device(struct evdev_device *device)$/;"	f
+evdev_pointer_notify_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_pointer_notify_button(struct evdev_device *device,$/;"	f
+evdev_pointer_notify_button	src/evdev.c	/^evdev_pointer_notify_button(struct evdev_device *device,$/;"	f
+evdev_pointer_notify_physical_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_pointer_notify_physical_button(struct evdev_device *device,$/;"	f
+evdev_pointer_notify_physical_button	src/evdev.c	/^evdev_pointer_notify_physical_button(struct evdev_device *device,$/;"	f
+evdev_post_scroll	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_post_scroll(struct evdev_device *device,$/;"	f
+evdev_post_scroll	src/evdev.c	/^evdev_post_scroll(struct evdev_device *device,$/;"	f
+evdev_post_trackpoint_scroll	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_post_trackpoint_scroll(struct evdev_device *device,$/;"	f	file:
+evdev_post_trackpoint_scroll	src/evdev.c	/^evdev_post_trackpoint_scroll(struct evdev_device *device,$/;"	f	file:
+evdev_process_absolute	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_absolute(struct evdev_device *device,$/;"	f	file:
+evdev_process_absolute	src/evdev.c	/^evdev_process_absolute(struct evdev_device *device,$/;"	f	file:
+evdev_process_absolute_motion	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_absolute_motion(struct evdev_device *device,$/;"	f	file:
+evdev_process_absolute_motion	src/evdev.c	/^evdev_process_absolute_motion(struct evdev_device *device,$/;"	f	file:
+evdev_process_event	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_event(struct evdev_device *device, struct input_event *e)$/;"	f	file:
+evdev_process_event	src/evdev.c	/^evdev_process_event(struct evdev_device *device, struct input_event *e)$/;"	f	file:
+evdev_process_key	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_key(struct evdev_device *device,$/;"	f	file:
+evdev_process_key	src/evdev.c	/^evdev_process_key(struct evdev_device *device,$/;"	f	file:
+evdev_process_relative	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_relative(struct evdev_device *device,$/;"	f	file:
+evdev_process_relative	src/evdev.c	/^evdev_process_relative(struct evdev_device *device,$/;"	f	file:
+evdev_process_touch	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_touch(struct evdev_device *device,$/;"	f	file:
+evdev_process_touch	src/evdev.c	/^evdev_process_touch(struct evdev_device *device,$/;"	f	file:
+evdev_process_touch_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_process_touch_button(struct evdev_device *device,$/;"	f	file:
+evdev_process_touch_button	src/evdev.c	/^evdev_process_touch_button(struct evdev_device *device,$/;"	f	file:
+evdev_read_attr_res_prop	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_read_attr_res_prop(struct evdev_device *device,$/;"	f	file:
+evdev_read_attr_res_prop	src/evdev.c	/^evdev_read_attr_res_prop(struct evdev_device *device,$/;"	f	file:
+evdev_read_attr_size_prop	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_read_attr_size_prop(struct evdev_device *device,$/;"	f	file:
+evdev_read_attr_size_prop	src/evdev.c	/^evdev_read_attr_size_prop(struct evdev_device *device,$/;"	f	file:
+evdev_read_dpi_prop	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_read_dpi_prop(struct evdev_device *device)$/;"	f	file:
+evdev_read_dpi_prop	src/evdev.c	/^evdev_read_dpi_prop(struct evdev_device *device)$/;"	f	file:
+evdev_read_model_flags	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_read_model_flags(struct evdev_device *device)$/;"	f	file:
+evdev_read_model_flags	src/evdev.c	/^evdev_read_model_flags(struct evdev_device *device)$/;"	f	file:
+evdev_read_wheel_click_prop	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_read_wheel_click_prop(struct evdev_device *device)$/;"	f	file:
+evdev_read_wheel_click_prop	src/evdev.c	/^evdev_read_wheel_click_prop(struct evdev_device *device)$/;"	f	file:
+evdev_reject_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_reject_device(struct evdev_device *device)$/;"	f	file:
+evdev_reject_device	src/evdev.c	/^evdev_reject_device(struct evdev_device *device)$/;"	f	file:
+evdev_reject_relative	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_reject_relative(struct evdev_device *device,$/;"	f	file:
+evdev_reject_relative	src/evdev.c	/^evdev_reject_relative(struct evdev_device *device,$/;"	f	file:
+evdev_scroll_config_natural_get	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_config_natural_get(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_config_natural_get	src/evdev.c	/^evdev_scroll_config_natural_get(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_config_natural_get_default	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_config_natural_get_default(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_config_natural_get_default	src/evdev.c	/^evdev_scroll_config_natural_get_default(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_config_natural_has	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_config_natural_has(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_config_natural_has	src/evdev.c	/^evdev_scroll_config_natural_has(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_config_natural_set	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_config_natural_set(struct libinput_device *device,$/;"	f	file:
+evdev_scroll_config_natural_set	src/evdev.c	/^evdev_scroll_config_natural_set(struct libinput_device *device,$/;"	f	file:
+evdev_scroll_get_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_get_button(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_button	src/evdev.c	/^evdev_scroll_get_button(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_default_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_get_default_button(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_default_button	src/evdev.c	/^evdev_scroll_get_default_button(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_default_method	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_get_default_method(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_default_method	src/evdev.c	/^evdev_scroll_get_default_method(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_method	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_get_method(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_method	src/evdev.c	/^evdev_scroll_get_method(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_methods	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_get_methods(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_get_methods	src/evdev.c	/^evdev_scroll_get_methods(struct libinput_device *device)$/;"	f	file:
+evdev_scroll_set_button	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_set_button(struct libinput_device *device,$/;"	f	file:
+evdev_scroll_set_button	src/evdev.c	/^evdev_scroll_set_button(struct libinput_device *device,$/;"	f	file:
+evdev_scroll_set_method	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_scroll_set_method(struct libinput_device *device,$/;"	f	file:
+evdev_scroll_set_method	src/evdev.c	/^evdev_scroll_set_method(struct libinput_device *device,$/;"	f	file:
+evdev_sendevents_get_default_mode	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_sendevents_get_default_mode(struct libinput_device *device)$/;"	f	file:
+evdev_sendevents_get_default_mode	src/evdev.c	/^evdev_sendevents_get_default_mode(struct libinput_device *device)$/;"	f	file:
+evdev_sendevents_get_mode	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_sendevents_get_mode(struct libinput_device *device)$/;"	f	file:
+evdev_sendevents_get_mode	src/evdev.c	/^evdev_sendevents_get_mode(struct libinput_device *device)$/;"	f	file:
+evdev_sendevents_get_modes	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_sendevents_get_modes(struct libinput_device *device)$/;"	f	file:
+evdev_sendevents_get_modes	src/evdev.c	/^evdev_sendevents_get_modes(struct libinput_device *device)$/;"	f	file:
+evdev_sendevents_set_mode	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_sendevents_set_mode(struct libinput_device *device,$/;"	f	file:
+evdev_sendevents_set_mode	src/evdev.c	/^evdev_sendevents_set_mode(struct libinput_device *device,$/;"	f	file:
+evdev_set_device_group	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_set_device_group(struct evdev_device *device,$/;"	f	file:
+evdev_set_device_group	src/evdev.c	/^evdev_set_device_group(struct evdev_device *device,$/;"	f	file:
+evdev_start_scrolling	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_start_scrolling(struct evdev_device *device,$/;"	f	file:
+evdev_start_scrolling	src/evdev.c	/^evdev_start_scrolling(struct evdev_device *device,$/;"	f	file:
+evdev_stop_scroll	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_stop_scroll(struct evdev_device *device,$/;"	f
+evdev_stop_scroll	src/evdev.c	/^evdev_stop_scroll(struct evdev_device *device,$/;"	f
+evdev_sync_device	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_sync_device(struct evdev_device *device)$/;"	f	file:
+evdev_sync_device	src/evdev.c	/^evdev_sync_device(struct evdev_device *device)$/;"	f	file:
+evdev_tag_external_mouse	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_tag_external_mouse(struct evdev_device *device,$/;"	f	file:
+evdev_tag_external_mouse	src/evdev.c	/^evdev_tag_external_mouse(struct evdev_device *device,$/;"	f	file:
+evdev_tag_keyboard	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_tag_keyboard(struct evdev_device *device,$/;"	f	file:
+evdev_tag_keyboard	src/evdev.c	/^evdev_tag_keyboard(struct evdev_device *device,$/;"	f	file:
+evdev_tag_touchpad	src/evdev-mt-touchpad.c	/^evdev_tag_touchpad(struct evdev_device *device,$/;"	f
+evdev_tag_trackpoint	.pc/touch-point-orientation-size.patch/src/evdev.c	/^evdev_tag_trackpoint(struct evdev_device *device,$/;"	f	file:
+evdev_tag_trackpoint	src/evdev.c	/^evdev_tag_trackpoint(struct evdev_device *device,$/;"	f	file:
+evdev_to_left_handed	.pc/touch-point-orientation-size.patch/src/evdev.h	/^evdev_to_left_handed(struct evdev_device *device,$/;"	f
+evdev_to_left_handed	src/evdev.h	/^evdev_to_left_handed(struct evdev_device *device,$/;"	f
+evdev_udev_handler	src/udev-seat.c	/^evdev_udev_handler(void *data)$/;"	f	file:
+evdev_udev_tag_match	.pc/touch-point-orientation-size.patch/src/evdev.c	/^struct evdev_udev_tag_match {$/;"	s	file:
+evdev_udev_tag_match	src/evdev.c	/^struct evdev_udev_tag_match {$/;"	s	file:
+evdev_udev_tag_matches	.pc/touch-point-orientation-size.patch/src/evdev.c	/^static const struct evdev_udev_tag_match evdev_udev_tag_matches[] = {$/;"	v	typeref:struct:evdev_udev_tag_match	file:
+evdev_udev_tag_matches	src/evdev.c	/^static const struct evdev_udev_tag_match evdev_udev_tag_matches[] = {$/;"	v	typeref:struct:evdev_udev_tag_match	file:
+event_listeners	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list event_listeners;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::list
+event_listeners	src/libinput-private.h	/^	struct list event_listeners;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::list
+events	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_event **events;$/;"	m	struct:libinput	typeref:struct:libinput::libinput_event
+events	src/libinput-private.h	/^	struct libinput_event **events;$/;"	m	struct:libinput	typeref:struct:libinput::libinput_event
+events	test/litest-device-alps-dualpoint.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-alps-semi-mt.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-atmel-hover.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-bcm5974.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-elantech-touchpad.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-generic-singletouch.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-keyboard-razer-blackwidow.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-keyboard.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-logitech-trackball.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-magic-trackpad.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-mouse-low-dpi.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-mouse-roccat.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-mouse.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-ms-surface-cover.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-nexus4-touch-screen.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-protocol-a-touch-screen.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-qemu-usb-tablet.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-synaptics-hover.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-synaptics-st.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-synaptics-t440.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-synaptics-x1-carbon-3rd.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-synaptics.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-touch-screen.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-trackpoint.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-vmware-virtual-usb-mouse.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-wacom-intuos-finger.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-wacom-touch.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-wheel-only.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-device-xen-virtual-pointer.c	/^static int events[] = {$/;"	v	file:
+events	test/litest-int.h	/^       int *events;$/;"	m	struct:litest_test_device
+events_count	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	size_t events_count;$/;"	m	struct:libinput
+events_count	src/libinput-private.h	/^	size_t events_count;$/;"	m	struct:libinput
+events_in	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	size_t events_in;$/;"	m	struct:libinput
+events_in	src/libinput-private.h	/^	size_t events_in;$/;"	m	struct:libinput
+events_len	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	size_t events_len;$/;"	m	struct:libinput
+events_len	src/libinput-private.h	/^	size_t events_len;$/;"	m	struct:libinput
+events_out	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	size_t events_out;$/;"	m	struct:libinput
+events_out	src/libinput-private.h	/^	size_t events_out;$/;"	m	struct:libinput
+exceeds_range	test/touch.c	/^static inline bool exceeds_range(const struct input_absinfo *info,$/;"	f	file:
+expected_value	test/misc.c	/^	double expected_value;$/;"	m	struct:parser_test_float	file:
+expected_value	test/misc.c	/^	int expected_value;$/;"	m	struct:parser_test	file:
+expire	src/timer.h	/^	uint64_t expire; \/* in absolute us CLOCK_MONOTONIC *\/$/;"	m	struct:libinput_timer
+fade_length	include/linux/input.h	/^	__u16 fade_length;$/;"	m	struct:ff_envelope
+fade_level	include/linux/input.h	/^	__u16 fade_level;$/;"	m	struct:ff_envelope
+fake_resolution	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		int fake_resolution;$/;"	m	struct:evdev_device::__anon4
+fake_resolution	src/evdev.h	/^		int fake_resolution;$/;"	m	struct:evdev_device::__anon34
+fake_touches	src/evdev-mt-touchpad.h	/^	unsigned int fake_touches;$/;"	m	struct:tp_dispatch
+fallback_destroy	.pc/touch-point-orientation-size.patch/src/evdev.c	/^fallback_destroy(struct evdev_dispatch *dispatch)$/;"	f	file:
+fallback_destroy	src/evdev.c	/^fallback_destroy(struct evdev_dispatch *dispatch)$/;"	f	file:
+fallback_dispatch_create	.pc/touch-point-orientation-size.patch/src/evdev.c	/^fallback_dispatch_create(struct libinput_device *device)$/;"	f	file:
+fallback_dispatch_create	src/evdev.c	/^fallback_dispatch_create(struct libinput_device *device)$/;"	f	file:
+fallback_interface	.pc/touch-point-orientation-size.patch/src/evdev.c	/^struct evdev_dispatch_interface fallback_interface = {$/;"	v	typeref:struct:evdev_dispatch_interface
+fallback_interface	src/evdev.c	/^struct evdev_dispatch_interface fallback_interface = {$/;"	v	typeref:struct:evdev_dispatch_interface
+fallback_process	.pc/touch-point-orientation-size.patch/src/evdev.c	/^fallback_process(struct evdev_dispatch *dispatch,$/;"	f	file:
+fallback_process	src/evdev.c	/^fallback_process(struct evdev_dispatch *dispatch,$/;"	f	file:
+fallback_suspend	.pc/touch-point-orientation-size.patch/src/evdev.c	/^fallback_suspend(struct evdev_dispatch *dispatch,$/;"	f	file:
+fallback_suspend	src/evdev.c	/^fallback_suspend(struct evdev_dispatch *dispatch,$/;"	f	file:
+fd	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	int fd;$/;"	m	struct:evdev_device
+fd	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^		int fd;$/;"	m	struct:libinput::__anon3
+fd	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	int fd;$/;"	m	struct:libinput_source	file:
+fd	src/evdev.h	/^	int fd;$/;"	m	struct:evdev_device
+fd	src/libinput-private.h	/^		int fd;$/;"	m	struct:libinput::__anon33
+fd	src/libinput.c	/^	int fd;$/;"	m	struct:libinput_source	file:
+features	test/litest-int.h	/^       enum litest_device_feature features;$/;"	m	struct:litest_test_device	typeref:enum:litest_test_device::litest_device_feature
+feed_trackers	src/filter.c	/^feed_trackers(struct pointer_accelerator *accel,$/;"	f	file:
+ff_condition_effect	include/linux/input.h	/^struct ff_condition_effect {$/;"	s
+ff_constant_effect	include/linux/input.h	/^struct ff_constant_effect {$/;"	s
+ff_effect	include/linux/input.h	/^struct ff_effect {$/;"	s
+ff_envelope	include/linux/input.h	/^struct ff_envelope {$/;"	s
+ff_periodic_effect	include/linux/input.h	/^struct ff_periodic_effect {$/;"	s
+ff_ramp_effect	include/linux/input.h	/^struct ff_ramp_effect {$/;"	s
+ff_replay	include/linux/input.h	/^struct ff_replay {$/;"	s
+ff_rumble_effect	include/linux/input.h	/^struct ff_rumble_effect {$/;"	s
+ff_trigger	include/linux/input.h	/^struct ff_trigger {$/;"	s
+filter	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct motion_filter *filter;$/;"	m	struct:evdev_device::__anon7	typeref:struct:evdev_device::__anon7::motion_filter
+filter	src/evdev.h	/^		struct motion_filter *filter;$/;"	m	struct:evdev_device::__anon37	typeref:struct:evdev_device::__anon37::motion_filter
+filter	src/filter-private.h	/^	struct normalized_coords (*filter)($/;"	m	struct:motion_filter_interface	typeref:struct:motion_filter_interface::filter
+filter_constant	src/filter-private.h	/^	struct normalized_coords (*filter_constant)($/;"	m	struct:motion_filter_interface	typeref:struct:motion_filter_interface::filter_constant
+filter_destroy	src/filter.c	/^filter_destroy(struct motion_filter *filter)$/;"	f
+filter_device	.pc/fix-litest.patch/test/litest.c	/^const char *filter_device = NULL;$/;"	v
+filter_device	test/litest.c	/^const char *filter_device = NULL;$/;"	v
+filter_dispatch	src/filter.c	/^filter_dispatch(struct motion_filter *filter,$/;"	f
+filter_dispatch_constant	src/filter.c	/^filter_dispatch_constant(struct motion_filter *filter,$/;"	f
+filter_get_speed	src/filter.c	/^filter_get_speed(struct motion_filter *filter)$/;"	f
+filter_group	.pc/fix-litest.patch/test/litest.c	/^const char *filter_group = NULL;$/;"	v
+filter_group	test/litest.c	/^const char *filter_group = NULL;$/;"	v
+filter_restart	src/filter.c	/^filter_restart(struct motion_filter *filter,$/;"	f
+filter_set_speed	src/filter.c	/^filter_set_speed(struct motion_filter *filter,$/;"	f
+filter_test	.pc/fix-litest.patch/test/litest.c	/^const char *filter_test = NULL;$/;"	v
+filter_test	test/litest.c	/^const char *filter_test = NULL;$/;"	v
+finger_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	int finger_count;$/;"	m	struct:libinput_event_gesture	file:
+finger_count	src/evdev-mt-touchpad.h	/^		unsigned int finger_count;$/;"	m	struct:tp_dispatch::__anon22
+finger_count	src/libinput.c	/^	int finger_count;$/;"	m	struct:libinput_event_gesture	file:
+finger_count_pending	src/evdev-mt-touchpad.h	/^		unsigned int finger_count_pending;$/;"	m	struct:tp_dispatch::__anon22
+finger_count_switch_timer	src/evdev-mt-touchpad.h	/^		struct libinput_timer finger_count_switch_timer;$/;"	m	struct:tp_dispatch::__anon22	typeref:struct:tp_dispatch::__anon22::libinput_timer
+first	src/evdev-mt-touchpad.h	/^		struct device_coords first; \/* first coordinates if is_palm == true *\/$/;"	m	struct:tp_touch::__anon18	typeref:struct:tp_touch::__anon18::device_coords
+first_event_time	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		uint64_t first_event_time;$/;"	m	struct:evdev_device::__anon9
+first_event_time	src/evdev.h	/^		uint64_t first_event_time;$/;"	m	struct:evdev_device::__anon39
+first_touch_time	src/evdev-mt-touchpad.h	/^		uint64_t first_touch_time;$/;"	m	struct:tp_touch::__anon20
+flags	include/linux/input.h	/^	__u8  flags;$/;"	m	struct:input_keymap_entry
+flat	include/linux/input.h	/^	__s32 flat;$/;"	m	struct:input_absinfo
+func_append	configure	/^func_append ()\\$/;"	f
+func_append	ltmain.sh	/^func_append ()$/;"	f
+func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
+func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
+func_arith	configure	/^func_arith ()\\$/;"	f
+func_arith	ltmain.sh	/^func_arith ()$/;"	f
+func_basename	configure	/^func_basename ()\\$/;"	f
+func_basename	ltmain.sh	/^func_basename ()$/;"	f
+func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
+func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
+func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
+func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
+func_config	ltmain.sh	/^func_config ()$/;"	f
+func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
+func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
+func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
+func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
+func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
+func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
+func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
+func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
+func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
+func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
+func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
+func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
+func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
+func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
+func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
+func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
+func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
+func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
+func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
+func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
+func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
+func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
+func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
+func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
+func_dirname	configure	/^func_dirname ()\\$/;"	f
+func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
+func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
+func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
+func_echo	ltmain.sh	/^func_echo ()$/;"	f
+func_echo_all	configure	/^func_echo_all ()$/;"	f
+func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
+func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
+func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
+func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
+func_error	ltmain.sh	/^func_error ()$/;"	f
+func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
+func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
+func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
+func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
+func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
+func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
+func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
+func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
+func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
+func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
+func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
+func_features	ltmain.sh	/^func_features ()$/;"	f
+func_file_conv	compile	/^func_file_conv ()$/;"	f
+func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
+func_grep	ltmain.sh	/^func_grep ()$/;"	f
+func_help	ltmain.sh	/^func_help ()$/;"	f
+func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
+func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
+func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
+func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
+func_len	configure	/^func_len ()\\$/;"	f
+func_len	ltmain.sh	/^func_len ()$/;"	f
+func_lo2o	configure	/^func_lo2o ()\\$/;"	f
+func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
+func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
+func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
+func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
+func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
+func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
+func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
+func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
+func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
+func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
+func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
+func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
+func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
+func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
+func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
+func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
+func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
+func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
+func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
+func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
+func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
+func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
+func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
+func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
+func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
+func_source	ltmain.sh	/^func_source ()$/;"	f
+func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
+func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
+func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
+func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
+func_stripname	configure	/^func_stripname ()\\$/;"	f
+func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
+func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
+func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
+func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
+func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
+func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
+func_usage	ltmain.sh	/^func_usage ()$/;"	f
+func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
+func_version	ltmain.sh	/^func_version ()$/;"	f
+func_warning	ltmain.sh	/^func_warning ()$/;"	f
+func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
+func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
+func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
+func_xform	configure	/^func_xform ()\\$/;"	f
+func_xform	ltmain.sh	/^func_xform ()$/;"	f
+fuzz	include/linux/input.h	/^	__s32 fuzz;$/;"	m	struct:input_absinfo
+gesture	src/evdev-mt-touchpad.h	/^	} gesture;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon22
+gesture	src/evdev-mt-touchpad.h	/^	} gesture;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon19
+gesture_notify	.pc/touch-point-orientation-size.patch/src/libinput.c	/^gesture_notify(struct libinput_device *device,$/;"	f	file:
+gesture_notify	src/libinput.c	/^gesture_notify(struct libinput_device *device,$/;"	f	file:
+gesture_notify_pinch	.pc/touch-point-orientation-size.patch/src/libinput.c	/^gesture_notify_pinch(struct libinput_device *device,$/;"	f
+gesture_notify_pinch	src/libinput.c	/^gesture_notify_pinch(struct libinput_device *device,$/;"	f
+gesture_notify_pinch_end	.pc/touch-point-orientation-size.patch/src/libinput.c	/^gesture_notify_pinch_end(struct libinput_device *device,$/;"	f
+gesture_notify_pinch_end	src/libinput.c	/^gesture_notify_pinch_end(struct libinput_device *device,$/;"	f
+gesture_notify_swipe	.pc/touch-point-orientation-size.patch/src/libinput.c	/^gesture_notify_swipe(struct libinput_device *device,$/;"	f
+gesture_notify_swipe	src/libinput.c	/^gesture_notify_swipe(struct libinput_device *device,$/;"	f
+gesture_notify_swipe_end	.pc/touch-point-orientation-size.patch/src/libinput.c	/^gesture_notify_swipe_end(struct libinput_device *device,$/;"	f
+gesture_notify_swipe_end	src/libinput.c	/^gesture_notify_swipe_end(struct libinput_device *device,$/;"	f
+gesture_state_to_str	src/evdev-mt-touchpad-gestures.c	/^gesture_state_to_str(enum tp_gesture_2fg_state state)$/;"	f	file:
+get	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_middle_emulation_state (*get)($/;"	m	struct:libinput_device_config_middle_emulation	typeref:enum:libinput_device_config_middle_emulation::get
+get	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*get)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_left_handed
+get	src/libinput-private.h	/^	enum libinput_config_middle_emulation_state (*get)($/;"	m	struct:libinput_device_config_middle_emulation	typeref:enum:libinput_device_config_middle_emulation::get
+get	src/libinput-private.h	/^	int (*get)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_left_handed
+get_axis_default	test/litest-device-bcm5974.c	/^get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)$/;"	f	file:
+get_axis_default	test/litest-device-elantech-touchpad.c	/^get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)$/;"	f	file:
+get_axis_default	test/litest-device-synaptics-t440.c	/^get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)$/;"	f	file:
+get_axis_default	test/litest-device-synaptics-x1-carbon-3rd.c	/^get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)$/;"	f	file:
+get_axis_default	test/litest-device-synaptics.c	/^get_axis_default(struct litest_device *d, unsigned int evcode, int32_t *value)$/;"	f	file:
+get_axis_default	test/litest-int.h	/^	int (*get_axis_default)(struct litest_device *d, unsigned int code, int32_t *value);$/;"	m	struct:litest_device_interface
+get_button	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t (*get_button)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method
+get_button	src/libinput-private.h	/^	uint32_t (*get_button)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method
+get_default	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_middle_emulation_state (*get_default)($/;"	m	struct:libinput_device_config_middle_emulation	typeref:enum:libinput_device_config_middle_emulation::get_default
+get_default	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_tap_state (*get_default)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_default
+get_default	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*get_default)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_left_handed
+get_default	src/libinput-private.h	/^	enum libinput_config_middle_emulation_state (*get_default)($/;"	m	struct:libinput_device_config_middle_emulation	typeref:enum:libinput_device_config_middle_emulation::get_default
+get_default	src/libinput-private.h	/^	enum libinput_config_tap_state (*get_default)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_default
+get_default	src/libinput-private.h	/^	int (*get_default)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_left_handed
+get_default_button	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t (*get_default_button)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method
+get_default_button	src/libinput-private.h	/^	uint32_t (*get_default_button)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method
+get_default_draglock_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_drag_lock_state (*get_default_draglock_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_default_draglock_enabled
+get_default_draglock_enabled	src/libinput-private.h	/^	enum libinput_config_drag_lock_state (*get_default_draglock_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_default_draglock_enabled
+get_default_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_dwt_state (*get_default_enabled)($/;"	m	struct:libinput_device_config_dwt	typeref:enum:libinput_device_config_dwt::get_default_enabled
+get_default_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*get_default_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_natural_scroll
+get_default_enabled	src/libinput-private.h	/^	enum libinput_config_dwt_state (*get_default_enabled)($/;"	m	struct:libinput_device_config_dwt	typeref:enum:libinput_device_config_dwt::get_default_enabled
+get_default_enabled	src/libinput-private.h	/^	int (*get_default_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_natural_scroll
+get_default_matrix	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*get_default_matrix)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_calibration
+get_default_matrix	src/libinput-private.h	/^	int (*get_default_matrix)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_calibration
+get_default_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_click_method (*get_default_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_click_method	typeref:enum:libinput_device_config_click_method::get_default_method
+get_default_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_scroll_method (*get_default_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::get_default_method
+get_default_method	src/libinput-private.h	/^	enum libinput_config_click_method (*get_default_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_click_method	typeref:enum:libinput_device_config_click_method::get_default_method
+get_default_method	src/libinput-private.h	/^	enum libinput_config_scroll_method (*get_default_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::get_default_method
+get_default_mode	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_send_events_mode (*get_default_mode)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_send_events	typeref:enum:libinput_device_config_send_events::get_default_mode
+get_default_mode	src/libinput-private.h	/^	enum libinput_config_send_events_mode (*get_default_mode)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_send_events	typeref:enum:libinput_device_config_send_events::get_default_mode
+get_default_speed	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	double (*get_default_speed)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_accel
+get_default_speed	src/libinput-private.h	/^	double (*get_default_speed)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_accel
+get_draglock_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_drag_lock_state (*get_draglock_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_draglock_enabled
+get_draglock_enabled	src/libinput-private.h	/^	enum libinput_config_drag_lock_state (*get_draglock_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_draglock_enabled
+get_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_dwt_state (*get_enabled)($/;"	m	struct:libinput_device_config_dwt	typeref:enum:libinput_device_config_dwt::get_enabled
+get_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_tap_state (*get_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_enabled
+get_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*get_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_natural_scroll
+get_enabled	src/libinput-private.h	/^	enum libinput_config_dwt_state (*get_enabled)($/;"	m	struct:libinput_device_config_dwt	typeref:enum:libinput_device_config_dwt::get_enabled
+get_enabled	src/libinput-private.h	/^	enum libinput_config_tap_state (*get_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::get_enabled
+get_enabled	src/libinput-private.h	/^	int (*get_enabled)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_natural_scroll
+get_key_down_count	.pc/touch-point-orientation-size.patch/src/evdev.c	/^get_key_down_count(struct evdev_device *device, int code)$/;"	f	file:
+get_key_down_count	src/evdev.c	/^get_key_down_count(struct evdev_device *device, int code)$/;"	f	file:
+get_key_type	.pc/touch-point-orientation-size.patch/src/evdev.c	/^get_key_type(uint16_t code)$/;"	f	file:
+get_key_type	src/evdev.c	/^get_key_type(uint16_t code)$/;"	f	file:
+get_matrix	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*get_matrix)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_calibration
+get_matrix	src/libinput-private.h	/^	int (*get_matrix)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_calibration
+get_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_click_method (*get_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_click_method	typeref:enum:libinput_device_config_click_method::get_method
+get_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_scroll_method (*get_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::get_method
+get_method	src/libinput-private.h	/^	enum libinput_config_click_method (*get_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_click_method	typeref:enum:libinput_device_config_click_method::get_method
+get_method	src/libinput-private.h	/^	enum libinput_config_scroll_method (*get_method)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::get_method
+get_methods	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t (*get_methods)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_click_method
+get_methods	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t (*get_methods)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method
+get_methods	src/libinput-private.h	/^	uint32_t (*get_methods)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_click_method
+get_methods	src/libinput-private.h	/^	uint32_t (*get_methods)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_scroll_method
+get_mode	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_send_events_mode (*get_mode)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_send_events	typeref:enum:libinput_device_config_send_events::get_mode
+get_mode	src/libinput-private.h	/^	enum libinput_config_send_events_mode (*get_mode)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_send_events	typeref:enum:libinput_device_config_send_events::get_mode
+get_modes	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t (*get_modes)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_send_events
+get_modes	src/libinput-private.h	/^	uint32_t (*get_modes)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_send_events
+get_speed	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	double (*get_speed)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_accel
+get_speed	src/libinput-private.h	/^	double (*get_speed)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_accel
+get_suite	.pc/fix-litest.patch/test/litest.c	/^get_suite(const char *name)$/;"	f	file:
+get_suite	test/litest.c	/^get_suite(const char *name)$/;"	f	file:
+give_advice	missing	/^give_advice ()$/;"	f
+grab	tools/shared.h	/^	int grab; \/* EVIOCGRAB *\/$/;"	m	struct:tools_options
+group	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_group *group;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::libinput_device_group
+group	src/libinput-private.h	/^	struct libinput_device_group *group;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::libinput_device_group
+handle_and_print_events	tools/event-debug.c	/^handle_and_print_events(struct libinput *li)$/;"	f	file:
+handle_event_absmotion	tools/event-gui.c	/^handle_event_absmotion(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_axis	tools/event-gui.c	/^handle_event_axis(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_button	tools/event-gui.c	/^handle_event_button(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_device_notify	tools/event-gui.c	/^handle_event_device_notify(struct libinput_event *ev)$/;"	f	file:
+handle_event_keyboard	tools/event-gui.c	/^handle_event_keyboard(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_libinput	tools/event-gui.c	/^handle_event_libinput(GIOChannel *source, GIOCondition condition, gpointer data)$/;"	f	file:
+handle_event_motion	tools/event-gui.c	/^handle_event_motion(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_pinch	tools/event-gui.c	/^handle_event_pinch(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_swipe	tools/event-gui.c	/^handle_event_swipe(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_event_touch	tools/event-gui.c	/^handle_event_touch(struct libinput_event *ev, struct window *w)$/;"	f	file:
+handle_touchpad	udev/libinput-model-quirks.c	/^handle_touchpad(struct udev_device *device)$/;"	f	file:
+handle_touchpad_alps	udev/libinput-model-quirks.c	/^handle_touchpad_alps(struct udev_device *device)$/;"	f	file:
+handle_touchpad_synaptics	udev/libinput-model-quirks.c	/^handle_touchpad_synaptics(struct udev_device *device)$/;"	f	file:
+has	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*has)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_left_handed
+has	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*has)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_natural_scroll
+has	src/libinput-private.h	/^	int (*has)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_left_handed
+has	src/libinput-private.h	/^	int (*has)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_natural_scroll
+has_disable_while_typing	test/touchpad.c	/^has_disable_while_typing(struct litest_device *device)$/;"	f	file:
+has_ended	src/evdev-mt-touchpad.h	/^	bool has_ended;				\/* TRACKING_ID == -1 *\/$/;"	m	struct:tp_touch
+has_matrix	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*has_matrix)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_calibration
+has_matrix	src/libinput-private.h	/^	int (*has_matrix)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_calibration
+has_mt	src/evdev-mt-touchpad.h	/^	bool has_mt;$/;"	m	struct:tp_dispatch
+has_thumb_detect	test/touchpad.c	/^has_thumb_detect(struct litest_device *dev)$/;"	f	file:
+has_topbuttons	src/evdev-mt-touchpad.h	/^		bool has_topbuttons;$/;"	m	struct:tp_dispatch::__anon23
+height	tools/event-gui.c	/^	int width, height; \/* of window *\/$/;"	m	struct:window	file:
+history	src/evdev-mt-touchpad.h	/^	} history;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon13
+hover_continue	test/touchpad.c	/^hover_continue(struct litest_device *dev, unsigned int slot,$/;"	f	file:
+hover_start	test/touchpad.c	/^hover_start(struct litest_device *dev, unsigned int slot,$/;"	f	file:
+hw_is_key_down	.pc/touch-point-orientation-size.patch/src/evdev.c	/^hw_is_key_down(struct evdev_device *device, int code)$/;"	f	file:
+hw_is_key_down	src/evdev.c	/^hw_is_key_down(struct evdev_device *device, int code)$/;"	f	file:
+hw_key_mask	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	unsigned long hw_key_mask[NLONGS(KEY_CNT)];$/;"	m	struct:evdev_device
+hw_key_mask	src/evdev.h	/^	unsigned long hw_key_mask[NLONGS(KEY_CNT)];$/;"	m	struct:evdev_device
+hw_set_key_down	.pc/touch-point-orientation-size.patch/src/evdev.c	/^hw_set_key_down(struct evdev_device *device, int code, int pressed)$/;"	f	file:
+hw_set_key_down	src/evdev.c	/^hw_set_key_down(struct evdev_device *device, int code, int pressed)$/;"	f	file:
+hx	tools/event-gui.c	/^	double hx, hy;$/;"	m	struct:window	file:
+hy	tools/event-gui.c	/^	double hx, hy;$/;"	m	struct:window	file:
+hysteresis_center	src/evdev-mt-touchpad.h	/^	struct device_coords hysteresis_center;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::device_coords
+hysteresis_margin	src/evdev-mt-touchpad.h	/^	struct device_coords hysteresis_margin;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::device_coords
+id	include/linux/input.h	/^	__s16 id;$/;"	m	struct:ff_effect
+id	test/litest-int.h	/^       const struct input_id *id;$/;"	m	struct:litest_test_device	typeref:struct:litest_test_device::input_id
+identifier	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	char *identifier; \/* unique identifier or NULL for singletons *\/$/;"	m	struct:libinput_device_group
+identifier	src/libinput-private.h	/^	char *identifier; \/* unique identifier or NULL for singletons *\/$/;"	m	struct:libinput_device_group
+ignore_litest_test_suite_device	.pc/touch-point-orientation-size.patch/src/libinput.c	/^ignore_litest_test_suite_device(struct udev_device *device)$/;"	f
+ignore_litest_test_suite_device	src/libinput.c	/^ignore_litest_test_suite_device(struct udev_device *device)$/;"	f
+in_debugger	.pc/fix-litest.patch/test/litest.c	/^static int in_debugger = -1;$/;"	v	file:
+in_debugger	test/litest.c	/^static int in_debugger = -1;$/;"	v	file:
+incline	src/filter.c	/^	double incline;		\/* incline of the function *\/$/;"	m	struct:pointer_accelerator	file:
+index	include/linux/input.h	/^	__u16 index;$/;"	m	struct:input_keymap_entry
+index	src/evdev-mt-touchpad.h	/^		unsigned int index;$/;"	m	struct:tp_touch::__anon13
+init_event_base	.pc/touch-point-orientation-size.patch/src/libinput.c	/^init_event_base(struct libinput_event *event,$/;"	f	file:
+init_event_base	src/libinput.c	/^init_event_base(struct libinput_event *event,$/;"	f	file:
+initial	src/evdev-mt-touchpad.h	/^		struct device_coords initial;$/;"	m	struct:tp_touch::__anon16	typeref:struct:tp_touch::__anon16::device_coords
+initial	src/evdev-mt-touchpad.h	/^		struct device_coords initial;$/;"	m	struct:tp_touch::__anon17	typeref:struct:tp_touch::__anon17::device_coords
+initial	src/evdev-mt-touchpad.h	/^		struct device_coords initial;$/;"	m	struct:tp_touch::__anon19	typeref:struct:tp_touch::__anon19::device_coords
+initial	src/evdev-mt-touchpad.h	/^		struct device_coords initial;$/;"	m	struct:tp_touch::__anon20	typeref:struct:tp_touch::__anon20::device_coords
+initial_distance	src/evdev-mt-touchpad.h	/^		double initial_distance;$/;"	m	struct:tp_dispatch::__anon22
+initial_time	src/evdev-mt-touchpad.h	/^		uint64_t initial_time;$/;"	m	struct:tp_dispatch::__anon22
+input_absinfo	include/linux/input.h	/^struct input_absinfo {$/;"	s
+input_event	include/linux/input.h	/^struct input_event {$/;"	s
+input_id	include/linux/input.h	/^struct input_id {$/;"	s
+input_id	test/litest-device-alps-dualpoint.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-alps-semi-mt.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-atmel-hover.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-bcm5974.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-elantech-touchpad.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-generic-singletouch.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-keyboard-razer-blackwidow.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-keyboard.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-logitech-trackball.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-magic-trackpad.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-mouse-low-dpi.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-mouse-roccat.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-mouse.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-ms-surface-cover.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-nexus4-touch-screen.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-protocol-a-touch-screen.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-qemu-usb-tablet.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-synaptics-hover.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-synaptics-st.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-synaptics-t440.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-synaptics-x1-carbon-3rd.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-synaptics.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-touch-screen.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-trackpoint.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-vmware-virtual-usb-mouse.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-wacom-intuos-finger.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-wacom-touch.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-wheel-only.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_id	test/litest-device-xen-virtual-pointer.c	/^static struct input_id input_id = {$/;"	v	typeref:struct:input_id	file:
+input_keymap_entry	include/linux/input.h	/^struct input_keymap_entry {$/;"	s
+interface	.pc/fix-litest.patch/test/litest.c	/^struct libinput_interface interface = {$/;"	v	typeref:struct:libinput_interface
+interface	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct evdev_dispatch_interface *interface;$/;"	m	struct:evdev_dispatch	typeref:struct:evdev_dispatch::evdev_dispatch_interface
+interface	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	const struct libinput_interface *interface;$/;"	m	struct:libinput	typeref:struct:libinput::libinput_interface
+interface	src/evdev.h	/^	struct evdev_dispatch_interface *interface;$/;"	m	struct:evdev_dispatch	typeref:struct:evdev_dispatch::evdev_dispatch_interface
+interface	src/filter-private.h	/^	struct motion_filter_interface *interface;$/;"	m	struct:motion_filter	typeref:struct:motion_filter::motion_filter_interface
+interface	src/libinput-private.h	/^	const struct libinput_interface *interface;$/;"	m	struct:libinput	typeref:struct:libinput::libinput_interface
+interface	test/litest-device-alps-dualpoint.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-alps-semi-mt.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-atmel-hover.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-bcm5974.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-elantech-touchpad.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-generic-singletouch.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-magic-trackpad.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-ms-surface-cover.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-nexus4-touch-screen.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-protocol-a-touch-screen.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-qemu-usb-tablet.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-synaptics-hover.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-synaptics-st.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-synaptics-t440.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-synaptics-x1-carbon-3rd.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-synaptics.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-touch-screen.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-vmware-virtual-usb-mouse.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-wacom-intuos-finger.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-wacom-touch.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-device-xen-virtual-pointer.c	/^static struct litest_device_interface interface = {$/;"	v	typeref:struct:litest_device_interface	file:
+interface	test/litest-int.h	/^       struct litest_device_interface *interface;$/;"	m	struct:litest_test_device	typeref:struct:litest_test_device::litest_device_interface
+interface	test/litest.c	/^struct libinput_interface interface = {$/;"	v	typeref:struct:libinput_interface
+interface	test/litest.h	/^	struct litest_device_interface *interface;$/;"	m	struct:litest_device	typeref:struct:litest_device::litest_device_interface
+interface	tools/shared.c	/^static const struct libinput_interface interface = {$/;"	v	typeref:struct:libinput_interface	file:
+interface_backend	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	const struct libinput_interface_backend *interface_backend;$/;"	m	struct:libinput	typeref:struct:libinput::libinput_interface_backend
+interface_backend	src/libinput-private.h	/^	const struct libinput_interface_backend *interface_backend;$/;"	m	struct:libinput	typeref:struct:libinput::libinput_interface_backend
+interface_backend	src/path.c	/^static const struct libinput_interface_backend interface_backend = {$/;"	v	typeref:struct:libinput_interface_backend	file:
+interface_backend	src/udev-seat.c	/^static const struct libinput_interface_backend interface_backend = {$/;"	v	typeref:struct:libinput_interface_backend	file:
+interval	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	uint64_t interval;$/;"	m	struct:ratelimit
+interval	include/linux/input.h	/^	__u16 interval;$/;"	m	struct:ff_trigger
+interval	src/libinput-util.h	/^	uint64_t interval;$/;"	m	struct:ratelimit
+is_available	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*is_available)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_dwt
+is_available	src/libinput-private.h	/^	int (*is_available)(struct libinput_device *device);$/;"	m	struct:libinput_device_config_dwt
+is_clickpad	src/evdev-mt-touchpad.h	/^		bool is_clickpad;		\/* true for clickpads *\/$/;"	m	struct:tp_dispatch::__anon23
+is_debugger_attached	.pc/fix-litest.patch/test/litest.c	/^is_debugger_attached(void)$/;"	f	file:
+is_debugger_attached	test/litest.c	/^is_debugger_attached(void)$/;"	f	file:
+is_inside_bottom_button_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_bottom_button_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_inside_bottom_left_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_bottom_left_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_inside_bottom_right_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_bottom_right_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_inside_top_button_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_top_button_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_inside_top_left_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_top_left_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_inside_top_middle_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_top_middle_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_inside_top_right_area	src/evdev-mt-touchpad-buttons.c	/^is_inside_top_right_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+is_mt	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	int is_mt;$/;"	m	struct:evdev_device
+is_mt	src/evdev.h	/^	int is_mt;$/;"	m	struct:evdev_device
+is_pinned	src/evdev-mt-touchpad.h	/^		bool is_pinned;$/;"	m	struct:tp_touch::__anon14
+is_thumb	src/evdev-mt-touchpad.h	/^		bool is_thumb;$/;"	m	struct:tp_touch::__anon16
+key	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint32_t key;$/;"	m	struct:libinput_event_keyboard	file:
+key	src/libinput.c	/^	uint32_t key;$/;"	m	struct:libinput_event_keyboard	file:
+key_count	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	uint8_t key_count[KEY_CNT];$/;"	m	struct:evdev_device
+key_count	src/evdev.h	/^	uint8_t key_count[KEY_CNT];$/;"	m	struct:evdev_device
+keyboard	src/evdev-mt-touchpad.h	/^		struct evdev_device *keyboard;$/;"	m	struct:tp_dispatch::__anon31	typeref:struct:tp_dispatch::__anon31::evdev_device
+keyboard_active	src/evdev-mt-touchpad.h	/^		bool keyboard_active;$/;"	m	struct:tp_dispatch::__anon31
+keyboard_last_press_time	src/evdev-mt-touchpad.h	/^		uint64_t keyboard_last_press_time;$/;"	m	struct:tp_dispatch::__anon31
+keyboard_listener	src/evdev-mt-touchpad.h	/^		struct libinput_event_listener keyboard_listener;$/;"	m	struct:tp_dispatch::__anon31	typeref:struct:tp_dispatch::__anon31::libinput_event_listener
+keyboard_notify_key	.pc/touch-point-orientation-size.patch/src/libinput.c	/^keyboard_notify_key(struct libinput_device *device,$/;"	f
+keyboard_notify_key	src/libinput.c	/^keyboard_notify_key(struct libinput_device *device,$/;"	f
+keyboard_timer	src/evdev-mt-touchpad.h	/^		struct libinput_timer keyboard_timer;$/;"	m	struct:tp_dispatch::__anon31	typeref:struct:tp_dispatch::__anon31::libinput_timer
+keycode	include/linux/input.h	/^	__u32 keycode;$/;"	m	struct:input_keymap_entry
+l	tools/event-gui.c	/^	int l, m, r;$/;"	m	struct:window	file:
+last_velocity	src/filter.c	/^	double last_velocity;	\/* units\/us *\/$/;"	m	struct:pointer_accelerator	file:
+left_coeff	include/linux/input.h	/^	__s16 left_coeff;$/;"	m	struct:ff_condition_effect
+left_edge	src/evdev-mt-touchpad.h	/^		int32_t left_edge;		\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon29
+left_handed	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} left_handed;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon8
+left_handed	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_left_handed *left_handed;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_left_handed
+left_handed	src/evdev.h	/^	} left_handed;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon38
+left_handed	src/libinput-private.h	/^	struct libinput_device_config_left_handed *left_handed;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_left_handed
+left_handed	tools/shared.h	/^	int left_handed;$/;"	m	struct:tools_options
+left_handed_default	tools/libinput-list-devices.c	/^left_handed_default(struct libinput_device *device)$/;"	f	file:
+left_saturation	include/linux/input.h	/^	__u16 left_saturation;$/;"	m	struct:ff_condition_effect
+leftbutton_right_edge	src/evdev-mt-touchpad.h	/^			int32_t leftbutton_right_edge; \/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon23::__anon26
+len	include/linux/input.h	/^	__u8  len;$/;"	m	struct:input_keymap_entry
+length	include/linux/input.h	/^	__u16 length;$/;"	m	struct:ff_replay
+level	include/linux/input.h	/^	__s16 level;$/;"	m	struct:ff_constant_effect
+libinput	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput *libinput;$/;"	m	struct:libinput_seat	typeref:struct:libinput_seat::libinput
+libinput	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput {$/;"	s
+libinput	src/libinput-private.h	/^	struct libinput *libinput;$/;"	m	struct:libinput_seat	typeref:struct:libinput_seat::libinput
+libinput	src/libinput-private.h	/^struct libinput {$/;"	s
+libinput	src/timer.h	/^	struct libinput *libinput;$/;"	m	struct:libinput_timer	typeref:struct:libinput_timer::libinput
+libinput	test/litest.h	/^	struct libinput *libinput;$/;"	m	struct:litest_device	typeref:struct:litest_device::libinput
+libinput_add_fd	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_add_fd(struct libinput *libinput,$/;"	f
+libinput_add_fd	src/libinput.c	/^libinput_add_fd(struct libinput *libinput,$/;"	f
+libinput_button_state	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_button_state {$/;"	g
+libinput_button_state	src/libinput.h	/^enum libinput_button_state {$/;"	g
+libinput_config_click_method	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_click_method {$/;"	g
+libinput_config_click_method	src/libinput.h	/^enum libinput_config_click_method {$/;"	g
+libinput_config_drag_lock_state	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_drag_lock_state {$/;"	g
+libinput_config_drag_lock_state	src/libinput.h	/^enum libinput_config_drag_lock_state {$/;"	g
+libinput_config_dwt_state	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_dwt_state {$/;"	g
+libinput_config_dwt_state	src/libinput.h	/^enum libinput_config_dwt_state {$/;"	g
+libinput_config_middle_emulation_state	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_middle_emulation_state {$/;"	g
+libinput_config_middle_emulation_state	src/libinput.h	/^enum libinput_config_middle_emulation_state {$/;"	g
+libinput_config_scroll_method	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_scroll_method {$/;"	g
+libinput_config_scroll_method	src/libinput.h	/^enum libinput_config_scroll_method {$/;"	g
+libinput_config_send_events_mode	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_send_events_mode {$/;"	g
+libinput_config_send_events_mode	src/libinput.h	/^enum libinput_config_send_events_mode {$/;"	g
+libinput_config_status	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_status {$/;"	g
+libinput_config_status	src/libinput.h	/^enum libinput_config_status {$/;"	g
+libinput_config_status_to_str	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_config_status_to_str(enum libinput_config_status status)$/;"	f
+libinput_config_status_to_str	src/libinput.c	/^libinput_config_status_to_str(enum libinput_config_status status)$/;"	f
+libinput_config_tap_state	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_config_tap_state {$/;"	g
+libinput_config_tap_state	src/libinput.h	/^enum libinput_config_tap_state {$/;"	g
+libinput_default_log_func	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_default_log_func(struct libinput *libinput,$/;"	f	file:
+libinput_default_log_func	src/libinput.c	/^libinput_default_log_func(struct libinput *libinput,$/;"	f	file:
+libinput_device	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device {$/;"	s
+libinput_device	src/libinput-private.h	/^struct libinput_device {$/;"	s
+libinput_device	test/litest.h	/^	struct libinput_device *libinput_device;$/;"	m	struct:litest_device	typeref:struct:litest_device::libinput_device
+libinput_device_add_event_listener	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_add_event_listener(struct libinput_device *device,$/;"	f
+libinput_device_add_event_listener	src/libinput.c	/^libinput_device_add_event_listener(struct libinput_device *device,$/;"	f
+libinput_device_capability	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_device_capability {$/;"	g
+libinput_device_capability	src/libinput.h	/^enum libinput_device_capability {$/;"	g
+libinput_device_config	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config {$/;"	s
+libinput_device_config	src/libinput-private.h	/^struct libinput_device_config {$/;"	s
+libinput_device_config_accel	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_accel {$/;"	s
+libinput_device_config_accel	src/libinput-private.h	/^struct libinput_device_config_accel {$/;"	s
+libinput_device_config_accel_get_default_speed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_accel_get_default_speed(struct libinput_device *device)$/;"	f
+libinput_device_config_accel_get_default_speed	src/libinput.c	/^libinput_device_config_accel_get_default_speed(struct libinput_device *device)$/;"	f
+libinput_device_config_accel_get_speed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_accel_get_speed(struct libinput_device *device)$/;"	f
+libinput_device_config_accel_get_speed	src/libinput.c	/^libinput_device_config_accel_get_speed(struct libinput_device *device)$/;"	f
+libinput_device_config_accel_is_available	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_accel_is_available(struct libinput_device *device)$/;"	f
+libinput_device_config_accel_is_available	src/libinput.c	/^libinput_device_config_accel_is_available(struct libinput_device *device)$/;"	f
+libinput_device_config_accel_set_speed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_accel_set_speed(struct libinput_device *device,$/;"	f
+libinput_device_config_accel_set_speed	src/libinput.c	/^libinput_device_config_accel_set_speed(struct libinput_device *device,$/;"	f
+libinput_device_config_calibration	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_calibration {$/;"	s
+libinput_device_config_calibration	src/libinput-private.h	/^struct libinput_device_config_calibration {$/;"	s
+libinput_device_config_calibration_get_default_matrix	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_calibration_get_default_matrix(struct libinput_device *device,$/;"	f
+libinput_device_config_calibration_get_default_matrix	src/libinput.c	/^libinput_device_config_calibration_get_default_matrix(struct libinput_device *device,$/;"	f
+libinput_device_config_calibration_get_matrix	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_calibration_get_matrix(struct libinput_device *device,$/;"	f
+libinput_device_config_calibration_get_matrix	src/libinput.c	/^libinput_device_config_calibration_get_matrix(struct libinput_device *device,$/;"	f
+libinput_device_config_calibration_has_matrix	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_calibration_has_matrix(struct libinput_device *device)$/;"	f
+libinput_device_config_calibration_has_matrix	src/libinput.c	/^libinput_device_config_calibration_has_matrix(struct libinput_device *device)$/;"	f
+libinput_device_config_calibration_set_matrix	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_calibration_set_matrix(struct libinput_device *device,$/;"	f
+libinput_device_config_calibration_set_matrix	src/libinput.c	/^libinput_device_config_calibration_set_matrix(struct libinput_device *device,$/;"	f
+libinput_device_config_click_get_default_method	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_click_get_default_method(struct libinput_device *device)$/;"	f
+libinput_device_config_click_get_default_method	src/libinput.c	/^libinput_device_config_click_get_default_method(struct libinput_device *device)$/;"	f
+libinput_device_config_click_get_method	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_click_get_method(struct libinput_device *device)$/;"	f
+libinput_device_config_click_get_method	src/libinput.c	/^libinput_device_config_click_get_method(struct libinput_device *device)$/;"	f
+libinput_device_config_click_get_methods	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_click_get_methods(struct libinput_device *device)$/;"	f
+libinput_device_config_click_get_methods	src/libinput.c	/^libinput_device_config_click_get_methods(struct libinput_device *device)$/;"	f
+libinput_device_config_click_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_click_method {$/;"	s
+libinput_device_config_click_method	src/libinput-private.h	/^struct libinput_device_config_click_method {$/;"	s
+libinput_device_config_click_set_method	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_click_set_method(struct libinput_device *device,$/;"	f
+libinput_device_config_click_set_method	src/libinput.c	/^libinput_device_config_click_set_method(struct libinput_device *device,$/;"	f
+libinput_device_config_dwt	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_dwt {$/;"	s
+libinput_device_config_dwt	src/libinput-private.h	/^struct libinput_device_config_dwt {$/;"	s
+libinput_device_config_dwt_get_default_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_dwt_get_default_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_dwt_get_default_enabled	src/libinput.c	/^libinput_device_config_dwt_get_default_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_dwt_get_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_dwt_get_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_dwt_get_enabled	src/libinput.c	/^libinput_device_config_dwt_get_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_dwt_is_available	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_dwt_is_available(struct libinput_device *device)$/;"	f
+libinput_device_config_dwt_is_available	src/libinput.c	/^libinput_device_config_dwt_is_available(struct libinput_device *device)$/;"	f
+libinput_device_config_dwt_set_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_dwt_set_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_dwt_set_enabled	src/libinput.c	/^libinput_device_config_dwt_set_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_left_handed	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_left_handed {$/;"	s
+libinput_device_config_left_handed	src/libinput-private.h	/^struct libinput_device_config_left_handed {$/;"	s
+libinput_device_config_left_handed_get	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_left_handed_get(struct libinput_device *device)$/;"	f
+libinput_device_config_left_handed_get	src/libinput.c	/^libinput_device_config_left_handed_get(struct libinput_device *device)$/;"	f
+libinput_device_config_left_handed_get_default	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_left_handed_get_default(struct libinput_device *device)$/;"	f
+libinput_device_config_left_handed_get_default	src/libinput.c	/^libinput_device_config_left_handed_get_default(struct libinput_device *device)$/;"	f
+libinput_device_config_left_handed_is_available	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_left_handed_is_available(struct libinput_device *device)$/;"	f
+libinput_device_config_left_handed_is_available	src/libinput.c	/^libinput_device_config_left_handed_is_available(struct libinput_device *device)$/;"	f
+libinput_device_config_left_handed_set	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_left_handed_set(struct libinput_device *device,$/;"	f
+libinput_device_config_left_handed_set	src/libinput.c	/^libinput_device_config_left_handed_set(struct libinput_device *device,$/;"	f
+libinput_device_config_middle_emulation	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_middle_emulation {$/;"	s
+libinput_device_config_middle_emulation	src/libinput-private.h	/^struct libinput_device_config_middle_emulation {$/;"	s
+libinput_device_config_middle_emulation_get_default_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_middle_emulation_get_default_enabled($/;"	f
+libinput_device_config_middle_emulation_get_default_enabled	src/libinput.c	/^libinput_device_config_middle_emulation_get_default_enabled($/;"	f
+libinput_device_config_middle_emulation_get_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_middle_emulation_get_enabled($/;"	f
+libinput_device_config_middle_emulation_get_enabled	src/libinput.c	/^libinput_device_config_middle_emulation_get_enabled($/;"	f
+libinput_device_config_middle_emulation_is_available	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_middle_emulation_is_available($/;"	f
+libinput_device_config_middle_emulation_is_available	src/libinput.c	/^libinput_device_config_middle_emulation_is_available($/;"	f
+libinput_device_config_middle_emulation_set_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_middle_emulation_set_enabled($/;"	f
+libinput_device_config_middle_emulation_set_enabled	src/libinput.c	/^libinput_device_config_middle_emulation_set_enabled($/;"	f
+libinput_device_config_natural_scroll	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_natural_scroll {$/;"	s
+libinput_device_config_natural_scroll	src/libinput-private.h	/^struct libinput_device_config_natural_scroll {$/;"	s
+libinput_device_config_scroll_get_button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_button(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_button	src/libinput.c	/^libinput_device_config_scroll_get_button(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_default_button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_default_button(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_default_button	src/libinput.c	/^libinput_device_config_scroll_get_default_button(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_default_method	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_default_method(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_default_method	src/libinput.c	/^libinput_device_config_scroll_get_default_method(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_default_natural_scroll_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_default_natural_scroll_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_default_natural_scroll_enabled	src/libinput.c	/^libinput_device_config_scroll_get_default_natural_scroll_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_method	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_method(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_method	src/libinput.c	/^libinput_device_config_scroll_get_method(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_methods	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_methods(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_methods	src/libinput.c	/^libinput_device_config_scroll_get_methods(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_natural_scroll_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_get_natural_scroll_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_get_natural_scroll_enabled	src/libinput.c	/^libinput_device_config_scroll_get_natural_scroll_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_has_natural_scroll	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_has_natural_scroll(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_has_natural_scroll	src/libinput.c	/^libinput_device_config_scroll_has_natural_scroll(struct libinput_device *device)$/;"	f
+libinput_device_config_scroll_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_scroll_method {$/;"	s
+libinput_device_config_scroll_method	src/libinput-private.h	/^struct libinput_device_config_scroll_method {$/;"	s
+libinput_device_config_scroll_set_button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_set_button(struct libinput_device *device,$/;"	f
+libinput_device_config_scroll_set_button	src/libinput.c	/^libinput_device_config_scroll_set_button(struct libinput_device *device,$/;"	f
+libinput_device_config_scroll_set_method	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_set_method(struct libinput_device *device,$/;"	f
+libinput_device_config_scroll_set_method	src/libinput.c	/^libinput_device_config_scroll_set_method(struct libinput_device *device,$/;"	f
+libinput_device_config_scroll_set_natural_scroll_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_scroll_set_natural_scroll_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_scroll_set_natural_scroll_enabled	src/libinput.c	/^libinput_device_config_scroll_set_natural_scroll_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_send_events	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_send_events {$/;"	s
+libinput_device_config_send_events	src/libinput-private.h	/^struct libinput_device_config_send_events {$/;"	s
+libinput_device_config_send_events_get_default_mode	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_send_events_get_default_mode(struct libinput_device *device)$/;"	f
+libinput_device_config_send_events_get_default_mode	src/libinput.c	/^libinput_device_config_send_events_get_default_mode(struct libinput_device *device)$/;"	f
+libinput_device_config_send_events_get_mode	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_send_events_get_mode(struct libinput_device *device)$/;"	f
+libinput_device_config_send_events_get_mode	src/libinput.c	/^libinput_device_config_send_events_get_mode(struct libinput_device *device)$/;"	f
+libinput_device_config_send_events_get_modes	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_send_events_get_modes(struct libinput_device *device)$/;"	f
+libinput_device_config_send_events_get_modes	src/libinput.c	/^libinput_device_config_send_events_get_modes(struct libinput_device *device)$/;"	f
+libinput_device_config_send_events_set_mode	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_send_events_set_mode(struct libinput_device *device,$/;"	f
+libinput_device_config_send_events_set_mode	src/libinput.c	/^libinput_device_config_send_events_set_mode(struct libinput_device *device,$/;"	f
+libinput_device_config_tap	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_config_tap {$/;"	s
+libinput_device_config_tap	src/libinput-private.h	/^struct libinput_device_config_tap {$/;"	s
+libinput_device_config_tap_get_default_drag_lock_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_get_default_drag_lock_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_default_drag_lock_enabled	src/libinput.c	/^libinput_device_config_tap_get_default_drag_lock_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_default_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_get_default_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_default_enabled	src/libinput.c	/^libinput_device_config_tap_get_default_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_drag_lock_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_get_drag_lock_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_drag_lock_enabled	src/libinput.c	/^libinput_device_config_tap_get_drag_lock_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_get_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_enabled	src/libinput.c	/^libinput_device_config_tap_get_enabled(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_finger_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_get_finger_count(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_get_finger_count	src/libinput.c	/^libinput_device_config_tap_get_finger_count(struct libinput_device *device)$/;"	f
+libinput_device_config_tap_set_drag_lock_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_set_drag_lock_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_tap_set_drag_lock_enabled	src/libinput.c	/^libinput_device_config_tap_set_drag_lock_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_tap_set_enabled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_config_tap_set_enabled(struct libinput_device *device,$/;"	f
+libinput_device_config_tap_set_enabled	src/libinput.c	/^libinput_device_config_tap_set_enabled(struct libinput_device *device,$/;"	f
+libinput_device_destroy	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_destroy(struct libinput_device *device)$/;"	f	file:
+libinput_device_destroy	src/libinput.c	/^libinput_device_destroy(struct libinput_device *device)$/;"	f	file:
+libinput_device_get_context	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_context(struct libinput_device *device)$/;"	f
+libinput_device_get_context	src/libinput.c	/^libinput_device_get_context(struct libinput_device *device)$/;"	f
+libinput_device_get_device_group	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_device_group(struct libinput_device *device)$/;"	f
+libinput_device_get_device_group	src/libinput.c	/^libinput_device_get_device_group(struct libinput_device *device)$/;"	f
+libinput_device_get_id_product	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_id_product(struct libinput_device *device)$/;"	f
+libinput_device_get_id_product	src/libinput.c	/^libinput_device_get_id_product(struct libinput_device *device)$/;"	f
+libinput_device_get_id_vendor	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_id_vendor(struct libinput_device *device)$/;"	f
+libinput_device_get_id_vendor	src/libinput.c	/^libinput_device_get_id_vendor(struct libinput_device *device)$/;"	f
+libinput_device_get_name	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_name(struct libinput_device *device)$/;"	f
+libinput_device_get_name	src/libinput.c	/^libinput_device_get_name(struct libinput_device *device)$/;"	f
+libinput_device_get_output_name	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_output_name(struct libinput_device *device)$/;"	f
+libinput_device_get_output_name	src/libinput.c	/^libinput_device_get_output_name(struct libinput_device *device)$/;"	f
+libinput_device_get_seat	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_seat(struct libinput_device *device)$/;"	f
+libinput_device_get_seat	src/libinput.c	/^libinput_device_get_seat(struct libinput_device *device)$/;"	f
+libinput_device_get_size	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_size(struct libinput_device *device,$/;"	f
+libinput_device_get_size	src/libinput.c	/^libinput_device_get_size(struct libinput_device *device,$/;"	f
+libinput_device_get_sysname	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_sysname(struct libinput_device *device)$/;"	f
+libinput_device_get_sysname	src/libinput.c	/^libinput_device_get_sysname(struct libinput_device *device)$/;"	f
+libinput_device_get_udev_device	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_udev_device(struct libinput_device *device)$/;"	f
+libinput_device_get_udev_device	src/libinput.c	/^libinput_device_get_udev_device(struct libinput_device *device)$/;"	f
+libinput_device_get_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_get_user_data(struct libinput_device *device)$/;"	f
+libinput_device_get_user_data	src/libinput.c	/^libinput_device_get_user_data(struct libinput_device *device)$/;"	f
+libinput_device_group	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_device_group {$/;"	s
+libinput_device_group	src/libinput-private.h	/^struct libinput_device_group {$/;"	s
+libinput_device_group_create	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_group_create(const char *identifier)$/;"	f
+libinput_device_group_create	src/libinput.c	/^libinput_device_group_create(const char *identifier)$/;"	f
+libinput_device_group_destroy	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_group_destroy(struct libinput_device_group *group)$/;"	f	file:
+libinput_device_group_destroy	src/libinput.c	/^libinput_device_group_destroy(struct libinput_device_group *group)$/;"	f	file:
+libinput_device_group_get_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_group_get_user_data(struct libinput_device_group *group)$/;"	f
+libinput_device_group_get_user_data	src/libinput.c	/^libinput_device_group_get_user_data(struct libinput_device_group *group)$/;"	f
+libinput_device_group_ref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_group_ref(struct libinput_device_group *group)$/;"	f
+libinput_device_group_ref	src/libinput.c	/^libinput_device_group_ref(struct libinput_device_group *group)$/;"	f
+libinput_device_group_set_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_group_set_user_data(struct libinput_device_group *group,$/;"	f
+libinput_device_group_set_user_data	src/libinput.c	/^libinput_device_group_set_user_data(struct libinput_device_group *group,$/;"	f
+libinput_device_group_unref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_group_unref(struct libinput_device_group *group)$/;"	f
+libinput_device_group_unref	src/libinput.c	/^libinput_device_group_unref(struct libinput_device_group *group)$/;"	f
+libinput_device_has_capability	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_has_capability(struct libinput_device *device,$/;"	f
+libinput_device_has_capability	src/libinput.c	/^libinput_device_has_capability(struct libinput_device *device,$/;"	f
+libinput_device_init	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_init(struct libinput_device *device,$/;"	f
+libinput_device_init	src/libinput.c	/^libinput_device_init(struct libinput_device *device,$/;"	f
+libinput_device_keyboard_has_key	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_keyboard_has_key(struct libinput_device *device, uint32_t code)$/;"	f
+libinput_device_keyboard_has_key	src/libinput.c	/^libinput_device_keyboard_has_key(struct libinput_device *device, uint32_t code)$/;"	f
+libinput_device_led_update	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_led_update(struct libinput_device *device,$/;"	f
+libinput_device_led_update	src/libinput.c	/^libinput_device_led_update(struct libinput_device *device,$/;"	f
+libinput_device_pointer_has_button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_pointer_has_button(struct libinput_device *device, uint32_t code)$/;"	f
+libinput_device_pointer_has_button	src/libinput.c	/^libinput_device_pointer_has_button(struct libinput_device *device, uint32_t code)$/;"	f
+libinput_device_ref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_ref(struct libinput_device *device)$/;"	f
+libinput_device_ref	src/libinput.c	/^libinput_device_ref(struct libinput_device *device)$/;"	f
+libinput_device_remove_event_listener	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_remove_event_listener(struct libinput_event_listener *listener)$/;"	f
+libinput_device_remove_event_listener	src/libinput.c	/^libinput_device_remove_event_listener(struct libinput_event_listener *listener)$/;"	f
+libinput_device_set_device_group	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_set_device_group(struct libinput_device *device,$/;"	f
+libinput_device_set_device_group	src/libinput.c	/^libinput_device_set_device_group(struct libinput_device *device,$/;"	f
+libinput_device_set_seat_logical_name	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_set_seat_logical_name(struct libinput_device *device,$/;"	f
+libinput_device_set_seat_logical_name	src/libinput.c	/^libinput_device_set_seat_logical_name(struct libinput_device *device,$/;"	f
+libinput_device_set_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_set_user_data(struct libinput_device *device, void *user_data)$/;"	f
+libinput_device_set_user_data	src/libinput.c	/^libinput_device_set_user_data(struct libinput_device *device, void *user_data)$/;"	f
+libinput_device_unref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_device_unref(struct libinput_device *device)$/;"	f
+libinput_device_unref	src/libinput.c	/^libinput_device_unref(struct libinput_device *device)$/;"	f
+libinput_dispatch	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_dispatch(struct libinput *libinput)$/;"	f
+libinput_dispatch	src/libinput.c	/^libinput_dispatch(struct libinput *libinput)$/;"	f
+libinput_drop_destroyed_sources	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_drop_destroyed_sources(struct libinput *libinput)$/;"	f	file:
+libinput_drop_destroyed_sources	src/libinput.c	/^libinput_drop_destroyed_sources(struct libinput *libinput)$/;"	f	file:
+libinput_event	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_event {$/;"	s
+libinput_event	src/libinput-private.h	/^struct libinput_event {$/;"	s
+libinput_event_destroy	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_destroy(struct libinput_event *event)$/;"	f
+libinput_event_destroy	src/libinput.c	/^libinput_event_destroy(struct libinput_event *event)$/;"	f
+libinput_event_device_notify	.pc/touch-point-orientation-size.patch/src/libinput.c	/^struct libinput_event_device_notify {$/;"	s	file:
+libinput_event_device_notify	src/libinput.c	/^struct libinput_event_device_notify {$/;"	s	file:
+libinput_event_device_notify_get_base_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_device_notify_get_base_event(struct libinput_event_device_notify *event)$/;"	f
+libinput_event_device_notify_get_base_event	src/libinput.c	/^libinput_event_device_notify_get_base_event(struct libinput_event_device_notify *event)$/;"	f
+libinput_event_gesture	.pc/touch-point-orientation-size.patch/src/libinput.c	/^struct libinput_event_gesture {$/;"	s	file:
+libinput_event_gesture	src/libinput.c	/^struct libinput_event_gesture {$/;"	s	file:
+libinput_event_gesture_get_angle_delta	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_angle_delta(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_angle_delta	src/libinput.c	/^libinput_event_gesture_get_angle_delta(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_base_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_base_event(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_base_event	src/libinput.c	/^libinput_event_gesture_get_base_event(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_cancelled	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_cancelled(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_cancelled	src/libinput.c	/^libinput_event_gesture_get_cancelled(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_dx	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_dx(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_dx	src/libinput.c	/^libinput_event_gesture_get_dx(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_dx_unaccelerated	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_dx_unaccelerated($/;"	f
+libinput_event_gesture_get_dx_unaccelerated	src/libinput.c	/^libinput_event_gesture_get_dx_unaccelerated($/;"	f
+libinput_event_gesture_get_dy	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_dy(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_dy	src/libinput.c	/^libinput_event_gesture_get_dy(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_dy_unaccelerated	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_dy_unaccelerated($/;"	f
+libinput_event_gesture_get_dy_unaccelerated	src/libinput.c	/^libinput_event_gesture_get_dy_unaccelerated($/;"	f
+libinput_event_gesture_get_finger_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_finger_count(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_finger_count	src/libinput.c	/^libinput_event_gesture_get_finger_count(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_scale	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_scale(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_scale	src/libinput.c	/^libinput_event_gesture_get_scale(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_time(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_time	src/libinput.c	/^libinput_event_gesture_get_time(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_time_usec	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_gesture_get_time_usec(struct libinput_event_gesture *event)$/;"	f
+libinput_event_gesture_get_time_usec	src/libinput.c	/^libinput_event_gesture_get_time_usec(struct libinput_event_gesture *event)$/;"	f
+libinput_event_get_context	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_context(struct libinput_event *event)$/;"	f
+libinput_event_get_context	src/libinput.c	/^libinput_event_get_context(struct libinput_event *event)$/;"	f
+libinput_event_get_device	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_device(struct libinput_event *event)$/;"	f
+libinput_event_get_device	src/libinput.c	/^libinput_event_get_device(struct libinput_event *event)$/;"	f
+libinput_event_get_device_notify_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_device_notify_event(struct libinput_event *event)$/;"	f
+libinput_event_get_device_notify_event	src/libinput.c	/^libinput_event_get_device_notify_event(struct libinput_event *event)$/;"	f
+libinput_event_get_gesture_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_gesture_event(struct libinput_event *event)$/;"	f
+libinput_event_get_gesture_event	src/libinput.c	/^libinput_event_get_gesture_event(struct libinput_event *event)$/;"	f
+libinput_event_get_keyboard_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_keyboard_event(struct libinput_event *event)$/;"	f
+libinput_event_get_keyboard_event	src/libinput.c	/^libinput_event_get_keyboard_event(struct libinput_event *event)$/;"	f
+libinput_event_get_pointer_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_pointer_event(struct libinput_event *event)$/;"	f
+libinput_event_get_pointer_event	src/libinput.c	/^libinput_event_get_pointer_event(struct libinput_event *event)$/;"	f
+libinput_event_get_touch_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_touch_event(struct libinput_event *event)$/;"	f
+libinput_event_get_touch_event	src/libinput.c	/^libinput_event_get_touch_event(struct libinput_event *event)$/;"	f
+libinput_event_get_type	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_get_type(struct libinput_event *event)$/;"	f
+libinput_event_get_type	src/libinput.c	/^libinput_event_get_type(struct libinput_event *event)$/;"	f
+libinput_event_keyboard	.pc/touch-point-orientation-size.patch/src/libinput.c	/^struct libinput_event_keyboard {$/;"	s	file:
+libinput_event_keyboard	src/libinput.c	/^struct libinput_event_keyboard {$/;"	s	file:
+libinput_event_keyboard_get_base_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_keyboard_get_base_event(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_base_event	src/libinput.c	/^libinput_event_keyboard_get_base_event(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_key	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_keyboard_get_key(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_key	src/libinput.c	/^libinput_event_keyboard_get_key(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_key_state	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_keyboard_get_key_state(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_key_state	src/libinput.c	/^libinput_event_keyboard_get_key_state(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_seat_key_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_keyboard_get_seat_key_count($/;"	f
+libinput_event_keyboard_get_seat_key_count	src/libinput.c	/^libinput_event_keyboard_get_seat_key_count($/;"	f
+libinput_event_keyboard_get_time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_keyboard_get_time(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_time	src/libinput.c	/^libinput_event_keyboard_get_time(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_time_usec	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_keyboard_get_time_usec(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_keyboard_get_time_usec	src/libinput.c	/^libinput_event_keyboard_get_time_usec(struct libinput_event_keyboard *event)$/;"	f
+libinput_event_listener	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_event_listener {$/;"	s
+libinput_event_listener	src/libinput-private.h	/^struct libinput_event_listener {$/;"	s
+libinput_event_pointer	.pc/touch-point-orientation-size.patch/src/libinput.c	/^struct libinput_event_pointer {$/;"	s	file:
+libinput_event_pointer	src/libinput.c	/^struct libinput_event_pointer {$/;"	s	file:
+libinput_event_pointer_get_absolute_x	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_absolute_x(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_absolute_x	src/libinput.c	/^libinput_event_pointer_get_absolute_x(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_absolute_x_transformed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_absolute_x_transformed($/;"	f
+libinput_event_pointer_get_absolute_x_transformed	src/libinput.c	/^libinput_event_pointer_get_absolute_x_transformed($/;"	f
+libinput_event_pointer_get_absolute_y	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_absolute_y(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_absolute_y	src/libinput.c	/^libinput_event_pointer_get_absolute_y(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_absolute_y_transformed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_absolute_y_transformed($/;"	f
+libinput_event_pointer_get_absolute_y_transformed	src/libinput.c	/^libinput_event_pointer_get_absolute_y_transformed($/;"	f
+libinput_event_pointer_get_axis_source	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_axis_source(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_axis_source	src/libinput.c	/^libinput_event_pointer_get_axis_source(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_axis_value	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_axis_value(struct libinput_event_pointer *event,$/;"	f
+libinput_event_pointer_get_axis_value	src/libinput.c	/^libinput_event_pointer_get_axis_value(struct libinput_event_pointer *event,$/;"	f
+libinput_event_pointer_get_axis_value_discrete	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_axis_value_discrete(struct libinput_event_pointer *event,$/;"	f
+libinput_event_pointer_get_axis_value_discrete	src/libinput.c	/^libinput_event_pointer_get_axis_value_discrete(struct libinput_event_pointer *event,$/;"	f
+libinput_event_pointer_get_base_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_base_event(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_base_event	src/libinput.c	/^libinput_event_pointer_get_base_event(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_button(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_button	src/libinput.c	/^libinput_event_pointer_get_button(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_button_state	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_button_state(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_button_state	src/libinput.c	/^libinput_event_pointer_get_button_state(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_dx	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_dx(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_dx	src/libinput.c	/^libinput_event_pointer_get_dx(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_dx_unaccelerated	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_dx_unaccelerated($/;"	f
+libinput_event_pointer_get_dx_unaccelerated	src/libinput.c	/^libinput_event_pointer_get_dx_unaccelerated($/;"	f
+libinput_event_pointer_get_dy	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_dy(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_dy	src/libinput.c	/^libinput_event_pointer_get_dy(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_dy_unaccelerated	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_dy_unaccelerated($/;"	f
+libinput_event_pointer_get_dy_unaccelerated	src/libinput.c	/^libinput_event_pointer_get_dy_unaccelerated($/;"	f
+libinput_event_pointer_get_seat_button_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_seat_button_count($/;"	f
+libinput_event_pointer_get_seat_button_count	src/libinput.c	/^libinput_event_pointer_get_seat_button_count($/;"	f
+libinput_event_pointer_get_time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_time(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_time	src/libinput.c	/^libinput_event_pointer_get_time(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_time_usec	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_get_time_usec(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_get_time_usec	src/libinput.c	/^libinput_event_pointer_get_time_usec(struct libinput_event_pointer *event)$/;"	f
+libinput_event_pointer_has_axis	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_pointer_has_axis(struct libinput_event_pointer *event,$/;"	f
+libinput_event_pointer_has_axis	src/libinput.c	/^libinput_event_pointer_has_axis(struct libinput_event_pointer *event,$/;"	f
+libinput_event_touch	.pc/touch-point-orientation-size.patch/src/libinput.c	/^struct libinput_event_touch {$/;"	s	file:
+libinput_event_touch	src/libinput.c	/^struct libinput_event_touch {$/;"	s	file:
+libinput_event_touch_get_base_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_base_event(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_base_event	src/libinput.c	/^libinput_event_touch_get_base_event(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_major	src/libinput.c	/^libinput_event_touch_get_major(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_major_transformed	src/libinput.c	/^libinput_event_touch_get_major_transformed(struct libinput_event_touch *event,$/;"	f
+libinput_event_touch_get_minor	src/libinput.c	/^libinput_event_touch_get_minor(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_minor_transformed	src/libinput.c	/^libinput_event_touch_get_minor_transformed(struct libinput_event_touch *event,$/;"	f
+libinput_event_touch_get_orientation	src/libinput.c	/^libinput_event_touch_get_orientation(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_pressure	src/libinput.c	/^libinput_event_touch_get_pressure(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_seat_slot	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_seat_slot(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_seat_slot	src/libinput.c	/^libinput_event_touch_get_seat_slot(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_slot	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_slot(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_slot	src/libinput.c	/^libinput_event_touch_get_slot(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_time(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_time	src/libinput.c	/^libinput_event_touch_get_time(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_time_usec	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_time_usec(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_time_usec	src/libinput.c	/^libinput_event_touch_get_time_usec(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_x	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_x(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_x	src/libinput.c	/^libinput_event_touch_get_x(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_x_transformed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_x_transformed(struct libinput_event_touch *event,$/;"	f
+libinput_event_touch_get_x_transformed	src/libinput.c	/^libinput_event_touch_get_x_transformed(struct libinput_event_touch *event,$/;"	f
+libinput_event_touch_get_y	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_y(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_y	src/libinput.c	/^libinput_event_touch_get_y(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_get_y_transformed	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_event_touch_get_y_transformed(struct libinput_event_touch *event,$/;"	f
+libinput_event_touch_get_y_transformed	src/libinput.c	/^libinput_event_touch_get_y_transformed(struct libinput_event_touch *event,$/;"	f
+libinput_event_touch_has_major	src/libinput.c	/^libinput_event_touch_has_major(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_has_minor	src/libinput.c	/^libinput_event_touch_has_minor(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_has_orientation	src/libinput.c	/^libinput_event_touch_has_orientation(struct libinput_event_touch *event)$/;"	f
+libinput_event_touch_has_pressure	src/libinput.c	/^libinput_event_touch_has_pressure(struct libinput_event_touch *event)$/;"	f
+libinput_event_type	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_event_type {$/;"	g
+libinput_event_type	src/libinput.h	/^enum libinput_event_type {$/;"	g
+libinput_get_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_get_event(struct libinput *libinput)$/;"	f
+libinput_get_event	src/libinput.c	/^libinput_get_event(struct libinput *libinput)$/;"	f
+libinput_get_fd	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_get_fd(struct libinput *libinput)$/;"	f
+libinput_get_fd	src/libinput.c	/^libinput_get_fd(struct libinput *libinput)$/;"	f
+libinput_get_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_get_user_data(struct libinput *libinput)$/;"	f
+libinput_get_user_data	src/libinput.c	/^libinput_get_user_data(struct libinput *libinput)$/;"	f
+libinput_init	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_init(struct libinput *libinput,$/;"	f
+libinput_init	src/libinput.c	/^libinput_init(struct libinput *libinput,$/;"	f
+libinput_interface	.pc/touch-point-orientation-size.patch/src/libinput.h	/^struct libinput_interface {$/;"	s
+libinput_interface	src/libinput.h	/^struct libinput_interface {$/;"	s
+libinput_interface_backend	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_interface_backend {$/;"	s
+libinput_interface_backend	src/libinput-private.h	/^struct libinput_interface_backend {$/;"	s
+libinput_key_state	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_key_state {$/;"	g
+libinput_key_state	src/libinput.h	/^enum libinput_key_state {$/;"	g
+libinput_led	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_led {$/;"	g
+libinput_led	src/libinput.h	/^enum libinput_led {$/;"	g
+libinput_log_get_priority	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_log_get_priority(const struct libinput *libinput)$/;"	f
+libinput_log_get_priority	src/libinput.c	/^libinput_log_get_priority(const struct libinput *libinput)$/;"	f
+libinput_log_priority	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_log_priority {$/;"	g
+libinput_log_priority	src/libinput.h	/^enum libinput_log_priority {$/;"	g
+libinput_log_set_handler	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_log_set_handler(struct libinput *libinput,$/;"	f
+libinput_log_set_handler	src/libinput.c	/^libinput_log_set_handler(struct libinput *libinput,$/;"	f
+libinput_log_set_priority	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_log_set_priority(struct libinput *libinput,$/;"	f
+libinput_log_set_priority	src/libinput.c	/^libinput_log_set_priority(struct libinput *libinput,$/;"	f
+libinput_next_event_type	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_next_event_type(struct libinput *libinput)$/;"	f
+libinput_next_event_type	src/libinput.c	/^libinput_next_event_type(struct libinput *libinput)$/;"	f
+libinput_now	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^libinput_now(struct libinput *libinput)$/;"	f
+libinput_now	src/libinput-private.h	/^libinput_now(struct libinput *libinput)$/;"	f
+libinput_path_add_device	src/path.c	/^libinput_path_add_device(struct libinput *libinput,$/;"	f
+libinput_path_create_context	src/path.c	/^libinput_path_create_context(const struct libinput_interface *interface,$/;"	f
+libinput_path_remove_device	src/path.c	/^libinput_path_remove_device(struct libinput_device *device)$/;"	f
+libinput_pointer_axis	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_pointer_axis {$/;"	g
+libinput_pointer_axis	src/libinput.h	/^enum libinput_pointer_axis {$/;"	g
+libinput_pointer_axis_source	.pc/touch-point-orientation-size.patch/src/libinput.h	/^enum libinput_pointer_axis_source {$/;"	g
+libinput_pointer_axis_source	src/libinput.h	/^enum libinput_pointer_axis_source {$/;"	g
+libinput_post_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_post_event(struct libinput *libinput,$/;"	f	file:
+libinput_post_event	src/libinput.c	/^libinput_post_event(struct libinput *libinput,$/;"	f	file:
+libinput_ref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_ref(struct libinput *libinput)$/;"	f
+libinput_ref	src/libinput.c	/^libinput_ref(struct libinput *libinput)$/;"	f
+libinput_remove_source	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_remove_source(struct libinput *libinput,$/;"	f
+libinput_remove_source	src/libinput.c	/^libinput_remove_source(struct libinput *libinput,$/;"	f
+libinput_resume	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_resume(struct libinput *libinput)$/;"	f
+libinput_resume	src/libinput.c	/^libinput_resume(struct libinput *libinput)$/;"	f
+libinput_seat	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct libinput_seat {$/;"	s
+libinput_seat	src/libinput-private.h	/^struct libinput_seat {$/;"	s
+libinput_seat_destroy	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_destroy(struct libinput_seat *seat)$/;"	f	file:
+libinput_seat_destroy	src/libinput.c	/^libinput_seat_destroy(struct libinput_seat *seat)$/;"	f	file:
+libinput_seat_destroy_func	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^typedef void (*libinput_seat_destroy_func) (struct libinput_seat *seat);$/;"	t
+libinput_seat_destroy_func	src/libinput-private.h	/^typedef void (*libinput_seat_destroy_func) (struct libinput_seat *seat);$/;"	t
+libinput_seat_get_context	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_get_context(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_context	src/libinput.c	/^libinput_seat_get_context(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_logical_name	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_get_logical_name(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_logical_name	src/libinput.c	/^libinput_seat_get_logical_name(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_physical_name	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_get_physical_name(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_physical_name	src/libinput.c	/^libinput_seat_get_physical_name(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_get_user_data(struct libinput_seat *seat)$/;"	f
+libinput_seat_get_user_data	src/libinput.c	/^libinput_seat_get_user_data(struct libinput_seat *seat)$/;"	f
+libinput_seat_init	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_init(struct libinput_seat *seat,$/;"	f
+libinput_seat_init	src/libinput.c	/^libinput_seat_init(struct libinput_seat *seat,$/;"	f
+libinput_seat_ref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_ref(struct libinput_seat *seat)$/;"	f
+libinput_seat_ref	src/libinput.c	/^libinput_seat_ref(struct libinput_seat *seat)$/;"	f
+libinput_seat_set_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_set_user_data(struct libinput_seat *seat, void *user_data)$/;"	f
+libinput_seat_set_user_data	src/libinput.c	/^libinput_seat_set_user_data(struct libinput_seat *seat, void *user_data)$/;"	f
+libinput_seat_unref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_seat_unref(struct libinput_seat *seat)$/;"	f
+libinput_seat_unref	src/libinput.c	/^libinput_seat_unref(struct libinput_seat *seat)$/;"	f
+libinput_set_user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_set_user_data(struct libinput *libinput,$/;"	f
+libinput_set_user_data	src/libinput.c	/^libinput_set_user_data(struct libinput *libinput,$/;"	f
+libinput_source	.pc/touch-point-orientation-size.patch/src/libinput.c	/^struct libinput_source {$/;"	s	file:
+libinput_source	src/libinput.c	/^struct libinput_source {$/;"	s	file:
+libinput_source_dispatch_t	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^typedef void (*libinput_source_dispatch_t)(void *data);$/;"	t
+libinput_source_dispatch_t	src/libinput-private.h	/^typedef void (*libinput_source_dispatch_t)(void *data);$/;"	t
+libinput_suspend	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_suspend(struct libinput *libinput)$/;"	f
+libinput_suspend	src/libinput.c	/^libinput_suspend(struct libinput *libinput)$/;"	f
+libinput_timer	src/timer.h	/^struct libinput_timer {$/;"	s
+libinput_timer_arm_timer_fd	src/timer.c	/^libinput_timer_arm_timer_fd(struct libinput *libinput)$/;"	f	file:
+libinput_timer_cancel	src/timer.c	/^libinput_timer_cancel(struct libinput_timer *timer)$/;"	f
+libinput_timer_handler	src/timer.c	/^libinput_timer_handler(void *data)$/;"	f	file:
+libinput_timer_init	src/timer.c	/^libinput_timer_init(struct libinput_timer *timer, struct libinput *libinput,$/;"	f
+libinput_timer_set	src/timer.c	/^libinput_timer_set(struct libinput_timer *timer, uint64_t expire)$/;"	f
+libinput_timer_subsys_destroy	src/timer.c	/^libinput_timer_subsys_destroy(struct libinput *libinput)$/;"	f
+libinput_timer_subsys_init	src/timer.c	/^libinput_timer_subsys_init(struct libinput *libinput)$/;"	f
+libinput_udev_assign_seat	src/udev-seat.c	/^libinput_udev_assign_seat(struct libinput *libinput,$/;"	f
+libinput_udev_create_context	src/udev-seat.c	/^libinput_udev_create_context(const struct libinput_interface *interface,$/;"	f
+libinput_unref	.pc/touch-point-orientation-size.patch/src/libinput.c	/^libinput_unref(struct libinput *libinput)$/;"	f
+libinput_unref	src/libinput.c	/^libinput_unref(struct libinput *libinput)$/;"	f
+link	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list link;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::list
+link	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list link;$/;"	m	struct:libinput_event_listener	typeref:struct:libinput_event_listener::list
+link	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list link;$/;"	m	struct:libinput_seat	typeref:struct:libinput_seat::list
+link	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct list link;$/;"	m	struct:libinput_source	typeref:struct:libinput_source::list	file:
+link	src/libinput-private.h	/^	struct list link;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::list
+link	src/libinput-private.h	/^	struct list link;$/;"	m	struct:libinput_event_listener	typeref:struct:libinput_event_listener::list
+link	src/libinput-private.h	/^	struct list link;$/;"	m	struct:libinput_seat	typeref:struct:libinput_seat::list
+link	src/libinput.c	/^	struct list link;$/;"	m	struct:libinput_source	typeref:struct:libinput_source::list	file:
+link	src/path.h	/^	struct list link;$/;"	m	struct:path_device	typeref:struct:path_device::list
+link	src/timer.h	/^	struct list link;$/;"	m	struct:libinput_timer	typeref:struct:libinput_timer::list
+list	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^		struct list list;$/;"	m	struct:libinput::__anon3	typeref:struct:libinput::__anon3::list
+list	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^struct list {$/;"	s
+list	src/libinput-private.h	/^		struct list list;$/;"	m	struct:libinput::__anon33	typeref:struct:libinput::__anon33::list
+list	src/libinput-util.h	/^struct list {$/;"	s
+list_empty	src/libinput-util.c	/^list_empty(const struct list *list)$/;"	f
+list_for_each	.pc/touch-point-orientation-size.patch/src/libinput-util.h	73;"	d
+list_for_each	src/libinput-util.h	73;"	d
+list_for_each_safe	.pc/touch-point-orientation-size.patch/src/libinput-util.h	78;"	d
+list_for_each_safe	src/libinput-util.h	78;"	d
+list_init	src/libinput-util.c	/^list_init(struct list *list)$/;"	f
+list_insert	src/libinput-util.c	/^list_insert(struct list *list, struct list *elm)$/;"	f
+list_remove	src/libinput-util.c	/^list_remove(struct list *elm)$/;"	f
+litest_abort_msg	test/litest.h	52;"	d
+litest_add	test/litest.h	224;"	d
+litest_add_device	.pc/fix-litest.patch/test/litest.c	/^litest_add_device(struct libinput *libinput,$/;"	f
+litest_add_device	test/litest.c	/^litest_add_device(struct libinput *libinput,$/;"	f
+litest_add_device_with_overrides	.pc/fix-litest.patch/test/litest.c	/^litest_add_device_with_overrides(struct libinput *libinput,$/;"	f
+litest_add_device_with_overrides	test/litest.c	/^litest_add_device_with_overrides(struct libinput *libinput,$/;"	f
+litest_add_for_device	test/litest.h	228;"	d
+litest_add_no_device	test/litest.h	232;"	d
+litest_add_ranged	test/litest.h	226;"	d
+litest_add_ranged_for_device	test/litest.h	230;"	d
+litest_add_ranged_no_device	test/litest.h	234;"	d
+litest_add_tcase	.pc/fix-litest.patch/test/litest.c	/^litest_add_tcase(const char *suite_name,$/;"	f	file:
+litest_add_tcase	test/litest.c	/^litest_add_tcase(const char *suite_name,$/;"	f	file:
+litest_add_tcase_for_device	.pc/fix-litest.patch/test/litest.c	/^litest_add_tcase_for_device(struct suite *suite,$/;"	f	file:
+litest_add_tcase_for_device	test/litest.c	/^litest_add_tcase_for_device(struct suite *suite,$/;"	f	file:
+litest_add_tcase_no_device	.pc/fix-litest.patch/test/litest.c	/^litest_add_tcase_no_device(struct suite *suite,$/;"	f	file:
+litest_add_tcase_no_device	test/litest.c	/^litest_add_tcase_no_device(struct suite *suite,$/;"	f	file:
+litest_alps_device	test/litest-device-alps-semi-mt.c	/^struct litest_test_device litest_alps_device = {$/;"	v	typeref:struct:litest_test_device
+litest_alps_dualpoint_device	test/litest-device-alps-dualpoint.c	/^struct litest_test_device litest_alps_dualpoint_device = {$/;"	v	typeref:struct:litest_test_device
+litest_alps_dualpoint_setup	test/litest-device-alps-dualpoint.c	/^litest_alps_dualpoint_setup(void)$/;"	f	file:
+litest_alps_setup	test/litest-device-alps-semi-mt.c	/^litest_alps_setup(void)$/;"	f	file:
+litest_assert	test/litest.h	38;"	d
+litest_assert_button_event	.pc/fix-litest.patch/test/litest.c	/^litest_assert_button_event(struct libinput *li, unsigned int button,$/;"	f
+litest_assert_button_event	test/litest.c	/^litest_assert_button_event(struct libinput *li, unsigned int button,$/;"	f
+litest_assert_comparison_int_	test/litest.h	63;"	d
+litest_assert_comparison_ptr_	test/litest.h	93;"	d
+litest_assert_empty_queue	.pc/fix-litest.patch/test/litest.c	/^litest_assert_empty_queue(struct libinput *li)$/;"	f
+litest_assert_empty_queue	test/litest.c	/^litest_assert_empty_queue(struct libinput *li)$/;"	f
+litest_assert_int_eq	test/litest.h	75;"	d
+litest_assert_int_ge	test/litest.h	87;"	d
+litest_assert_int_gt	test/litest.h	90;"	d
+litest_assert_int_le	test/litest.h	84;"	d
+litest_assert_int_lt	test/litest.h	81;"	d
+litest_assert_int_ne	test/litest.h	78;"	d
+litest_assert_macros_suite	test/litest-selftest.c	/^litest_assert_macros_suite(void)$/;"	f	file:
+litest_assert_msg	test/litest.h	45;"	d
+litest_assert_notnull	test/litest.h	56;"	d
+litest_assert_only_typed_events	.pc/fix-litest.patch/test/litest.c	/^litest_assert_only_typed_events(struct libinput *li,$/;"	f
+litest_assert_only_typed_events	test/litest.c	/^litest_assert_only_typed_events(struct libinput *li,$/;"	f
+litest_assert_ptr_eq	test/litest.h	102;"	d
+litest_assert_ptr_ne	test/litest.h	105;"	d
+litest_assert_ptr_notnull	test/litest.h	111;"	d
+litest_assert_ptr_null	test/litest.h	108;"	d
+litest_assert_scroll	.pc/fix-litest.patch/test/litest.c	/^litest_assert_scroll(struct libinput *li,$/;"	f
+litest_assert_scroll	test/litest.c	/^litest_assert_scroll(struct libinput *li,$/;"	f
+litest_atmel_hover_device	test/litest-device-atmel-hover.c	/^struct litest_test_device litest_atmel_hover_device = {$/;"	v	typeref:struct:litest_test_device
+litest_atmel_hover_setup	test/litest-device-atmel-hover.c	/^litest_atmel_hover_setup(void)$/;"	f	file:
+litest_auto_assign_value	.pc/fix-litest.patch/test/litest.c	/^litest_auto_assign_value(struct litest_device *d,$/;"	f
+litest_auto_assign_value	test/litest.c	/^litest_auto_assign_value(struct litest_device *d,$/;"	f
+litest_backtrace	.pc/fix-litest.patch/test/litest.c	/^litest_backtrace(void)$/;"	f	file:
+litest_backtrace	test/litest.c	/^litest_backtrace(void)$/;"	f	file:
+litest_backtrace_get_lineno	.pc/fix-litest.patch/test/litest.c	/^litest_backtrace_get_lineno(const char *executable,$/;"	f	file:
+litest_backtrace_get_lineno	test/litest.c	/^litest_backtrace_get_lineno(const char *executable,$/;"	f	file:
+litest_bcm5974_device	test/litest-device-bcm5974.c	/^struct litest_test_device litest_bcm5974_device = {$/;"	v	typeref:struct:litest_test_device
+litest_bcm5974_setup	test/litest-device-bcm5974.c	/^static void litest_bcm5974_setup(void)$/;"	f	file:
+litest_blackwidow_setup	test/litest-device-keyboard-razer-blackwidow.c	/^static void litest_blackwidow_setup(void)$/;"	f	file:
+litest_button_click	.pc/fix-litest.patch/test/litest.c	/^litest_button_click(struct litest_device *d, unsigned int button, bool is_press)$/;"	f
+litest_button_click	test/litest.c	/^litest_button_click(struct litest_device *d, unsigned int button, bool is_press)$/;"	f
+litest_button_scroll	.pc/fix-litest.patch/test/litest.c	/^litest_button_scroll(struct litest_device *dev,$/;"	f
+litest_button_scroll	test/litest.c	/^litest_button_scroll(struct litest_device *dev,$/;"	f
+litest_copy_file	.pc/fix-litest.patch/test/litest.c	/^litest_copy_file(const char *dest, const char *src, const char *header)$/;"	f	file:
+litest_copy_file	test/litest.c	/^litest_copy_file(const char *dest, const char *src, const char *header)$/;"	f	file:
+litest_create	.pc/fix-litest.patch/test/litest.c	/^litest_create(enum litest_device_type which,$/;"	f	file:
+litest_create	test/litest.c	/^litest_create(enum litest_device_type which,$/;"	f	file:
+litest_create_context	.pc/fix-litest.patch/test/litest.c	/^litest_create_context(void)$/;"	f
+litest_create_context	test/litest.c	/^litest_create_context(void)$/;"	f
+litest_create_device	.pc/fix-litest.patch/test/litest.c	/^litest_create_device(enum litest_device_type which)$/;"	f
+litest_create_device	test/litest.c	/^litest_create_device(enum litest_device_type which)$/;"	f
+litest_create_device_with_overrides	.pc/fix-litest.patch/test/litest.c	/^litest_create_device_with_overrides(enum litest_device_type which,$/;"	f
+litest_create_device_with_overrides	test/litest.c	/^litest_create_device_with_overrides(enum litest_device_type which,$/;"	f
+litest_create_uinput	.pc/fix-litest.patch/test/litest.c	/^litest_create_uinput(const char *name,$/;"	f	file:
+litest_create_uinput	test/litest.c	/^litest_create_uinput(const char *name,$/;"	f	file:
+litest_create_uinput_abs_device	.pc/fix-litest.patch/test/litest.c	/^litest_create_uinput_abs_device(const char *name,$/;"	f
+litest_create_uinput_abs_device	test/litest.c	/^litest_create_uinput_abs_device(const char *name,$/;"	f
+litest_create_uinput_abs_device_v	.pc/fix-litest.patch/test/litest.c	/^litest_create_uinput_abs_device_v(const char *name,$/;"	f	file:
+litest_create_uinput_abs_device_v	test/litest.c	/^litest_create_uinput_abs_device_v(const char *name,$/;"	f	file:
+litest_create_uinput_device	.pc/fix-litest.patch/test/litest.c	/^litest_create_uinput_device(const char *name, struct input_id *id, ...)$/;"	f
+litest_create_uinput_device	test/litest.c	/^litest_create_uinput_device(const char *name, struct input_id *id, ...)$/;"	f
+litest_create_uinput_device_from_description	.pc/fix-litest.patch/test/litest.c	/^litest_create_uinput_device_from_description(const char *name,$/;"	f
+litest_create_uinput_device_from_description	test/litest.c	/^litest_create_uinput_device_from_description(const char *name,$/;"	f
+litest_current_device	.pc/fix-litest.patch/test/litest.c	/^struct litest_device *litest_current_device(void)$/;"	f
+litest_current_device	test/litest.c	/^struct litest_device *litest_current_device(void)$/;"	f
+litest_delete_device	.pc/fix-litest.patch/test/litest.c	/^litest_delete_device(struct litest_device *d)$/;"	f
+litest_delete_device	test/litest.c	/^litest_delete_device(struct litest_device *d)$/;"	f
+litest_device	test/litest.h	/^struct litest_device {$/;"	s
+litest_device_feature	test/litest.h	/^enum litest_device_feature {$/;"	g
+litest_device_interface	test/litest-int.h	/^struct litest_device_interface {$/;"	s
+litest_device_type	test/litest.h	/^enum litest_device_type {$/;"	g
+litest_disable_drag_lock	test/litest.h	/^litest_disable_drag_lock(struct libinput_device *device)$/;"	f
+litest_disable_log_handler	.pc/fix-litest.patch/test/litest.c	/^litest_disable_log_handler(struct libinput *libinput)$/;"	f
+litest_disable_log_handler	test/litest.c	/^litest_disable_log_handler(struct libinput *libinput)$/;"	f
+litest_disable_tap	test/litest.h	/^litest_disable_tap(struct libinput_device *device)$/;"	f
+litest_drain_events	.pc/fix-litest.patch/test/litest.c	/^litest_drain_events(struct libinput *li)$/;"	f
+litest_drain_events	test/litest.c	/^litest_drain_events(struct libinput *li)$/;"	f
+litest_drop_udev_rules	.pc/fix-litest.patch/test/litest.c	/^litest_drop_udev_rules(void)$/;"	f	file:
+litest_drop_udev_rules	test/litest.c	/^litest_drop_udev_rules(void)$/;"	f	file:
+litest_elantech_touchpad_device	test/litest-device-elantech-touchpad.c	/^struct litest_test_device litest_elantech_touchpad_device = {$/;"	v	typeref:struct:litest_test_device
+litest_elantech_touchpad_setup	test/litest-device-elantech-touchpad.c	/^litest_elantech_touchpad_setup(void)$/;"	f	file:
+litest_enable_2fg_scroll	test/litest.h	/^litest_enable_2fg_scroll(struct litest_device *dev)$/;"	f
+litest_enable_buttonareas	test/litest.h	/^litest_enable_buttonareas(struct litest_device *dev)$/;"	f
+litest_enable_clickfinger	test/litest.h	/^litest_enable_clickfinger(struct litest_device *dev)$/;"	f
+litest_enable_drag_lock	test/litest.h	/^litest_enable_drag_lock(struct libinput_device *device)$/;"	f
+litest_enable_edge_scroll	test/litest.h	/^litest_enable_edge_scroll(struct litest_device *dev)$/;"	f
+litest_enable_tap	test/litest.h	/^litest_enable_tap(struct libinput_device *device)$/;"	f
+litest_event	.pc/fix-litest.patch/test/litest.c	/^litest_event(struct litest_device *d, unsigned int type,$/;"	f
+litest_event	test/litest.c	/^litest_event(struct litest_device *d, unsigned int type,$/;"	f
+litest_event_type_str	.pc/fix-litest.patch/test/litest.c	/^litest_event_type_str(struct libinput_event *event)$/;"	f	file:
+litest_event_type_str	test/litest.c	/^litest_event_type_str(struct libinput_event *event)$/;"	f	file:
+litest_fail_comparison_int	.pc/fix-litest.patch/test/litest.c	/^litest_fail_comparison_int(const char *file,$/;"	f
+litest_fail_comparison_int	test/litest.c	/^litest_fail_comparison_int(const char *file,$/;"	f
+litest_fail_comparison_ptr	.pc/fix-litest.patch/test/litest.c	/^litest_fail_comparison_ptr(const char *file,$/;"	f
+litest_fail_comparison_ptr	test/litest.c	/^litest_fail_comparison_ptr(const char *file,$/;"	f
+litest_fail_condition	.pc/fix-litest.patch/test/litest.c	/^litest_fail_condition(const char *file,$/;"	f
+litest_fail_condition	test/litest.c	/^litest_fail_condition(const char *file,$/;"	f
+litest_generic_device_teardown	.pc/fix-litest.patch/test/litest.c	/^void litest_generic_device_teardown(void)$/;"	f
+litest_generic_device_teardown	test/litest.c	/^void litest_generic_device_teardown(void)$/;"	f
+litest_generic_mt_setup	test/litest-device-touch-screen.c	/^static void litest_generic_mt_setup(void)$/;"	f	file:
+litest_generic_multitouch_screen_device	test/litest-device-touch-screen.c	/^struct litest_test_device litest_generic_multitouch_screen_device = {$/;"	v	typeref:struct:litest_test_device
+litest_generic_singletouch_device	test/litest-device-generic-singletouch.c	/^struct litest_test_device litest_generic_singletouch_device = {$/;"	v	typeref:struct:litest_test_device
+litest_generic_singletouch_touch_setup	test/litest-device-generic-singletouch.c	/^litest_generic_singletouch_touch_setup(void)$/;"	f	file:
+litest_handle_events	.pc/fix-litest.patch/test/litest.c	/^litest_handle_events(struct litest_device *d)$/;"	f
+litest_handle_events	test/litest.c	/^litest_handle_events(struct litest_device *d)$/;"	f
+litest_has_2fg_scroll	test/litest.h	/^litest_has_2fg_scroll(struct litest_device *dev)$/;"	f
+litest_hover_end	.pc/fix-litest.patch/test/litest.c	/^litest_hover_end(struct litest_device *d, unsigned int slot)$/;"	f
+litest_hover_end	test/litest.c	/^litest_hover_end(struct litest_device *d, unsigned int slot)$/;"	f
+litest_hover_move	.pc/fix-litest.patch/test/litest.c	/^litest_hover_move(struct litest_device *d, unsigned int slot,$/;"	f
+litest_hover_move	test/litest.c	/^litest_hover_move(struct litest_device *d, unsigned int slot,$/;"	f
+litest_hover_move_to	.pc/fix-litest.patch/test/litest.c	/^litest_hover_move_to(struct litest_device *d,$/;"	f
+litest_hover_move_to	test/litest.c	/^litest_hover_move_to(struct litest_device *d,$/;"	f
+litest_hover_move_two_touches	.pc/fix-litest.patch/test/litest.c	/^litest_hover_move_two_touches(struct litest_device *d,$/;"	f
+litest_hover_move_two_touches	test/litest.c	/^litest_hover_move_two_touches(struct litest_device *d,$/;"	f
+litest_hover_start	.pc/fix-litest.patch/test/litest.c	/^litest_hover_start(struct litest_device *d,$/;"	f
+litest_hover_start	test/litest.c	/^litest_hover_start(struct litest_device *d,$/;"	f
+litest_init_device_udev_rules	.pc/fix-litest.patch/test/litest.c	/^litest_init_device_udev_rules(struct litest_test_device *dev)$/;"	f	file:
+litest_init_device_udev_rules	test/litest.c	/^litest_init_device_udev_rules(struct litest_test_device *dev)$/;"	f	file:
+litest_init_udev_rules	.pc/fix-litest.patch/test/litest.c	/^litest_init_udev_rules(void)$/;"	f	file:
+litest_init_udev_rules	test/litest.c	/^litest_init_udev_rules(void)$/;"	f	file:
+litest_install_model_quirks	.pc/fix-litest.patch/test/litest.c	/^litest_install_model_quirks(void)$/;"	f	file:
+litest_install_model_quirks	test/litest.c	/^litest_install_model_quirks(void)$/;"	f	file:
+litest_is_axis_event	.pc/fix-litest.patch/test/litest.c	/^litest_is_axis_event(struct libinput_event *event,$/;"	f
+litest_is_axis_event	test/litest.c	/^litest_is_axis_event(struct libinput_event *event,$/;"	f
+litest_is_button_event	.pc/fix-litest.patch/test/litest.c	/^litest_is_button_event(struct libinput_event *event,$/;"	f
+litest_is_button_event	test/litest.c	/^litest_is_button_event(struct libinput_event *event,$/;"	f
+litest_is_gesture_event	.pc/fix-litest.patch/test/litest.c	/^litest_is_gesture_event(struct libinput_event *event,$/;"	f
+litest_is_gesture_event	test/litest.c	/^litest_is_gesture_event(struct libinput_event *event,$/;"	f
+litest_is_keyboard_event	.pc/fix-litest.patch/test/litest.c	/^litest_is_keyboard_event(struct libinput_event *event,$/;"	f
+litest_is_keyboard_event	test/litest.c	/^litest_is_keyboard_event(struct libinput_event *event,$/;"	f
+litest_is_motion_event	.pc/fix-litest.patch/test/litest.c	/^litest_is_motion_event(struct libinput_event *event)$/;"	f
+litest_is_motion_event	test/litest.c	/^litest_is_motion_event(struct libinput_event *event)$/;"	f
+litest_is_synaptics_semi_mt	test/litest.h	/^litest_is_synaptics_semi_mt(struct litest_device *dev)$/;"	f
+litest_is_touch_event	.pc/fix-litest.patch/test/litest.c	/^litest_is_touch_event(struct libinput_event *event,$/;"	f
+litest_is_touch_event	test/litest.c	/^litest_is_touch_event(struct libinput_event *event,$/;"	f
+litest_keyboard_blackwidow_device	test/litest-device-keyboard-razer-blackwidow.c	/^struct litest_test_device litest_keyboard_blackwidow_device = {$/;"	v	typeref:struct:litest_test_device
+litest_keyboard_device	test/litest-device-keyboard.c	/^struct litest_test_device litest_keyboard_device = {$/;"	v	typeref:struct:litest_test_device
+litest_keyboard_key	.pc/fix-litest.patch/test/litest.c	/^litest_keyboard_key(struct litest_device *d, unsigned int key, bool is_press)$/;"	f
+litest_keyboard_key	test/litest.c	/^litest_keyboard_key(struct litest_device *d, unsigned int key, bool is_press)$/;"	f
+litest_keyboard_setup	test/litest-device-keyboard.c	/^static void litest_keyboard_setup(void)$/;"	f	file:
+litest_list_tests	.pc/fix-litest.patch/test/litest.c	/^litest_list_tests(struct list *tests)$/;"	f	file:
+litest_list_tests	test/litest.c	/^litest_list_tests(struct list *tests)$/;"	f	file:
+litest_log	.pc/fix-litest.patch/test/litest.c	76;"	d	file:
+litest_log	.pc/fix-litest.patch/test/litest.c	79;"	d	file:
+litest_log	test/litest.c	76;"	d	file:
+litest_log	test/litest.c	79;"	d	file:
+litest_log_handler	.pc/fix-litest.patch/test/litest.c	/^litest_log_handler(struct libinput *libinput,$/;"	f	file:
+litest_log_handler	test/litest.c	/^litest_log_handler(struct libinput *libinput,$/;"	f	file:
+litest_logitech_trackball_device	test/litest-device-logitech-trackball.c	/^struct litest_test_device litest_logitech_trackball_device = {$/;"	v	typeref:struct:litest_test_device
+litest_logitech_trackball_setup	test/litest-device-logitech-trackball.c	/^static void litest_logitech_trackball_setup(void)$/;"	f	file:
+litest_magicpad_device	test/litest-device-magic-trackpad.c	/^struct litest_test_device litest_magicpad_device = {$/;"	v	typeref:struct:litest_test_device
+litest_magicpad_setup	test/litest-device-magic-trackpad.c	/^static void litest_magicpad_setup(void)$/;"	f	file:
+litest_mode	.pc/fix-litest.patch/test/litest.c	/^enum litest_mode {$/;"	g	file:
+litest_mode	test/litest.c	/^enum litest_mode {$/;"	g	file:
+litest_mouse_device	test/litest-device-mouse.c	/^struct litest_test_device litest_mouse_device = {$/;"	v	typeref:struct:litest_test_device
+litest_mouse_low_dpi_device	test/litest-device-mouse-low-dpi.c	/^struct litest_test_device litest_mouse_low_dpi_device = {$/;"	v	typeref:struct:litest_test_device
+litest_mouse_roccat_device	test/litest-device-mouse-roccat.c	/^struct litest_test_device litest_mouse_roccat_device = {$/;"	v	typeref:struct:litest_test_device
+litest_mouse_roccat_setup	test/litest-device-mouse-roccat.c	/^static void litest_mouse_roccat_setup(void)$/;"	f	file:
+litest_mouse_setup	test/litest-device-mouse-low-dpi.c	/^static void litest_mouse_setup(void)$/;"	f	file:
+litest_mouse_setup	test/litest-device-mouse.c	/^static void litest_mouse_setup(void)$/;"	f	file:
+litest_ms_surface_cover_device	test/litest-device-ms-surface-cover.c	/^struct litest_test_device litest_ms_surface_cover_device = {$/;"	v	typeref:struct:litest_test_device
+litest_ms_surface_cover_setup	test/litest-device-ms-surface-cover.c	/^litest_ms_surface_cover_setup(void)$/;"	f	file:
+litest_nexus4_device	test/litest-device-nexus4-touch-screen.c	/^struct litest_test_device litest_nexus4_device = {$/;"	v	typeref:struct:litest_test_device
+litest_nexus4_setup	test/litest-device-nexus4-touch-screen.c	/^static void litest_nexus4_setup(void)$/;"	f	file:
+litest_parse_argv	.pc/fix-litest.patch/test/litest.c	/^litest_parse_argv(int argc, char **argv)$/;"	f	file:
+litest_parse_argv	test/litest.c	/^litest_parse_argv(int argc, char **argv)$/;"	f	file:
+litest_pop_event_frame	.pc/fix-litest.patch/test/litest.c	/^litest_pop_event_frame(struct litest_device *dev)$/;"	f
+litest_pop_event_frame	test/litest.c	/^litest_pop_event_frame(struct litest_device *dev)$/;"	f
+litest_print_event	.pc/fix-litest.patch/test/litest.c	/^litest_print_event(struct libinput_event *event)$/;"	f	file:
+litest_print_event	test/litest.c	/^litest_print_event(struct libinput_event *event)$/;"	f	file:
+litest_protocol_a_screen	test/litest-device-protocol-a-touch-screen.c	/^struct litest_test_device litest_protocol_a_screen = {$/;"	v	typeref:struct:litest_test_device
+litest_protocol_a_touch_setup	test/litest-device-protocol-a-touch-screen.c	/^litest_protocol_a_touch_setup(void)$/;"	f	file:
+litest_push_event_frame	.pc/fix-litest.patch/test/litest.c	/^litest_push_event_frame(struct litest_device *dev)$/;"	f
+litest_push_event_frame	test/litest.c	/^litest_push_event_frame(struct litest_device *dev)$/;"	f
+litest_qemu_tablet_device	test/litest-device-qemu-usb-tablet.c	/^struct litest_test_device litest_qemu_tablet_device = {$/;"	v	typeref:struct:litest_test_device
+litest_qemu_tablet_touch_setup	test/litest-device-qemu-usb-tablet.c	/^litest_qemu_tablet_touch_setup(void)$/;"	f	file:
+litest_reload_udev_rules	.pc/fix-litest.patch/test/litest.c	/^litest_reload_udev_rules(void)$/;"	f	file:
+litest_reload_udev_rules	test/litest.c	/^litest_reload_udev_rules(void)$/;"	f	file:
+litest_remove_model_quirks	.pc/fix-litest.patch/test/litest.c	/^litest_remove_model_quirks(void)$/;"	f	file:
+litest_remove_model_quirks	test/litest.c	/^litest_remove_model_quirks(void)$/;"	f	file:
+litest_restore_log_handler	.pc/fix-litest.patch/test/litest.c	/^litest_restore_log_handler(struct libinput *libinput)$/;"	f
+litest_restore_log_handler	test/litest.c	/^litest_restore_log_handler(struct libinput *libinput)$/;"	f
+litest_run	.pc/fix-litest.patch/test/litest.c	/^litest_run(int argc, char **argv)$/;"	f	file:
+litest_run	test/litest.c	/^litest_run(int argc, char **argv)$/;"	f	file:
+litest_scale	.pc/fix-litest.patch/test/litest.c	/^litest_scale(const struct litest_device *d, unsigned int axis, double val)$/;"	f
+litest_scale	test/litest.c	/^litest_scale(const struct litest_device *d, unsigned int axis, double val)$/;"	f
+litest_semi_mt	test/litest.h	/^struct litest_semi_mt {$/;"	s
+litest_semi_mt_touch_down	.pc/fix-litest.patch/test/litest.c	/^litest_semi_mt_touch_down(struct litest_device *d,$/;"	f
+litest_semi_mt_touch_down	test/litest.c	/^litest_semi_mt_touch_down(struct litest_device *d,$/;"	f
+litest_semi_mt_touch_move	.pc/fix-litest.patch/test/litest.c	/^litest_semi_mt_touch_move(struct litest_device *d,$/;"	f
+litest_semi_mt_touch_move	test/litest.c	/^litest_semi_mt_touch_move(struct litest_device *d,$/;"	f
+litest_semi_mt_touch_up	.pc/fix-litest.patch/test/litest.c	/^litest_semi_mt_touch_up(struct litest_device *d,$/;"	f
+litest_semi_mt_touch_up	test/litest.c	/^litest_semi_mt_touch_up(struct litest_device *d,$/;"	f
+litest_set_current_device	.pc/fix-litest.patch/test/litest.c	/^void litest_set_current_device(struct litest_device *device)$/;"	f
+litest_set_current_device	test/litest.c	/^void litest_set_current_device(struct litest_device *device)$/;"	f
+litest_setup_tests	.pc/touch-point-orientation-size.patch/test/touch.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/device.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/gestures.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/keyboard.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/log.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/misc.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/path.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/pointer.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/touch.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/touchpad-buttons.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/touchpad-tap.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/touchpad.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/trackpoint.c	/^litest_setup_tests(void)$/;"	f
+litest_setup_tests	test/udev.c	/^litest_setup_tests(void)$/;"	f
+litest_slot_move	.pc/fix-litest.patch/test/litest.c	/^litest_slot_move(struct litest_device *d,$/;"	f	file:
+litest_slot_move	test/litest.c	/^litest_slot_move(struct litest_device *d,$/;"	f	file:
+litest_slot_start	.pc/fix-litest.patch/test/litest.c	/^litest_slot_start(struct litest_device *d,$/;"	f	file:
+litest_slot_start	test/litest.c	/^litest_slot_start(struct litest_device *d,$/;"	f	file:
+litest_synaptics_carbon3rd_device	test/litest-device-synaptics-x1-carbon-3rd.c	/^struct litest_test_device litest_synaptics_carbon3rd_device = {$/;"	v	typeref:struct:litest_test_device
+litest_synaptics_carbon3rd_setup	test/litest-device-synaptics-x1-carbon-3rd.c	/^litest_synaptics_carbon3rd_setup(void)$/;"	f	file:
+litest_synaptics_clickpad_device	test/litest-device-synaptics.c	/^struct litest_test_device litest_synaptics_clickpad_device = {$/;"	v	typeref:struct:litest_test_device
+litest_synaptics_clickpad_setup	test/litest-device-synaptics.c	/^litest_synaptics_clickpad_setup(void)$/;"	f	file:
+litest_synaptics_hover_device	test/litest-device-synaptics-hover.c	/^struct litest_test_device litest_synaptics_hover_device = {$/;"	v	typeref:struct:litest_test_device
+litest_synaptics_hover_setup	test/litest-device-synaptics-hover.c	/^litest_synaptics_hover_setup(void)$/;"	f	file:
+litest_synaptics_t440_device	test/litest-device-synaptics-t440.c	/^struct litest_test_device litest_synaptics_t440_device = {$/;"	v	typeref:struct:litest_test_device
+litest_synaptics_t440_setup	test/litest-device-synaptics-t440.c	/^litest_synaptics_t440_setup(void)$/;"	f	file:
+litest_synaptics_touchpad_device	test/litest-device-synaptics-st.c	/^struct litest_test_device litest_synaptics_touchpad_device = {$/;"	v	typeref:struct:litest_test_device
+litest_synaptics_touchpad_setup	test/litest-device-synaptics-st.c	/^litest_synaptics_touchpad_setup(void)$/;"	f	file:
+litest_system	.pc/fix-litest.patch/test/litest.c	/^litest_system(const char *command)$/;"	f	file:
+litest_system	test/litest.c	/^litest_system(const char *command)$/;"	f	file:
+litest_test_device	test/litest-int.h	/^struct litest_test_device {$/;"	s
+litest_timeout_buttonscroll	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_buttonscroll(void)$/;"	f
+litest_timeout_buttonscroll	test/litest.c	/^litest_timeout_buttonscroll(void)$/;"	f
+litest_timeout_dwt_long	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_dwt_long(void)$/;"	f
+litest_timeout_dwt_long	test/litest.c	/^litest_timeout_dwt_long(void)$/;"	f
+litest_timeout_dwt_short	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_dwt_short(void)$/;"	f
+litest_timeout_dwt_short	test/litest.c	/^litest_timeout_dwt_short(void)$/;"	f
+litest_timeout_edgescroll	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_edgescroll(void)$/;"	f
+litest_timeout_edgescroll	test/litest.c	/^litest_timeout_edgescroll(void)$/;"	f
+litest_timeout_finger_switch	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_finger_switch(void)$/;"	f
+litest_timeout_finger_switch	test/litest.c	/^litest_timeout_finger_switch(void)$/;"	f
+litest_timeout_gesture	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_gesture(void)$/;"	f
+litest_timeout_gesture	test/litest.c	/^litest_timeout_gesture(void)$/;"	f
+litest_timeout_middlebutton	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_middlebutton(void)$/;"	f
+litest_timeout_middlebutton	test/litest.c	/^litest_timeout_middlebutton(void)$/;"	f
+litest_timeout_softbuttons	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_softbuttons(void)$/;"	f
+litest_timeout_softbuttons	test/litest.c	/^litest_timeout_softbuttons(void)$/;"	f
+litest_timeout_tap	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_tap(void)$/;"	f
+litest_timeout_tap	test/litest.c	/^litest_timeout_tap(void)$/;"	f
+litest_timeout_tapndrag	.pc/fix-litest.patch/test/litest.c	/^litest_timeout_tapndrag(void)$/;"	f
+litest_timeout_tapndrag	test/litest.c	/^litest_timeout_tapndrag(void)$/;"	f
+litest_touch_down	.pc/fix-litest.patch/test/litest.c	/^litest_touch_down(struct litest_device *d,$/;"	f
+litest_touch_down	test/litest.c	/^litest_touch_down(struct litest_device *d,$/;"	f
+litest_touch_down_extended	.pc/fix-litest.patch/test/litest.c	/^litest_touch_down_extended(struct litest_device *d,$/;"	f
+litest_touch_down_extended	test/litest.c	/^litest_touch_down_extended(struct litest_device *d,$/;"	f
+litest_touch_move	.pc/fix-litest.patch/test/litest.c	/^litest_touch_move(struct litest_device *d,$/;"	f
+litest_touch_move	test/litest.c	/^litest_touch_move(struct litest_device *d,$/;"	f
+litest_touch_move_extended	.pc/fix-litest.patch/test/litest.c	/^litest_touch_move_extended(struct litest_device *d,$/;"	f
+litest_touch_move_extended	test/litest.c	/^litest_touch_move_extended(struct litest_device *d,$/;"	f
+litest_touch_move_three_touches	.pc/fix-litest.patch/test/litest.c	/^litest_touch_move_three_touches(struct litest_device *d,$/;"	f
+litest_touch_move_three_touches	test/litest.c	/^litest_touch_move_three_touches(struct litest_device *d,$/;"	f
+litest_touch_move_to	.pc/fix-litest.patch/test/litest.c	/^litest_touch_move_to(struct litest_device *d,$/;"	f
+litest_touch_move_to	test/litest.c	/^litest_touch_move_to(struct litest_device *d,$/;"	f
+litest_touch_move_two_touches	.pc/fix-litest.patch/test/litest.c	/^litest_touch_move_two_touches(struct litest_device *d,$/;"	f
+litest_touch_move_two_touches	test/litest.c	/^litest_touch_move_two_touches(struct litest_device *d,$/;"	f
+litest_touch_up	.pc/fix-litest.patch/test/litest.c	/^litest_touch_up(struct litest_device *d, unsigned int slot)$/;"	f
+litest_touch_up	test/litest.c	/^litest_touch_up(struct litest_device *d, unsigned int slot)$/;"	f
+litest_trackpoint_device	test/litest-device-trackpoint.c	/^struct litest_test_device litest_trackpoint_device = {$/;"	v	typeref:struct:litest_test_device
+litest_trackpoint_setup	test/litest-device-trackpoint.c	/^static void litest_trackpoint_setup(void)$/;"	f	file:
+litest_udev_rule_filter	.pc/fix-litest.patch/test/litest.c	/^litest_udev_rule_filter(const struct dirent *entry)$/;"	f	file:
+litest_udev_rule_filter	test/litest.c	/^litest_udev_rule_filter(const struct dirent *entry)$/;"	f	file:
+litest_vlog	.pc/fix-litest.patch/test/litest.c	77;"	d	file:
+litest_vlog	.pc/fix-litest.patch/test/litest.c	80;"	d	file:
+litest_vlog	test/litest.c	77;"	d	file:
+litest_vlog	test/litest.c	80;"	d	file:
+litest_vmware_virtmouse_device	test/litest-device-vmware-virtual-usb-mouse.c	/^struct litest_test_device litest_vmware_virtmouse_device = {$/;"	v	typeref:struct:litest_test_device
+litest_vmware_virtmouse_touch_setup	test/litest-device-vmware-virtual-usb-mouse.c	/^litest_vmware_virtmouse_touch_setup(void)$/;"	f	file:
+litest_wacom_finger_device	test/litest-device-wacom-intuos-finger.c	/^struct litest_test_device litest_wacom_finger_device = {$/;"	v	typeref:struct:litest_test_device
+litest_wacom_finger_setup	test/litest-device-wacom-intuos-finger.c	/^litest_wacom_finger_setup(void)$/;"	f	file:
+litest_wacom_touch_device	test/litest-device-wacom-touch.c	/^struct litest_test_device litest_wacom_touch_device = {$/;"	v	typeref:struct:litest_test_device
+litest_wacom_touch_setup	test/litest-device-wacom-touch.c	/^litest_wacom_touch_setup(void)$/;"	f	file:
+litest_wait_for_event	.pc/fix-litest.patch/test/litest.c	/^litest_wait_for_event(struct libinput *li)$/;"	f
+litest_wait_for_event	test/litest.c	/^litest_wait_for_event(struct libinput *li)$/;"	f
+litest_wait_for_event_of_type	.pc/fix-litest.patch/test/litest.c	/^litest_wait_for_event_of_type(struct libinput *li, ...)$/;"	f
+litest_wait_for_event_of_type	test/litest.c	/^litest_wait_for_event_of_type(struct libinput *li, ...)$/;"	f
+litest_wheel_only_device	test/litest-device-wheel-only.c	/^struct litest_test_device litest_wheel_only_device = {$/;"	v	typeref:struct:litest_test_device
+litest_wheel_only_setup	test/litest-device-wheel-only.c	/^static void litest_wheel_only_setup(void)$/;"	f	file:
+litest_xen_virtual_pointer_device	test/litest-device-xen-virtual-pointer.c	/^struct litest_test_device litest_xen_virtual_pointer_device = {$/;"	v	typeref:struct:litest_test_device
+litest_xen_virtual_pointer_touch_setup	test/litest-device-xen-virtual-pointer.c	/^litest_xen_virtual_pointer_touch_setup(void)$/;"	f	file:
+log_bug_client	.pc/touch-point-orientation-size.patch/src/libinput-private.h	257;"	d
+log_bug_client	src/libinput-private.h	272;"	d
+log_bug_client_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-private.h	264;"	d
+log_bug_client_ratelimit	src/libinput-private.h	279;"	d
+log_bug_kernel	.pc/touch-point-orientation-size.patch/src/libinput-private.h	255;"	d
+log_bug_kernel	src/libinput-private.h	270;"	d
+log_bug_kernel_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-private.h	262;"	d
+log_bug_kernel_ratelimit	src/libinput-private.h	277;"	d
+log_bug_libinput	.pc/touch-point-orientation-size.patch/src/libinput-private.h	256;"	d
+log_bug_libinput	src/libinput-private.h	271;"	d
+log_bug_libinput_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-private.h	263;"	d
+log_bug_libinput_ratelimit	src/libinput-private.h	278;"	d
+log_debug	.pc/touch-point-orientation-size.patch/src/libinput-private.h	252;"	d
+log_debug	src/libinput-private.h	267;"	d
+log_debug_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-private.h	259;"	d
+log_debug_ratelimit	src/libinput-private.h	274;"	d
+log_error	.pc/touch-point-orientation-size.patch/src/libinput-private.h	254;"	d
+log_error	src/libinput-private.h	269;"	d
+log_error_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-private.h	261;"	d
+log_error_ratelimit	src/libinput-private.h	276;"	d
+log_handler	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	libinput_log_handler log_handler;$/;"	m	struct:libinput
+log_handler	src/libinput-private.h	/^	libinput_log_handler log_handler;$/;"	m	struct:libinput
+log_handler	tools/shared.c	/^log_handler(struct libinput *li,$/;"	f	file:
+log_handler_called	test/log.c	/^static int log_handler_called;$/;"	v	file:
+log_handler_context	test/log.c	/^static struct libinput *log_handler_context;$/;"	v	typeref:struct:libinput	file:
+log_info	.pc/touch-point-orientation-size.patch/src/libinput-private.h	253;"	d
+log_info	src/libinput-private.h	268;"	d
+log_info_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-private.h	260;"	d
+log_info_ratelimit	src/libinput-private.h	275;"	d
+log_msg	.pc/touch-point-orientation-size.patch/src/libinput.c	/^log_msg(struct libinput *libinput,$/;"	f
+log_msg	src/libinput.c	/^log_msg(struct libinput *libinput,$/;"	f
+log_msg_ratelimit	.pc/touch-point-orientation-size.patch/src/libinput.c	/^log_msg_ratelimit(struct libinput *libinput,$/;"	f
+log_msg_ratelimit	src/libinput.c	/^log_msg_ratelimit(struct libinput *libinput,$/;"	f
+log_msg_va	.pc/touch-point-orientation-size.patch/src/libinput.c	/^log_msg_va(struct libinput *libinput,$/;"	f
+log_msg_va	src/libinput.c	/^log_msg_va(struct libinput *libinput,$/;"	f
+log_priority	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_log_priority log_priority;$/;"	m	struct:libinput	typeref:enum:libinput::libinput_log_priority
+log_priority	src/libinput-private.h	/^	enum libinput_log_priority log_priority;$/;"	m	struct:libinput	typeref:enum:libinput::libinput_log_priority
+logical_name	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	char *logical_name;$/;"	m	struct:libinput_seat
+logical_name	src/libinput-private.h	/^	char *logical_name;$/;"	m	struct:libinput_seat
+long_bit_is_set	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^long_bit_is_set(const unsigned long *array, int bit)$/;"	f
+long_bit_is_set	src/libinput-util.h	/^long_bit_is_set(const unsigned long *array, int bit)$/;"	f
+long_clear_bit	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^long_clear_bit(unsigned long *array, int bit)$/;"	f
+long_clear_bit	src/libinput-util.h	/^long_clear_bit(unsigned long *array, int bit)$/;"	f
+long_set_bit	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^long_set_bit(unsigned long *array, int bit)$/;"	f
+long_set_bit	src/libinput-util.h	/^long_set_bit(unsigned long *array, int bit)$/;"	f
+long_set_bit_state	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^long_set_bit_state(unsigned long *array, int bit, int state)$/;"	f
+long_set_bit_state	src/libinput-util.h	/^long_set_bit_state(unsigned long *array, int bit, int state)$/;"	f
+lower	test/litest.h	/^	int lower; \/* inclusive *\/$/;"	m	struct:range
+lower_thumb_line	src/evdev-mt-touchpad.h	/^		int lower_thumb_line;$/;"	m	struct:tp_dispatch::__anon32
+m	tools/event-gui.c	/^	int l, m, r;$/;"	m	struct:window	file:
+magnitude	include/linux/input.h	/^	__s16 magnitude;$/;"	m	struct:ff_periodic_effect
+main	.pc/fix-litest.patch/test/litest.c	/^main(int argc, char **argv)$/;"	f
+main	config.guess	/^		main()$/;"	f
+main	config.guess	/^	main ()$/;"	f
+main	test/build-cxx.cc	/^main(int argc, char **argv)$/;"	f
+main	test/build-pedantic.c	/^main(void)$/;"	f
+main	test/litest-selftest.c	/^main (int argc, char **argv)$/;"	f
+main	test/litest.c	/^main(int argc, char **argv)$/;"	f
+main	tools/event-debug.c	/^main(int argc, char **argv)$/;"	f
+main	tools/event-gui.c	/^main(int argc, char *argv[])$/;"	f
+main	tools/libinput-list-devices.c	/^main(int argc, char **argv)$/;"	f
+main	tools/ptraccel-debug.c	/^main(int argc, char **argv)$/;"	f
+main	udev/libinput-device-group.c	/^int main(int argc, char **argv)$/;"	f
+main	udev/libinput-model-quirks.c	/^int main(int argc, char **argv)$/;"	f
+mainloop	tools/event-debug.c	/^mainloop(struct libinput *li)$/;"	f	file:
+major	src/libinput-private.h	/^	int major, minor, orientation;$/;"	m	struct:ellipse
+make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
+map_event_cb	tools/event-gui.c	/^map_event_cb(GtkWidget *widget, GdkEvent *event, gpointer data)$/;"	f	file:
+matrix	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^struct matrix {$/;"	s
+matrix	src/libinput-util.h	/^struct matrix {$/;"	s
+matrix_from_farray6	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_from_farray6(struct matrix *m, const float values[6])$/;"	f
+matrix_from_farray6	src/libinput-util.h	/^matrix_from_farray6(struct matrix *m, const float values[6])$/;"	f
+matrix_init_identity	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_init_identity(struct matrix *m)$/;"	f
+matrix_init_identity	src/libinput-util.h	/^matrix_init_identity(struct matrix *m)$/;"	f
+matrix_init_scale	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_init_scale(struct matrix *m, float sx, float sy)$/;"	f
+matrix_init_scale	src/libinput-util.h	/^matrix_init_scale(struct matrix *m, float sx, float sy)$/;"	f
+matrix_init_translate	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_init_translate(struct matrix *m, float x, float y)$/;"	f
+matrix_init_translate	src/libinput-util.h	/^matrix_init_translate(struct matrix *m, float x, float y)$/;"	f
+matrix_is_identity	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_is_identity(struct matrix *m)$/;"	f
+matrix_is_identity	src/libinput-util.h	/^matrix_is_identity(struct matrix *m)$/;"	f
+matrix_mult	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_mult(struct matrix *dest,$/;"	f
+matrix_mult	src/libinput-util.h	/^matrix_mult(struct matrix *dest,$/;"	f
+matrix_mult_vec	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_mult_vec(struct matrix *m, int *x, int *y)$/;"	f
+matrix_mult_vec	src/libinput-util.h	/^matrix_mult_vec(struct matrix *m, int *x, int *y)$/;"	f
+matrix_to_farray6	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^matrix_to_farray6(const struct matrix *m, float out[6])$/;"	f
+matrix_to_farray6	src/libinput-util.h	/^matrix_to_farray6(const struct matrix *m, float out[6])$/;"	f
+max	.pc/touch-point-orientation-size.patch/src/libinput-util.h	94;"	d
+max	src/libinput-util.h	94;"	d
+max	test/litest-int.h	/^	int max[2]; \/* x\/y axis maximum *\/$/;"	m	struct:litest_device_interface
+maximum	include/linux/input.h	/^	__s32 maximum;$/;"	m	struct:input_absinfo
+merge_absinfo	.pc/fix-litest.patch/test/litest.c	/^merge_absinfo(const struct input_absinfo *orig,$/;"	f	file:
+merge_absinfo	test/litest.c	/^merge_absinfo(const struct input_absinfo *orig,$/;"	f	file:
+merge_events	.pc/fix-litest.patch/test/litest.c	/^merge_events(const int *orig, const int *override)$/;"	f	file:
+merge_events	test/litest.c	/^merge_events(const int *orig, const int *override)$/;"	f	file:
+method	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		enum libinput_config_scroll_method method;$/;"	m	struct:evdev_device::__anon6	typeref:enum:evdev_device::__anon6::libinput_config_scroll_method
+method	src/evdev-mt-touchpad.h	/^		enum libinput_config_scroll_method method;$/;"	m	struct:tp_dispatch::__anon27	typeref:enum:tp_dispatch::__anon27::libinput_config_scroll_method
+method	src/evdev.h	/^		enum libinput_config_scroll_method method;$/;"	m	struct:evdev_device::__anon36	typeref:enum:evdev_device::__anon36::libinput_config_scroll_method
+middle_emulation	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_middle_emulation *middle_emulation;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_middle_emulation
+middle_emulation	src/libinput-private.h	/^	struct libinput_device_config_middle_emulation *middle_emulation;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_middle_emulation
+middle_emulation_default	tools/libinput-list-devices.c	/^middle_emulation_default(struct libinput_device *device)$/;"	f	file:
+middlebutton	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} middlebutton;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon9
+middlebutton	src/evdev.h	/^	} middlebutton;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon39
+middlebutton	tools/shared.h	/^	int middlebutton;$/;"	m	struct:tools_options
+middlebutton_event_to_str	src/evdev-middle-button.c	/^middlebutton_event_to_str(enum evdev_middlebutton_event event)$/;"	f	file:
+middlebutton_post_event	src/evdev-middle-button.c	/^middlebutton_post_event(struct evdev_device *device,$/;"	f	file:
+middlebutton_set_state	src/evdev-middle-button.c	/^middlebutton_set_state(struct evdev_device *device,$/;"	f	file:
+middlebutton_state_error	src/evdev-middle-button.c	/^middlebutton_state_error(struct evdev_device *device,$/;"	f	file:
+middlebutton_state_to_str	src/evdev-middle-button.c	/^middlebutton_state_to_str(enum evdev_middlebutton_state state)$/;"	f	file:
+middlebutton_timer_cancel	src/evdev-middle-button.c	/^middlebutton_timer_cancel(struct evdev_device *device)$/;"	f	file:
+middlebutton_timer_set	src/evdev-middle-button.c	/^middlebutton_timer_set(struct evdev_device *device, uint64_t now)$/;"	f	file:
+millis	src/evdev-mt-touchpad.h	/^	uint64_t millis;$/;"	m	struct:tp_touch
+min	.pc/touch-point-orientation-size.patch/src/libinput-util.h	93;"	d
+min	src/libinput-util.h	93;"	d
+min	test/litest-int.h	/^	int min[2]; \/* x\/y axis minimum *\/$/;"	m	struct:litest_device_interface
+minimum	include/linux/input.h	/^	__s32 minimum;$/;"	m	struct:input_absinfo
+minor	src/libinput-private.h	/^	int major, minor, orientation;$/;"	m	struct:ellipse
+model	src/evdev-mt-touchpad.c	/^	enum touchpad_model model;$/;"	m	struct:model_lookup_t	typeref:enum:model_lookup_t::touchpad_model	file:
+model	src/evdev-mt-touchpad.h	/^	enum touchpad_model model;$/;"	m	struct:tp_dispatch	typeref:enum:tp_dispatch::touchpad_model
+model_flags	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	uint32_t model_flags;$/;"	m	struct:evdev_device
+model_flags	src/evdev.h	/^	uint32_t model_flags;$/;"	m	struct:evdev_device
+model_lookup_t	src/evdev-mt-touchpad.c	/^struct model_lookup_t {$/;"	s	file:
+model_lookup_table	src/evdev-mt-touchpad.c	/^static struct model_lookup_t model_lookup_table[] = {$/;"	v	typeref:struct:model_lookup_t	file:
+monitor_trackpoint	src/evdev-mt-touchpad.h	/^		bool monitor_trackpoint;$/;"	m	struct:tp_dispatch::__anon29
+motion_dist	src/evdev-mt-touchpad.h	/^		} motion_dist;			\/* for pinned touches *\/$/;"	m	struct:tp_dispatch::__anon23	typeref:struct:tp_dispatch::__anon23::__anon24
+motion_filter	src/filter-private.h	/^struct motion_filter {$/;"	s
+motion_filter_interface	src/filter-private.h	/^struct motion_filter_interface {$/;"	s
+move	test/litest-device-atmel-hover.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-bcm5974.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-elantech-touchpad.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-generic-singletouch.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-magic-trackpad.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-ms-surface-cover.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-nexus4-touch-screen.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-protocol-a-touch-screen.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-synaptics-st.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-synaptics-t440.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-synaptics-x1-carbon-3rd.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-synaptics.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-touch-screen.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-wacom-intuos-finger.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+move	test/litest-device-wacom-touch.c	/^static struct input_event move[] = {$/;"	v	typeref:struct:input_event	file:
+ms2us	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^ms2us(uint64_t ms)$/;"	f
+ms2us	src/libinput-util.h	/^ms2us(uint64_t ms)$/;"	f
+msg	tools/event-gui.c	/^msg(const char *fmt, ...)$/;"	f	file:
+msleep	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^msleep(unsigned int ms)$/;"	f
+msleep	src/libinput-util.h	/^msleep(unsigned int ms)$/;"	f
+mt	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} mt;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon5
+mt	src/evdev.h	/^	} mt;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon35
+mt_slot	.pc/touch-point-orientation-size.patch/src/evdev.h	/^struct mt_slot {$/;"	s
+mt_slot	src/evdev.h	/^struct mt_slot {$/;"	s
+mtdev	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct mtdev *mtdev;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::mtdev
+mtdev	src/evdev.h	/^	struct mtdev *mtdev;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::mtdev
+multitap_last_time	src/evdev-mt-touchpad.h	/^		uint64_t multitap_last_time;$/;"	m	struct:tp_dispatch::__anon28
+name	.pc/fix-litest.patch/test/litest.c	/^	char *name;$/;"	m	struct:suite	file:
+name	.pc/fix-litest.patch/test/litest.c	/^	char *name;$/;"	m	struct:test	file:
+name	.pc/touch-point-orientation-size.patch/src/evdev.c	/^	const char *name;$/;"	m	struct:evdev_udev_tag_match	file:
+name	src/evdev.c	/^	const char *name;$/;"	m	struct:evdev_udev_tag_match	file:
+name	test/litest-int.h	/^       const char *name;$/;"	m	struct:litest_test_device
+name	test/litest.c	/^	char *name;$/;"	m	struct:suite	file:
+name	test/litest.c	/^	char *name;$/;"	m	struct:test	file:
+nat_scroll_default	tools/libinput-list-devices.c	/^nat_scroll_default(struct libinput_device *device)$/;"	f	file:
+natural_scroll	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_natural_scroll *natural_scroll;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_natural_scroll
+natural_scroll	src/libinput-private.h	/^	struct libinput_device_config_natural_scroll *natural_scroll;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_natural_scroll
+natural_scroll	tools/shared.h	/^	int natural_scroll;$/;"	m	struct:tools_options
+natural_scrolling_enabled	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool natural_scrolling_enabled;$/;"	m	struct:evdev_device::__anon6
+natural_scrolling_enabled	src/evdev.h	/^		bool natural_scrolling_enabled;$/;"	m	struct:evdev_device::__anon36
+next	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	struct list *next;$/;"	m	struct:list	typeref:struct:list::list
+next	src/libinput-util.h	/^	struct list *next;$/;"	m	struct:list	typeref:struct:list::list
+nfingers	tools/event-gui.c	/^		int nfingers;$/;"	m	struct:window::__anon1	file:
+nfingers	tools/event-gui.c	/^		int nfingers;$/;"	m	struct:window::__anon2	file:
+nfingers_down	src/evdev-mt-touchpad.h	/^	unsigned int nfingers_down;		\/* number of fingers down *\/$/;"	m	struct:tp_dispatch
+node	.pc/fix-litest.patch/test/litest.c	/^	struct list node;$/;"	m	struct:suite	typeref:struct:suite::list	file:
+node	.pc/fix-litest.patch/test/litest.c	/^	struct list node;$/;"	m	struct:test	typeref:struct:test::list	file:
+node	test/litest.c	/^	struct list node;$/;"	m	struct:suite	typeref:struct:suite::list	file:
+node	test/litest.c	/^	struct list node;$/;"	m	struct:test	typeref:struct:test::list	file:
+nonpointer_rel_limit	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct ratelimit nonpointer_rel_limit; \/* ratelimit for REL_* events from non-pointer devices *\/$/;"	m	struct:evdev_device	typeref:struct:evdev_device::ratelimit
+nonpointer_rel_limit	src/evdev.h	/^	struct ratelimit nonpointer_rel_limit; \/* ratelimit for REL_* events from non-pointer devices *\/$/;"	m	struct:evdev_device	typeref:struct:evdev_device::ratelimit
+normalize_delta	.pc/touch-point-orientation-size.patch/src/evdev.c	/^normalize_delta(struct evdev_device *device,$/;"	f	file:
+normalize_delta	src/evdev.c	/^normalize_delta(struct evdev_device *device,$/;"	f	file:
+normalized_coords	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^struct normalized_coords {$/;"	s
+normalized_coords	src/libinput-private.h	/^struct normalized_coords {$/;"	s
+normalized_get_direction	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^normalized_get_direction(struct normalized_coords norm)$/;"	f
+normalized_get_direction	src/libinput-private.h	/^normalized_get_direction(struct normalized_coords norm)$/;"	f
+normalized_is_zero	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^normalized_is_zero(struct normalized_coords norm)$/;"	f
+normalized_is_zero	src/libinput-private.h	/^normalized_is_zero(struct normalized_coords norm)$/;"	f
+normalized_length	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^normalized_length(struct normalized_coords norm)$/;"	f
+normalized_length	src/libinput-private.h	/^normalized_length(struct normalized_coords norm)$/;"	f
+notify_added_device	.pc/touch-point-orientation-size.patch/src/libinput.c	/^notify_added_device(struct libinput_device *device)$/;"	f
+notify_added_device	src/libinput.c	/^notify_added_device(struct libinput_device *device)$/;"	f
+notify_func	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void (*notify_func)(uint64_t time, struct libinput_event *ev, void *notify_func_data);$/;"	m	struct:libinput_event_listener
+notify_func	src/libinput-private.h	/^	void (*notify_func)(uint64_t time, struct libinput_event *ev, void *notify_func_data);$/;"	m	struct:libinput_event_listener
+notify_func_data	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void *notify_func_data;$/;"	m	struct:libinput_event_listener
+notify_func_data	src/libinput-private.h	/^	void *notify_func_data;$/;"	m	struct:libinput_event_listener
+notify_removed_device	.pc/touch-point-orientation-size.patch/src/libinput.c	/^notify_removed_device(struct libinput_device *device)$/;"	f
+notify_removed_device	src/libinput.c	/^notify_removed_device(struct libinput_device *device)$/;"	f
+ns2us	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^ns2us(uint64_t ns)$/;"	f
+ns2us	src/libinput-util.h	/^ns2us(uint64_t ns)$/;"	f
+ntouches	src/evdev-mt-touchpad.h	/^	unsigned int ntouches;			\/* no slots inc. fakes *\/$/;"	m	struct:tp_dispatch
+ntouches_down	test/litest.h	/^	int ntouches_down;$/;"	m	struct:litest_device
+num	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	unsigned int num;$/;"	m	struct:ratelimit
+num	src/libinput-util.h	/^	unsigned int num;$/;"	m	struct:ratelimit
+num_slots	src/evdev-mt-touchpad.h	/^	unsigned int num_slots;			\/* number of slots *\/$/;"	m	struct:tp_dispatch
+offset	include/linux/input.h	/^	__s16 offset;$/;"	m	struct:ff_periodic_effect
+old_nfingers_down	src/evdev-mt-touchpad.h	/^	unsigned int old_nfingers_down;		\/* previous no fingers down *\/$/;"	m	struct:tp_dispatch
+old_state	src/evdev-mt-touchpad.h	/^		uint32_t old_state;$/;"	m	struct:tp_dispatch::__anon23
+open_device	tools/shared.c	/^open_device(const struct libinput_interface *interface,$/;"	f	file:
+open_func_count	test/path.c	/^static int open_func_count = 0;$/;"	v	file:
+open_restricted	.pc/fix-litest.patch/test/litest.c	/^open_restricted(const char *path, int flags, void *userdata)$/;"	f	file:
+open_restricted	.pc/touch-point-orientation-size.patch/src/libinput.c	/^open_restricted(struct libinput *libinput,$/;"	f
+open_restricted	.pc/touch-point-orientation-size.patch/src/libinput.h	/^	int (*open_restricted)(const char *path, int flags, void *user_data);$/;"	m	struct:libinput_interface
+open_restricted	src/libinput.c	/^open_restricted(struct libinput *libinput,$/;"	f
+open_restricted	src/libinput.h	/^	int (*open_restricted)(const char *path, int flags, void *user_data);$/;"	m	struct:libinput_interface
+open_restricted	test/litest.c	/^open_restricted(const char *path, int flags, void *userdata)$/;"	f	file:
+open_restricted	test/log.c	/^static int open_restricted(const char *path, int flags, void *data)$/;"	f	file:
+open_restricted	test/misc.c	/^static int open_restricted(const char *path, int flags, void *data)$/;"	f	file:
+open_restricted	test/path.c	/^static int open_restricted(const char *path, int flags, void *data)$/;"	f	file:
+open_restricted	test/udev.c	/^static int open_restricted(const char *path, int flags, void *data)$/;"	f	file:
+open_restricted	tools/shared.c	/^open_restricted(const char *path, int flags, void *user_data)$/;"	f	file:
+open_udev	tools/shared.c	/^open_udev(const struct libinput_interface *interface,$/;"	f	file:
+options	tools/shared.c	/^enum options {$/;"	g	file:
+options	tools/shared.h	/^	struct tools_options options;$/;"	m	struct:tools_context	typeref:struct:tools_context::tools_options
+orientation	src/libinput-private.h	/^	int major, minor, orientation;$/;"	m	struct:ellipse
+output_name	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	char *output_name;$/;"	m	struct:evdev_device
+output_name	src/evdev.h	/^	char *output_name;$/;"	m	struct:evdev_device
+owns_context	test/litest.h	/^	bool owns_context;$/;"	m	struct:litest_device
+palm	src/evdev-mt-touchpad.h	/^	} palm;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon29
+palm	src/evdev-mt-touchpad.h	/^	} palm;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon18
+parse_dimension_property	src/libinput-util.c	/^parse_dimension_property(const char *prop, size_t *w, size_t *h)$/;"	f
+parse_mouse_dpi_property	src/libinput-util.c	/^parse_mouse_dpi_property(const char *prop)$/;"	f
+parse_mouse_wheel_click_angle_property	src/libinput-util.c	/^parse_mouse_wheel_click_angle_property(const char *prop)$/;"	f
+parse_trackpoint_accel_property	src/libinput-util.c	/^parse_trackpoint_accel_property(const char *prop)$/;"	f
+parser_test	test/misc.c	/^struct parser_test {$/;"	s	file:
+parser_test_dimension	test/misc.c	/^struct parser_test_dimension {$/;"	s	file:
+parser_test_float	test/misc.c	/^struct parser_test_float {$/;"	s	file:
+path_create_device	src/path.c	/^path_create_device(struct libinput *libinput,$/;"	f	file:
+path_device	src/path.h	/^struct path_device {$/;"	s
+path_device_change_seat	src/path.c	/^path_device_change_seat(struct libinput_device *device,$/;"	f	file:
+path_device_enable	src/path.c	/^path_device_enable(struct path_input *input,$/;"	f	file:
+path_disable_device	src/path.c	/^path_disable_device(struct libinput *libinput,$/;"	f	file:
+path_input	src/path.h	/^struct path_input {$/;"	s
+path_input_destroy	src/path.c	/^path_input_destroy(struct libinput *input)$/;"	f	file:
+path_input_disable	src/path.c	/^path_input_disable(struct libinput *libinput)$/;"	f	file:
+path_input_enable	src/path.c	/^path_input_enable(struct libinput *libinput)$/;"	f	file:
+path_list	src/path.h	/^	struct list path_list;$/;"	m	struct:path_input	typeref:struct:path_input::list
+path_seat	src/path.h	/^struct path_seat {$/;"	s
+path_seat_create	src/path.c	/^path_seat_create(struct path_input *input,$/;"	f	file:
+path_seat_destroy	src/path.c	/^path_seat_destroy(struct libinput_seat *seat)$/;"	f	file:
+path_seat_get_named	src/path.c	/^path_seat_get_named(struct path_input *input,$/;"	f	file:
+pending_event	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	enum evdev_event_type pending_event;$/;"	m	struct:evdev_device	typeref:enum:evdev_device::evdev_event_type
+pending_event	src/evdev.h	/^	enum evdev_event_type pending_event;$/;"	m	struct:evdev_device	typeref:enum:evdev_device::evdev_event_type
+period	include/linux/input.h	/^	__u16 period;$/;"	m	struct:ff_periodic_effect
+periodic	include/linux/input.h	/^		struct ff_periodic_effect periodic;$/;"	m	union:ff_effect::__anon41	typeref:struct:ff_effect::__anon41::ff_periodic_effect
+phase	include/linux/input.h	/^	__u16 phase;$/;"	m	struct:ff_periodic_effect
+physical_name	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	char *physical_name;$/;"	m	struct:libinput_seat
+physical_name	src/libinput-private.h	/^	char *physical_name;$/;"	m	struct:libinput_seat
+pinch	tools/event-gui.c	/^	} pinch;$/;"	m	struct:window	typeref:struct:window::__anon2	file:
+pinned	src/evdev-mt-touchpad.h	/^	} pinned;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon14
+point	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct device_coords point;$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::device_coords
+point	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct device_coords point;$/;"	m	struct:mt_slot	typeref:struct:mt_slot::device_coords
+point	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	struct device_coords point;$/;"	m	struct:libinput_event_touch	typeref:struct:libinput_event_touch::device_coords	file:
+point	src/evdev-mt-touchpad.h	/^	struct device_coords point;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::device_coords
+point	src/evdev.h	/^		struct device_coords point;$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::device_coords
+point	src/evdev.h	/^	struct device_coords point;$/;"	m	struct:mt_slot	typeref:struct:mt_slot::device_coords
+point	src/libinput.c	/^	struct device_coords point;$/;"	m	struct:libinput_event_touch	typeref:struct:libinput_event_touch::device_coords	file:
+pointer	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} pointer;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon7
+pointer	src/evdev.h	/^	} pointer;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon37
+pointer_accel_profile_linear	src/filter.c	/^pointer_accel_profile_linear(struct motion_filter *filter,$/;"	f
+pointer_accel_profile_linear_low_dpi	src/filter.c	/^pointer_accel_profile_linear_low_dpi(struct motion_filter *filter,$/;"	f
+pointer_accelerator	src/filter.c	/^struct pointer_accelerator {$/;"	s	file:
+pointer_notify_axis	.pc/touch-point-orientation-size.patch/src/libinput.c	/^pointer_notify_axis(struct libinput_device *device,$/;"	f
+pointer_notify_axis	src/libinput.c	/^pointer_notify_axis(struct libinput_device *device,$/;"	f
+pointer_notify_button	.pc/touch-point-orientation-size.patch/src/libinput.c	/^pointer_notify_button(struct libinput_device *device,$/;"	f
+pointer_notify_button	src/libinput.c	/^pointer_notify_button(struct libinput_device *device,$/;"	f
+pointer_notify_motion	.pc/touch-point-orientation-size.patch/src/libinput.c	/^pointer_notify_motion(struct libinput_device *device,$/;"	f
+pointer_notify_motion	src/libinput.c	/^pointer_notify_motion(struct libinput_device *device,$/;"	f
+pointer_notify_motion_absolute	.pc/touch-point-orientation-size.patch/src/libinput.c	/^pointer_notify_motion_absolute(struct libinput_device *device,$/;"	f
+pointer_notify_motion_absolute	src/libinput.c	/^pointer_notify_motion_absolute(struct libinput_device *device,$/;"	f
+pointer_tracker	src/filter.c	/^struct pointer_tracker {$/;"	s	file:
+post_base_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^post_base_event(struct libinput_device *device,$/;"	f	file:
+post_base_event	src/libinput.c	/^post_base_event(struct libinput_device *device,$/;"	f	file:
+post_device_event	.pc/touch-point-orientation-size.patch/src/libinput.c	/^post_device_event(struct libinput_device *device,$/;"	f	file:
+post_device_event	src/libinput.c	/^post_device_event(struct libinput_device *device,$/;"	f	file:
+pressure	src/evdev-mt-touchpad.h	/^	int pressure;$/;"	m	struct:tp_touch
+pressure	src/evdev.h	/^	int32_t pressure;$/;"	m	struct:mt_slot
+pressure	src/libinput.c	/^	int32_t pressure;$/;"	m	struct:libinput_event_touch	file:
+prev	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	struct list *prev;$/;"	m	struct:list	typeref:struct:list::list
+prev	src/libinput-util.h	/^	struct list *prev;$/;"	m	struct:list	typeref:struct:list::list
+prev_scale	src/evdev-mt-touchpad.h	/^		double prev_scale;$/;"	m	struct:tp_dispatch::__anon22
+print_absmotion_event	tools/event-debug.c	/^print_absmotion_event(struct libinput_event *ev)$/;"	f	file:
+print_accel_func	tools/ptraccel-debug.c	/^print_accel_func(struct motion_filter *filter, accel_profile_func_t profile)$/;"	f	file:
+print_axis_event	tools/event-debug.c	/^print_axis_event(struct libinput_event *ev)$/;"	f	file:
+print_button_event	tools/event-debug.c	/^print_button_event(struct libinput_event *ev)$/;"	f	file:
+print_device_notify	tools/event-debug.c	/^print_device_notify(struct libinput_event *ev)$/;"	f	file:
+print_device_notify	tools/libinput-list-devices.c	/^print_device_notify(struct libinput_event *ev)$/;"	f	file:
+print_event_header	tools/event-debug.c	/^print_event_header(struct libinput_event *ev)$/;"	f	file:
+print_event_time	tools/event-debug.c	/^print_event_time(uint32_t time)$/;"	f	file:
+print_gesture_event_with_coords	tools/event-debug.c	/^print_gesture_event_with_coords(struct libinput_event *ev)$/;"	f	file:
+print_gesture_event_without_coords	tools/event-debug.c	/^print_gesture_event_without_coords(struct libinput_event *ev)$/;"	f	file:
+print_key_event	tools/event-debug.c	/^print_key_event(struct libinput_event *ev)$/;"	f	file:
+print_motion_event	tools/event-debug.c	/^print_motion_event(struct libinput_event *ev)$/;"	f	file:
+print_ptraccel_deltas	tools/ptraccel-debug.c	/^print_ptraccel_deltas(struct motion_filter *filter, double step)$/;"	f	file:
+print_ptraccel_movement	tools/ptraccel-debug.c	/^print_ptraccel_movement(struct motion_filter *filter,$/;"	f	file:
+print_ptraccel_sequence	tools/ptraccel-debug.c	/^print_ptraccel_sequence(struct motion_filter *filter,$/;"	f	file:
+print_touch_event_with_coords	tools/event-debug.c	/^print_touch_event_with_coords(struct libinput_event *ev)$/;"	f	file:
+print_touch_event_without_coords	tools/event-debug.c	/^print_touch_event_without_coords(struct libinput_event *ev)$/;"	f	file:
+print_usage	test-driver	/^print_usage ()$/;"	f
+process	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*process)(struct evdev_dispatch *dispatch,$/;"	m	struct:evdev_dispatch_interface
+process	src/evdev.h	/^	void (*process)(struct evdev_dispatch *dispatch,$/;"	m	struct:evdev_dispatch_interface
+process_events_count_devices	test/udev.c	/^process_events_count_devices(struct libinput *li, int *device_count)$/;"	f	file:
+product	include/linux/input.h	/^	__u16 product;$/;"	m	struct:input_id
+product_end	src/evdev-mt-touchpad.c	/^	uint16_t product_end;$/;"	m	struct:model_lookup_t	file:
+product_start	src/evdev-mt-touchpad.c	/^	uint16_t product_start;$/;"	m	struct:model_lookup_t	file:
+profile	src/filter.c	/^	accel_profile_func_t profile;$/;"	m	struct:pointer_accelerator	file:
+program_details	missing	/^program_details ()$/;"	f
+prop_value	udev/libinput-model-quirks.c	/^prop_value(struct udev_device *device,$/;"	f	file:
+prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
+queued	src/evdev-mt-touchpad.h	/^	enum touchpad_event queued;$/;"	m	struct:tp_dispatch	typeref:enum:tp_dispatch::touchpad_event
+quirks	src/evdev-mt-touchpad.h	/^	} quirks;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon12
+r	tools/event-gui.c	/^	int l, m, r;$/;"	m	struct:window	file:
+ramp	include/linux/input.h	/^		struct ff_ramp_effect ramp;$/;"	m	union:ff_effect::__anon41	typeref:struct:ff_effect::__anon41::ff_ramp_effect
+range	test/litest.h	/^struct range {$/;"	s
+ratelimit	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^struct ratelimit {$/;"	s
+ratelimit	src/libinput-util.h	/^struct ratelimit {$/;"	s
+ratelimit_init	src/libinput-util.c	/^ratelimit_init(struct ratelimit *r, uint64_t ival_us, unsigned int burst)$/;"	f
+ratelimit_state	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^enum ratelimit_state {$/;"	g
+ratelimit_state	src/libinput-util.h	/^enum ratelimit_state {$/;"	g
+ratelimit_test	src/libinput-util.c	/^ratelimit_test(struct ratelimit *r)$/;"	f
+refcount	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput
+refcount	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput_device
+refcount	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput_device_group
+refcount	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput_seat
+refcount	src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput
+refcount	src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput_device
+refcount	src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput_device_group
+refcount	src/libinput-private.h	/^	int refcount;$/;"	m	struct:libinput_seat
+rel	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct device_coords rel;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::device_coords
+rel	src/evdev.h	/^	struct device_coords rel;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::device_coords
+release_pressed_keys	.pc/touch-point-orientation-size.patch/src/evdev.c	/^release_pressed_keys(struct evdev_device *device)$/;"	f	file:
+release_pressed_keys	src/evdev.c	/^release_pressed_keys(struct evdev_device *device)$/;"	f	file:
+remove	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*remove)(struct evdev_dispatch *dispatch);$/;"	m	struct:evdev_dispatch_interface
+remove	src/evdev.h	/^	void (*remove)(struct evdev_dispatch *dispatch);$/;"	m	struct:evdev_dispatch_interface
+replay	include/linux/input.h	/^	struct ff_replay replay;$/;"	m	struct:ff_effect	typeref:struct:ff_effect::ff_replay
+reports_distance	src/evdev-mt-touchpad.h	/^	bool reports_distance;			\/* does the device support true hovering *\/$/;"	m	struct:tp_dispatch
+require_event_type	.pc/touch-point-orientation-size.patch/src/libinput.c	40;"	d	file:
+require_event_type	src/libinput.c	40;"	d	file:
+reset_motion_history	src/evdev-mt-touchpad.h	/^		bool reset_motion_history;$/;"	m	struct:tp_touch::__anon12
+resolution	include/linux/input.h	/^	__s32 resolution;$/;"	m	struct:input_absinfo
+restart	src/filter-private.h	/^	void (*restart)(struct motion_filter *filter,$/;"	m	struct:motion_filter_interface
+resume	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int (*resume)(struct libinput *libinput);$/;"	m	struct:libinput_interface_backend
+resume	src/libinput-private.h	/^	int (*resume)(struct libinput *libinput);$/;"	m	struct:libinput_interface_backend
+right_coeff	include/linux/input.h	/^	__s16 right_coeff;$/;"	m	struct:ff_condition_effect
+right_edge	src/evdev-mt-touchpad.h	/^		int32_t right_edge;		\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon27
+right_edge	src/evdev-mt-touchpad.h	/^		int32_t right_edge;		\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon29
+right_saturation	include/linux/input.h	/^	__u16 right_saturation;$/;"	m	struct:ff_condition_effect
+rightbutton_left_edge	src/evdev-mt-touchpad.h	/^			int32_t rightbutton_left_edge; \/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon23::__anon25
+rightbutton_left_edge	src/evdev-mt-touchpad.h	/^			int32_t rightbutton_left_edge; \/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon23::__anon26
+rumble	include/linux/input.h	/^		struct ff_rumble_effect rumble;$/;"	m	union:ff_effect::__anon41	typeref:struct:ff_effect::__anon41::ff_rumble_effect
+s2us	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^s2us(uint64_t s)$/;"	f
+s2us	src/libinput-util.h	/^s2us(uint64_t s)$/;"	f
+samples	src/evdev-mt-touchpad.h	/^		struct device_coords samples[TOUCHPAD_HISTORY_LENGTH];$/;"	m	struct:tp_touch::__anon13	typeref:struct:tp_touch::__anon13::device_coords
+scale	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	double scale;$/;"	m	struct:libinput_event_gesture	file:
+scale	src/libinput.c	/^	double scale;$/;"	m	struct:libinput_event_gesture	file:
+scale	tools/event-gui.c	/^		double scale;$/;"	m	struct:window::__anon2	file:
+scale_axis	.pc/touch-point-orientation-size.patch/src/evdev.c	/^scale_axis(const struct input_absinfo *absinfo, double val, double to_range)$/;"	f	file:
+scale_axis	src/evdev.c	/^scale_axis(const struct input_absinfo *absinfo, double val, double to_range)$/;"	f	file:
+scancode	include/linux/input.h	/^	__u8  scancode[32];$/;"	m	struct:input_keymap_entry
+screen_height	tools/event-debug.c	/^static const uint32_t screen_height = 100;$/;"	v	file:
+screen_width	tools/event-debug.c	/^static const uint32_t screen_width = 100;$/;"	v	file:
+scroll	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} scroll;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon6
+scroll	src/evdev-mt-touchpad.h	/^	} scroll;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon27
+scroll	src/evdev-mt-touchpad.h	/^	} scroll;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon17
+scroll	src/evdev.h	/^	} scroll;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::__anon36
+scroll_button	tools/shared.h	/^	int scroll_button;$/;"	m	struct:tools_options
+scroll_defaults	tools/libinput-list-devices.c	/^scroll_defaults(struct libinput_device *device)$/;"	f	file:
+scroll_event	src/evdev-mt-touchpad-edge-scroll.c	/^enum scroll_event {$/;"	g	file:
+scroll_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_scroll_method *scroll_method;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_scroll_method
+scroll_method	src/libinput-private.h	/^	struct libinput_device_config_scroll_method *scroll_method;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_scroll_method
+scroll_method	tools/shared.h	/^	enum libinput_config_scroll_method scroll_method;$/;"	m	struct:tools_options	typeref:enum:tools_options::libinput_config_scroll_method
+seat	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_seat *seat;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::libinput_seat
+seat	src/libinput-private.h	/^	struct libinput_seat *seat;$/;"	m	struct:libinput_device	typeref:struct:libinput_device::libinput_seat
+seat	tools/shared.h	/^	const char *seat; \/* if backend is BACKEND_UDEV *\/$/;"	m	struct:tools_options
+seat_button_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint32_t seat_button_count;$/;"	m	struct:libinput_event_pointer	file:
+seat_button_count	src/libinput.c	/^	uint32_t seat_button_count;$/;"	m	struct:libinput_event_pointer	file:
+seat_caps	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	enum evdev_device_seat_capability seat_caps;$/;"	m	struct:evdev_device	typeref:enum:evdev_device::evdev_device_seat_capability
+seat_caps	src/evdev.h	/^	enum evdev_device_seat_capability seat_caps;$/;"	m	struct:evdev_device	typeref:enum:evdev_device::evdev_device_seat_capability
+seat_id	src/udev-seat.h	/^	char *seat_id;$/;"	m	struct:udev_input
+seat_key_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint32_t seat_key_count;$/;"	m	struct:libinput_event_keyboard	file:
+seat_key_count	src/libinput.c	/^	uint32_t seat_key_count;$/;"	m	struct:libinput_event_keyboard	file:
+seat_list	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list seat_list;$/;"	m	struct:libinput	typeref:struct:libinput::list
+seat_list	src/libinput-private.h	/^	struct list seat_list;$/;"	m	struct:libinput	typeref:struct:libinput::list
+seat_slot	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		int32_t seat_slot;$/;"	m	struct:evdev_device::__anon4
+seat_slot	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	int32_t seat_slot;$/;"	m	struct:mt_slot
+seat_slot	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	int32_t seat_slot;$/;"	m	struct:libinput_event_touch	file:
+seat_slot	src/evdev.h	/^		int32_t seat_slot;$/;"	m	struct:evdev_device::__anon34
+seat_slot	src/evdev.h	/^	int32_t seat_slot;$/;"	m	struct:mt_slot
+seat_slot	src/libinput.c	/^	int32_t seat_slot;$/;"	m	struct:libinput_event_touch	file:
+semi_mt	src/evdev-mt-touchpad.h	/^	bool semi_mt;$/;"	m	struct:tp_dispatch
+send_abs_mt_xy	.pc/fix-litest.patch/test/litest.c	/^send_abs_mt_xy(struct litest_device *d, double x, double y)$/;"	f	file:
+send_abs_mt_xy	test/litest.c	/^send_abs_mt_xy(struct litest_device *d, double x, double y)$/;"	f	file:
+send_abs_xy	.pc/fix-litest.patch/test/litest.c	/^send_abs_xy(struct litest_device *d, double x, double y)$/;"	f	file:
+send_abs_xy	test/litest.c	/^send_abs_xy(struct litest_device *d, double x, double y)$/;"	f	file:
+send_btntool	.pc/fix-litest.patch/test/litest.c	/^send_btntool(struct litest_device *d)$/;"	f	file:
+send_btntool	test/litest.c	/^send_btntool(struct litest_device *d)$/;"	f	file:
+sendevents	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	} sendevents;$/;"	m	struct:evdev_dispatch	typeref:struct:evdev_dispatch::__anon10
+sendevents	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_send_events *sendevents;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_send_events
+sendevents	src/evdev-mt-touchpad.h	/^	} sendevents;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon30
+sendevents	src/evdev.h	/^	} sendevents;$/;"	m	struct:evdev_dispatch	typeref:struct:evdev_dispatch::__anon40
+sendevents	src/libinput-private.h	/^	struct libinput_device_config_send_events *sendevents;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_send_events
+set	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set)($/;"	m	struct:libinput_device_config_middle_emulation	typeref:enum:libinput_device_config_middle_emulation::set
+set	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set)(struct libinput_device *device, int left_handed);$/;"	m	struct:libinput_device_config_left_handed	typeref:enum:libinput_device_config_left_handed::set
+set	src/libinput-private.h	/^	enum libinput_config_status (*set)($/;"	m	struct:libinput_device_config_middle_emulation	typeref:enum:libinput_device_config_middle_emulation::set
+set	src/libinput-private.h	/^	enum libinput_config_status (*set)(struct libinput_device *device, int left_handed);$/;"	m	struct:libinput_device_config_left_handed	typeref:enum:libinput_device_config_left_handed::set
+set_base_from	depcomp	/^set_base_from ()$/;"	f
+set_button	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_button)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::set_button
+set_button	src/libinput-private.h	/^	enum libinput_config_status (*set_button)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::set_button
+set_dir_from	depcomp	/^set_dir_from ()$/;"	f
+set_draglock_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_draglock_enabled)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::set_draglock_enabled
+set_draglock_enabled	src/libinput-private.h	/^	enum libinput_config_status (*set_draglock_enabled)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::set_draglock_enabled
+set_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_enabled)($/;"	m	struct:libinput_device_config_dwt	typeref:enum:libinput_device_config_dwt::set_enabled
+set_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_enabled)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_natural_scroll	typeref:enum:libinput_device_config_natural_scroll::set_enabled
+set_enabled	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_enabled)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::set_enabled
+set_enabled	src/libinput-private.h	/^	enum libinput_config_status (*set_enabled)($/;"	m	struct:libinput_device_config_dwt	typeref:enum:libinput_device_config_dwt::set_enabled
+set_enabled	src/libinput-private.h	/^	enum libinput_config_status (*set_enabled)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_natural_scroll	typeref:enum:libinput_device_config_natural_scroll::set_enabled
+set_enabled	src/libinput-private.h	/^	enum libinput_config_status (*set_enabled)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_tap	typeref:enum:libinput_device_config_tap::set_enabled
+set_matrix	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_matrix)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_calibration	typeref:enum:libinput_device_config_calibration::set_matrix
+set_matrix	src/libinput-private.h	/^	enum libinput_config_status (*set_matrix)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_calibration	typeref:enum:libinput_device_config_calibration::set_matrix
+set_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_method)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_click_method	typeref:enum:libinput_device_config_click_method::set_method
+set_method	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_method)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::set_method
+set_method	src/libinput-private.h	/^	enum libinput_config_status (*set_method)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_click_method	typeref:enum:libinput_device_config_click_method::set_method
+set_method	src/libinput-private.h	/^	enum libinput_config_status (*set_method)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_scroll_method	typeref:enum:libinput_device_config_scroll_method::set_method
+set_mode	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_mode)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_send_events	typeref:enum:libinput_device_config_send_events::set_mode
+set_mode	src/libinput-private.h	/^	enum libinput_config_status (*set_mode)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_send_events	typeref:enum:libinput_device_config_send_events::set_mode
+set_speed	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_config_status (*set_speed)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_accel	typeref:enum:libinput_device_config_accel::set_speed
+set_speed	src/filter-private.h	/^	bool (*set_speed)(struct motion_filter *filter,$/;"	m	struct:motion_filter_interface
+set_speed	src/libinput-private.h	/^	enum libinput_config_status (*set_speed)(struct libinput_device *device,$/;"	m	struct:libinput_device_config_accel	typeref:enum:libinput_device_config_accel::set_speed
+setup	test/litest-int.h	/^       void (*setup)(void); \/* test fixture, used by check *\/$/;"	m	struct:litest_test_device
+shortname	test/litest-int.h	/^       const char *shortname;$/;"	m	struct:litest_test_device
+sighandler	tools/event-debug.c	/^sighandler(int signal, siginfo_t *siginfo, void *userdata)$/;"	f	file:
+simple_interface	test/log.c	/^const struct libinput_interface simple_interface = {$/;"	v	typeref:struct:libinput_interface
+simple_interface	test/misc.c	/^const struct libinput_interface simple_interface = {$/;"	v	typeref:struct:libinput_interface
+simple_interface	test/path.c	/^const struct libinput_interface simple_interface = {$/;"	v	typeref:struct:libinput_interface
+simple_interface	test/udev.c	/^const struct libinput_interface simple_interface = {$/;"	v	typeref:struct:libinput_interface
+simple_log_handler	test/log.c	/^simple_log_handler(struct libinput *libinput,$/;"	f	file:
+skip_ev_syn	test/litest.h	/^	bool skip_ev_syn;$/;"	m	struct:litest_device
+slot	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		int slot;$/;"	m	struct:evdev_device::__anon5
+slot	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	int32_t slot;$/;"	m	struct:libinput_event_touch	file:
+slot	src/evdev-mt-touchpad.h	/^	unsigned int slot;			\/* current slot *\/$/;"	m	struct:tp_dispatch
+slot	src/evdev.h	/^		int slot;$/;"	m	struct:evdev_device::__anon35
+slot	src/libinput.c	/^	int32_t slot;$/;"	m	struct:libinput_event_touch	file:
+slot_map	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	uint32_t slot_map;$/;"	m	struct:libinput_seat
+slot_map	src/libinput-private.h	/^	uint32_t slot_map;$/;"	m	struct:libinput_seat
+slots	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct mt_slot *slots;$/;"	m	struct:evdev_device::__anon5	typeref:struct:evdev_device::__anon5::mt_slot
+slots	src/evdev.h	/^		struct mt_slot *slots;$/;"	m	struct:evdev_device::__anon35	typeref:struct:evdev_device::__anon35::mt_slot
+slots_len	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		size_t slots_len;$/;"	m	struct:evdev_device::__anon5
+slots_len	src/evdev.h	/^		size_t slots_len;$/;"	m	struct:evdev_device::__anon35
+sockets_init	tools/event-gui.c	/^sockets_init(struct libinput *li)$/;"	f	file:
+source	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct libinput_source *source;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::libinput_source
+source	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^		struct libinput_source *source;$/;"	m	struct:libinput::__anon3	typeref:struct:libinput::__anon3::libinput_source
+source	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	enum libinput_pointer_axis_source source;$/;"	m	struct:libinput_event_pointer	typeref:enum:libinput_event_pointer::libinput_pointer_axis_source	file:
+source	src/evdev.h	/^	struct libinput_source *source;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::libinput_source
+source	src/libinput-private.h	/^		struct libinput_source *source;$/;"	m	struct:libinput::__anon33	typeref:struct:libinput::__anon33::libinput_source
+source	src/libinput.c	/^	enum libinput_pointer_axis_source source;$/;"	m	struct:libinput_event_pointer	typeref:enum:libinput_event_pointer::libinput_pointer_axis_source	file:
+source_destroy_list	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct list source_destroy_list;$/;"	m	struct:libinput	typeref:struct:libinput::list
+source_destroy_list	src/libinput-private.h	/^	struct list source_destroy_list;$/;"	m	struct:libinput	typeref:struct:libinput::list
+speed	tools/shared.h	/^	double speed;$/;"	m	struct:tools_options
+speed_adjustment	src/filter-private.h	/^	double speed_adjustment; \/* normalized [-1, 1] *\/$/;"	m	struct:motion_filter
+start_level	include/linux/input.h	/^	__s16 start_level;$/;"	m	struct:ff_ramp_effect
+start_time	tools/event-debug.c	/^uint32_t start_time;$/;"	v
+started	src/evdev-mt-touchpad.h	/^		bool started;$/;"	m	struct:tp_dispatch::__anon22
+state	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		enum evdev_middlebutton_state state;$/;"	m	struct:evdev_device::__anon9	typeref:enum:evdev_device::__anon9::evdev_middlebutton_state
+state	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	enum libinput_button_state state;$/;"	m	struct:libinput_event_pointer	typeref:enum:libinput_event_pointer::libinput_button_state	file:
+state	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	enum libinput_key_state state;$/;"	m	struct:libinput_event_keyboard	typeref:enum:libinput_event_keyboard::libinput_key_state	file:
+state	src/evdev-mt-touchpad.h	/^		enum button_state state;$/;"	m	struct:tp_touch::__anon15	typeref:enum:tp_touch::__anon15::button_state
+state	src/evdev-mt-touchpad.h	/^		enum touch_palm_state state;$/;"	m	struct:tp_touch::__anon18	typeref:enum:tp_touch::__anon18::touch_palm_state
+state	src/evdev-mt-touchpad.h	/^		enum tp_tap_state state;$/;"	m	struct:tp_dispatch::__anon28	typeref:enum:tp_dispatch::__anon28::tp_tap_state
+state	src/evdev-mt-touchpad.h	/^		enum tp_tap_touch_state state;$/;"	m	struct:tp_touch::__anon16	typeref:enum:tp_touch::__anon16::tp_tap_touch_state
+state	src/evdev-mt-touchpad.h	/^		enum tp_thumb_state state;$/;"	m	struct:tp_touch::__anon20	typeref:enum:tp_touch::__anon20::tp_thumb_state
+state	src/evdev-mt-touchpad.h	/^		uint32_t state;$/;"	m	struct:tp_dispatch::__anon23
+state	src/evdev-mt-touchpad.h	/^	enum touch_state state;$/;"	m	struct:tp_touch	typeref:enum:tp_touch::touch_state
+state	src/evdev.h	/^		enum evdev_middlebutton_state state;$/;"	m	struct:evdev_device::__anon39	typeref:enum:evdev_device::__anon39::evdev_middlebutton_state
+state	src/libinput.c	/^	enum libinput_button_state state;$/;"	m	struct:libinput_event_pointer	typeref:enum:libinput_event_pointer::libinput_button_state	file:
+state	src/libinput.c	/^	enum libinput_key_state state;$/;"	m	struct:libinput_event_keyboard	typeref:enum:libinput_event_keyboard::libinput_key_state	file:
+stop	tools/event-debug.c	/^static unsigned int stop = 0;$/;"	v	file:
+streq	.pc/touch-point-orientation-size.patch/src/libinput-util.h	95;"	d
+streq	src/libinput-util.h	95;"	d
+strneq	.pc/touch-point-orientation-size.patch/src/libinput-util.h	96;"	d
+strneq	src/libinput-util.h	96;"	d
+strong_magnitude	include/linux/input.h	/^	__u16 strong_magnitude;$/;"	m	struct:ff_rumble_effect
+success	test/misc.c	/^	bool success;$/;"	m	struct:parser_test_dimension	file:
+suite	.pc/fix-litest.patch/test/litest.c	/^	Suite *suite;$/;"	m	struct:suite	file:
+suite	.pc/fix-litest.patch/test/litest.c	/^struct suite {$/;"	s	file:
+suite	test/litest.c	/^	Suite *suite;$/;"	m	struct:suite	file:
+suite	test/litest.c	/^struct suite {$/;"	s	file:
+suspend	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	void (*suspend)(struct evdev_dispatch *dispatch,$/;"	m	struct:evdev_dispatch_interface
+suspend	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void (*suspend)(struct libinput *libinput);$/;"	m	struct:libinput_interface_backend
+suspend	src/evdev.h	/^	void (*suspend)(struct evdev_dispatch *dispatch,$/;"	m	struct:evdev_dispatch_interface
+suspend	src/libinput-private.h	/^	void (*suspend)(struct libinput *libinput);$/;"	m	struct:libinput_interface_backend
+suspended	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	int suspended;$/;"	m	struct:evdev_device
+suspended	src/evdev-mt-touchpad.h	/^		bool suspended;$/;"	m	struct:tp_dispatch::__anon28
+suspended	src/evdev.h	/^	int suspended;$/;"	m	struct:evdev_device
+swipe	tools/event-gui.c	/^	} swipe;$/;"	m	struct:window	typeref:struct:window::__anon1	file:
+syn_drop_limit	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct ratelimit syn_drop_limit; \/* ratelimit for SYN_DROPPED logging *\/$/;"	m	struct:evdev_device	typeref:struct:evdev_device::ratelimit
+syn_drop_limit	src/evdev.h	/^	struct ratelimit syn_drop_limit; \/* ratelimit for SYN_DROPPED logging *\/$/;"	m	struct:evdev_device	typeref:struct:evdev_device::ratelimit
+synaptics_hover_create	test/litest-device-synaptics-hover.c	/^synaptics_hover_create(struct litest_device *d)$/;"	f	file:
+synaptics_hover_touch_down	test/litest-device-synaptics-hover.c	/^synaptics_hover_touch_down(struct litest_device *d, unsigned int slot, double x, double y)$/;"	f	file:
+synaptics_hover_touch_move	test/litest-device-synaptics-hover.c	/^synaptics_hover_touch_move(struct litest_device *d, unsigned int slot, double x, double y)$/;"	f	file:
+synaptics_hover_touch_up	test/litest-device-synaptics-hover.c	/^synaptics_hover_touch_up(struct litest_device *d, unsigned int slot)$/;"	f	file:
+tag	.pc/touch-point-orientation-size.patch/src/evdev.c	/^	enum evdev_device_udev_tags tag;$/;"	m	struct:evdev_udev_tag_match	typeref:enum:evdev_udev_tag_match::evdev_device_udev_tags	file:
+tag	src/evdev.c	/^	enum evdev_device_udev_tags tag;$/;"	m	struct:evdev_udev_tag_match	typeref:enum:evdev_udev_tag_match::evdev_device_udev_tags	file:
+tag	test/misc.c	/^	char *tag;$/;"	m	struct:parser_test	file:
+tag	test/misc.c	/^	char *tag;$/;"	m	struct:parser_test_dimension	file:
+tag	test/misc.c	/^	char *tag;$/;"	m	struct:parser_test_float	file:
+tags	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	enum evdev_device_tags tags;$/;"	m	struct:evdev_device	typeref:enum:evdev_device::evdev_device_tags
+tags	src/evdev.h	/^	enum evdev_device_tags tags;$/;"	m	struct:evdev_device	typeref:enum:evdev_device::evdev_device_tags
+tap	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	struct libinput_device_config_tap *tap;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_tap
+tap	src/evdev-mt-touchpad.h	/^	} tap;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon28
+tap	src/evdev-mt-touchpad.h	/^	} tap;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon16
+tap	src/libinput-private.h	/^	struct libinput_device_config_tap *tap;$/;"	m	struct:libinput_device_config	typeref:struct:libinput_device_config::libinput_device_config_tap
+tap_default	tools/libinput-list-devices.c	/^tap_default(struct libinput_device *device)$/;"	f	file:
+tap_event	src/evdev-mt-touchpad-tap.c	/^enum tap_event {$/;"	g	file:
+tap_event_to_str	src/evdev-mt-touchpad-tap.c	/^tap_event_to_str(enum tap_event event)$/;"	f	file:
+tap_state_to_str	src/evdev-mt-touchpad-tap.c	/^tap_state_to_str(enum tp_tap_state state)$/;"	f	file:
+tapping	tools/shared.h	/^	int tapping;$/;"	m	struct:tools_options
+tc	.pc/fix-litest.patch/test/litest.c	/^	TCase *tc;$/;"	m	struct:test	file:
+tc	test/litest.c	/^	TCase *tc;$/;"	m	struct:test	file:
+teardown	test/litest-int.h	/^       void (*teardown)(void); \/* test fixture, used by check *\/$/;"	m	struct:litest_test_device
+test	.pc/fix-litest.patch/test/litest.c	/^struct test {$/;"	s	file:
+test	test/litest.c	/^struct test {$/;"	s	file:
+test_2fg_scroll	test/touchpad.c	/^test_2fg_scroll(struct litest_device *dev, double dx, double dy, int want_sleep)$/;"	f	file:
+test_absolute_event	test/pointer.c	/^test_absolute_event(struct litest_device *dev, double x, double y)$/;"	f	file:
+test_button_event	test/pointer.c	/^test_button_event(struct litest_device *dev, unsigned int button, int state)$/;"	f	file:
+test_relative_event	test/pointer.c	/^test_relative_event(struct litest_device *dev, int dx, int dy)$/;"	f	file:
+test_unaccel_event	test/pointer.c	/^test_unaccel_event(struct litest_device *dev, int dx, int dy)$/;"	f	file:
+test_varargs_macros	configure	/^  test_varargs_macros ();$/;"	f
+test_wheel_event	test/pointer.c	/^test_wheel_event(struct litest_device *dev, int which, int amount)$/;"	f	file:
+tests	.pc/fix-litest.patch/test/litest.c	/^	struct list tests;$/;"	m	struct:suite	typeref:struct:suite::list	file:
+tests	test/litest.c	/^	struct list tests;$/;"	m	struct:suite	typeref:struct:suite::list	file:
+threshold	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		double threshold;$/;"	m	struct:evdev_device::__anon6
+threshold	src/evdev-mt-touchpad.h	/^		int threshold;$/;"	m	struct:tp_dispatch::__anon32
+threshold	src/evdev.h	/^		double threshold;$/;"	m	struct:evdev_device::__anon36
+threshold	src/filter.c	/^	double threshold;	\/* units\/us *\/$/;"	m	struct:pointer_accelerator	file:
+thumb	src/evdev-mt-touchpad.h	/^	} thumb;$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::__anon32
+thumb	src/evdev-mt-touchpad.h	/^	} thumb;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::__anon20
+thumb_state_to_str	src/evdev-mt-touchpad.c	/^thumb_state_to_str(enum tp_thumb_state state)$/;"	f	file:
+time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_gesture	file:
+time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_keyboard	file:
+time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_pointer	file:
+time	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_touch	file:
+time	include/linux/input.h	/^	struct timeval time;$/;"	m	struct:input_event	typeref:struct:input_event::timeval
+time	src/evdev-mt-touchpad.h	/^		uint64_t time; \/* first timestamp if is_palm == true *\/$/;"	m	struct:tp_touch::__anon18
+time	src/filter.c	/^	uint64_t time;  \/* us *\/$/;"	m	struct:pointer_tracker	file:
+time	src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_gesture	file:
+time	src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_keyboard	file:
+time	src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_pointer	file:
+time	src/libinput.c	/^	uint64_t time;$/;"	m	struct:libinput_event_touch	file:
+timer	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_timer timer;$/;"	m	struct:evdev_device::__anon6	typeref:struct:evdev_device::__anon6::libinput_timer
+timer	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct libinput_timer timer;$/;"	m	struct:evdev_device::__anon9	typeref:struct:evdev_device::__anon9::libinput_timer
+timer	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	} timer;$/;"	m	struct:libinput	typeref:struct:libinput::__anon3
+timer	src/evdev-mt-touchpad.h	/^		struct libinput_timer timer;$/;"	m	struct:tp_dispatch::__anon28	typeref:struct:tp_dispatch::__anon28::libinput_timer
+timer	src/evdev-mt-touchpad.h	/^		struct libinput_timer timer;$/;"	m	struct:tp_touch::__anon15	typeref:struct:tp_touch::__anon15::libinput_timer
+timer	src/evdev-mt-touchpad.h	/^		struct libinput_timer timer;$/;"	m	struct:tp_touch::__anon17	typeref:struct:tp_touch::__anon17::libinput_timer
+timer	src/evdev.h	/^		struct libinput_timer timer;$/;"	m	struct:evdev_device::__anon36	typeref:struct:evdev_device::__anon36::libinput_timer
+timer	src/evdev.h	/^		struct libinput_timer timer;$/;"	m	struct:evdev_device::__anon39	typeref:struct:evdev_device::__anon39::libinput_timer
+timer	src/libinput-private.h	/^	} timer;$/;"	m	struct:libinput	typeref:struct:libinput::__anon33
+timer_func	src/timer.h	/^	void (*timer_func)(uint64_t now, void *timer_func_data);$/;"	m	struct:libinput_timer
+timer_func_data	src/timer.h	/^	void *timer_func_data;$/;"	m	struct:libinput_timer
+tools_backend	tools/shared.h	/^enum tools_backend {$/;"	g
+tools_context	tools/shared.h	/^struct tools_context {$/;"	s
+tools_device_apply_config	tools/shared.c	/^tools_device_apply_config(struct libinput_device *device,$/;"	f
+tools_init_context	tools/shared.c	/^tools_init_context(struct tools_context *context)$/;"	f
+tools_open_backend	tools/shared.c	/^tools_open_backend(struct tools_context *context)$/;"	f
+tools_options	tools/shared.h	/^struct tools_options {$/;"	s
+tools_parse_args	tools/shared.c	/^tools_parse_args(int argc, char **argv, struct tools_context *context)$/;"	f
+tools_usage	tools/shared.c	/^tools_usage()$/;"	f
+top_area	src/evdev-mt-touchpad.h	/^		} top_area;$/;"	m	struct:tp_dispatch::__anon23	typeref:struct:tp_dispatch::__anon23::__anon26
+top_edge	src/evdev-mt-touchpad.h	/^			int32_t top_edge;	\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon23::__anon25
+touch	tools/event-gui.c	/^struct touch {$/;"	s	file:
+touch_down	test/litest-device-qemu-usb-tablet.c	/^static void touch_down(struct litest_device *d, unsigned int slot,$/;"	f	file:
+touch_down	test/litest-device-vmware-virtual-usb-mouse.c	/^static void touch_down(struct litest_device *d, unsigned int slot,$/;"	f	file:
+touch_down	test/litest-device-xen-virtual-pointer.c	/^static void touch_down(struct litest_device *d, unsigned int slot,$/;"	f	file:
+touch_down	test/litest-int.h	/^	void (*touch_down)(struct litest_device *d, unsigned int slot, double x, double y);$/;"	m	struct:litest_device_interface
+touch_down_events	test/litest-int.h	/^	struct input_event *touch_down_events;$/;"	m	struct:litest_device_interface	typeref:struct:litest_device_interface::input_event
+touch_move	test/litest-device-qemu-usb-tablet.c	/^static void touch_move(struct litest_device *d, unsigned int slot,$/;"	f	file:
+touch_move	test/litest-device-vmware-virtual-usb-mouse.c	/^static void touch_move(struct litest_device *d, unsigned int slot,$/;"	f	file:
+touch_move	test/litest-device-xen-virtual-pointer.c	/^static void touch_move(struct litest_device *d, unsigned int slot,$/;"	f	file:
+touch_move	test/litest-int.h	/^	void (*touch_move)(struct litest_device *d, unsigned int slot, double x, double y);$/;"	m	struct:litest_device_interface
+touch_move_events	test/litest-int.h	/^	struct input_event *touch_move_events;$/;"	m	struct:litest_device_interface	typeref:struct:litest_device_interface::input_event
+touch_notify_frame	.pc/touch-point-orientation-size.patch/src/libinput.c	/^touch_notify_frame(struct libinput_device *device,$/;"	f
+touch_notify_frame	src/libinput.c	/^touch_notify_frame(struct libinput_device *device,$/;"	f
+touch_notify_touch_down	.pc/touch-point-orientation-size.patch/src/libinput.c	/^touch_notify_touch_down(struct libinput_device *device,$/;"	f
+touch_notify_touch_down	src/libinput.c	/^touch_notify_touch_down(struct libinput_device *device,$/;"	f
+touch_notify_touch_motion	.pc/touch-point-orientation-size.patch/src/libinput.c	/^touch_notify_touch_motion(struct libinput_device *device,$/;"	f
+touch_notify_touch_motion	src/libinput.c	/^touch_notify_touch_motion(struct libinput_device *device,$/;"	f
+touch_notify_touch_up	.pc/touch-point-orientation-size.patch/src/libinput.c	/^touch_notify_touch_up(struct libinput_device *device,$/;"	f
+touch_notify_touch_up	src/libinput.c	/^touch_notify_touch_up(struct libinput_device *device,$/;"	f
+touch_palm_state	src/evdev-mt-touchpad.h	/^enum touch_palm_state {$/;"	g
+touch_slot_data	src/libinput-private.h	/^enum touch_slot_data {$/;"	g
+touch_state	src/evdev-mt-touchpad.h	/^enum touch_state {$/;"	g
+touch_up	test/litest-device-qemu-usb-tablet.c	/^static void touch_up(struct litest_device *d, unsigned int slot)$/;"	f	file:
+touch_up	test/litest-device-vmware-virtual-usb-mouse.c	/^static void touch_up(struct litest_device *d, unsigned int slot)$/;"	f	file:
+touch_up	test/litest-device-xen-virtual-pointer.c	/^static void touch_up(struct litest_device *d, unsigned int slot)$/;"	f	file:
+touch_up	test/litest-int.h	/^	void (*touch_up)(struct litest_device *d, unsigned int slot);$/;"	m	struct:litest_device_interface
+touch_up_events	test/litest-int.h	/^	struct input_event *touch_up_events;$/;"	m	struct:litest_device_interface	typeref:struct:litest_device_interface::input_event
+touches	src/evdev-mt-touchpad.h	/^		struct tp_touch *touches[2];$/;"	m	struct:tp_dispatch::__anon22	typeref:struct:tp_dispatch::__anon22::tp_touch
+touches	src/evdev-mt-touchpad.h	/^	struct tp_touch *touches;		\/* len == ntouches *\/$/;"	m	struct:tp_dispatch	typeref:struct:tp_dispatch::tp_touch
+touches	test/litest.h	/^	} touches[2];$/;"	m	struct:litest_semi_mt	typeref:struct:litest_semi_mt::__anon11
+touches	tools/event-gui.c	/^	struct touch touches[32];$/;"	m	struct:window	typeref:struct:window::touch	file:
+touchpad_accel_profile_linear	src/filter.c	/^touchpad_accel_profile_linear(struct motion_filter *filter,$/;"	f
+touchpad_constant_filter	src/filter.c	/^touchpad_constant_filter(struct motion_filter *filter,$/;"	f	file:
+touchpad_event	src/evdev-mt-touchpad.h	/^enum touchpad_event {$/;"	g
+touchpad_has_palm_detect_size	test/touchpad.c	/^touchpad_has_palm_detect_size(struct litest_device *dev)$/;"	f	file:
+touchpad_lenovo_x230_accel_profile	src/filter.c	/^touchpad_lenovo_x230_accel_profile(struct motion_filter *filter,$/;"	f
+touchpad_model	src/evdev-mt-touchpad.h	/^enum touchpad_model {$/;"	g
+tp	src/evdev-mt-touchpad.h	/^	struct tp_dispatch *tp;$/;"	m	struct:tp_touch	typeref:struct:tp_touch::tp_dispatch
+tp_begin_touch	src/evdev-mt-touchpad.c	/^tp_begin_touch(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_button_area_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_area_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_bottom_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_bottom_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_config_click_get_default_method	src/evdev-mt-touchpad-buttons.c	/^tp_button_config_click_get_default_method(struct libinput_device *device)$/;"	f	file:
+tp_button_config_click_get_method	src/evdev-mt-touchpad-buttons.c	/^tp_button_config_click_get_method(struct libinput_device *device)$/;"	f	file:
+tp_button_config_click_get_methods	src/evdev-mt-touchpad-buttons.c	/^tp_button_config_click_get_methods(struct libinput_device *device)$/;"	f	file:
+tp_button_config_click_set_method	src/evdev-mt-touchpad-buttons.c	/^tp_button_config_click_set_method(struct libinput_device *device,$/;"	f	file:
+tp_button_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_handle_state	src/evdev-mt-touchpad-buttons.c	/^tp_button_handle_state(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_button_handle_timeout	src/evdev-mt-touchpad-buttons.c	/^tp_button_handle_timeout(uint64_t now, void *data)$/;"	f	file:
+tp_button_ignore_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_ignore_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_is_inside_softbutton_area	src/evdev-mt-touchpad-buttons.c	/^tp_button_is_inside_softbutton_area(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f
+tp_button_none_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_none_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_set_enter_timer	src/evdev-mt-touchpad-buttons.c	/^tp_button_set_enter_timer(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+tp_button_set_leave_timer	src/evdev-mt-touchpad-buttons.c	/^tp_button_set_leave_timer(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+tp_button_set_state	src/evdev-mt-touchpad-buttons.c	/^tp_button_set_state(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_top_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_top_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_top_new_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_top_new_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_top_to_ignore_handle_event	src/evdev-mt-touchpad-buttons.c	/^tp_button_top_to_ignore_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_button_touch_active	src/evdev-mt-touchpad-buttons.c	/^tp_button_touch_active(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f
+tp_change_to_left_handed	src/evdev-mt-touchpad.c	/^tp_change_to_left_handed(struct evdev_device *device)$/;"	f	file:
+tp_check_clickfinger_distance	src/evdev-mt-touchpad-buttons.c	/^tp_check_clickfinger_distance(struct tp_dispatch *tp,$/;"	f	file:
+tp_clear_state	src/evdev-mt-touchpad.c	/^tp_clear_state(struct tp_dispatch *tp)$/;"	f	file:
+tp_click_get_default_method	src/evdev-mt-touchpad-buttons.c	/^tp_click_get_default_method(struct tp_dispatch *tp)$/;"	f	file:
+tp_clickfinger_set_button	src/evdev-mt-touchpad-buttons.c	/^tp_clickfinger_set_button(struct tp_dispatch *tp)$/;"	f	file:
+tp_current_touch	src/evdev-mt-touchpad.c	/^tp_current_touch(struct tp_dispatch *tp)$/;"	f	file:
+tp_dispatch	src/evdev-mt-touchpad.h	/^struct tp_dispatch {$/;"	s
+tp_drag_lock_default	src/evdev-mt-touchpad-tap.c	/^tp_drag_lock_default(struct evdev_device *device)$/;"	f	file:
+tp_dwt_config_get	src/evdev-mt-touchpad.c	/^tp_dwt_config_get(struct libinput_device *device)$/;"	f	file:
+tp_dwt_config_get_default	src/evdev-mt-touchpad.c	/^tp_dwt_config_get_default(struct libinput_device *device)$/;"	f	file:
+tp_dwt_config_is_available	src/evdev-mt-touchpad.c	/^tp_dwt_config_is_available(struct libinput_device *device)$/;"	f	file:
+tp_dwt_config_set	src/evdev-mt-touchpad.c	/^tp_dwt_config_set(struct libinput_device *device,$/;"	f	file:
+tp_dwt_default_enabled	src/evdev-mt-touchpad.c	/^tp_dwt_default_enabled(struct tp_dispatch *tp)$/;"	f	file:
+tp_dwt_device_is_blacklisted	src/evdev-mt-touchpad.c	/^tp_dwt_device_is_blacklisted(struct evdev_device *device)$/;"	f	file:
+tp_edge	src/evdev-mt-touchpad.h	/^enum tp_edge {$/;"	g
+tp_edge_scroll_handle_area	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_area(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_handle_edge	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_edge(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_handle_edge_new	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_edge_new(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_handle_event	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_handle_none	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_none(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_handle_state	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_state(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_edge_scroll_handle_timeout	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_handle_timeout(uint64_t now, void *data)$/;"	f	file:
+tp_edge_scroll_init	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_init(struct tp_dispatch *tp, struct evdev_device *device)$/;"	f
+tp_edge_scroll_post_events	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_post_events(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_edge_scroll_set_state	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_set_state(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_set_timer	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_set_timer(struct tp_dispatch *tp,$/;"	f	file:
+tp_edge_scroll_stop_events	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_stop_events(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_edge_scroll_touch_active	src/evdev-mt-touchpad-edge-scroll.c	/^tp_edge_scroll_touch_active(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f
+tp_edge_scroll_touch_state	src/evdev-mt-touchpad.h	/^enum tp_edge_scroll_touch_state {$/;"	g
+tp_end_sequence	src/evdev-mt-touchpad.c	/^tp_end_sequence(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_end_touch	src/evdev-mt-touchpad.c	/^tp_end_touch(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_estimate_delta	src/evdev-mt-touchpad.c	/^tp_estimate_delta(int x0, int x1, int x2, int x3)$/;"	f	file:
+tp_fake_finger_count	src/evdev-mt-touchpad.c	/^tp_fake_finger_count(struct tp_dispatch *tp)$/;"	f	file:
+tp_fake_finger_is_touching	src/evdev-mt-touchpad.c	/^tp_fake_finger_is_touching(struct tp_dispatch *tp)$/;"	f	file:
+tp_fake_finger_set	src/evdev-mt-touchpad.c	/^tp_fake_finger_set(struct tp_dispatch *tp,$/;"	f	file:
+tp_filter_motion	src/evdev-mt-touchpad.c	/^tp_filter_motion(struct tp_dispatch *tp,$/;"	f
+tp_filter_motion_unaccelerated	src/evdev-mt-touchpad.c	/^tp_filter_motion_unaccelerated(struct tp_dispatch *tp,$/;"	f
+tp_for_each_touch	src/evdev-mt-touchpad.h	356;"	d
+tp_gesture_2fg_state	src/evdev-mt-touchpad.h	/^enum tp_gesture_2fg_state {$/;"	g
+tp_gesture_cancel	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_cancel(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_gesture_end	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_end(struct tp_dispatch *tp, uint64_t time, bool cancelled)$/;"	f	file:
+tp_gesture_finger_count_switch_timeout	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_finger_count_switch_timeout(uint64_t now, void *data)$/;"	f	file:
+tp_gesture_get_active_touches	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_get_active_touches(struct tp_dispatch *tp,$/;"	f	file:
+tp_gesture_get_direction	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_get_direction(struct tp_dispatch *tp, struct tp_touch *touch)$/;"	f	file:
+tp_gesture_get_pinch_info	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_get_pinch_info(struct tp_dispatch *tp,$/;"	f	file:
+tp_gesture_handle_state	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_handle_state(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_gesture_post_events	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_post_events(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_gesture_post_pointer_motion	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_post_pointer_motion(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_post_swipe	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_post_swipe(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_post_twofinger	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_post_twofinger(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_set_scroll_buildup	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_set_scroll_buildup(struct tp_dispatch *tp)$/;"	f	file:
+tp_gesture_start	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_start(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_stop	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_stop(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_gesture_stop_twofinger_scroll	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_stop_twofinger_scroll(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_gesture_twofinger_handle_state_none	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_twofinger_handle_state_none(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_twofinger_handle_state_pinch	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_twofinger_handle_state_pinch(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_twofinger_handle_state_scroll	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_twofinger_handle_state_scroll(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_gesture_twofinger_handle_state_unknown	src/evdev-mt-touchpad-gestures.c	/^tp_gesture_twofinger_handle_state_unknown(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_get_average_touches_delta	src/evdev-mt-touchpad-gestures.c	/^tp_get_average_touches_delta(struct tp_dispatch *tp)$/;"	f	file:
+tp_get_combined_touches_delta	src/evdev-mt-touchpad-gestures.c	/^tp_get_combined_touches_delta(struct tp_dispatch *tp)$/;"	f	file:
+tp_get_delta	src/evdev-mt-touchpad.c	/^tp_get_delta(struct tp_touch *t)$/;"	f
+tp_get_model	src/evdev-mt-touchpad.c	/^tp_get_model(struct evdev_device *device)$/;"	f	file:
+tp_get_touch	src/evdev-mt-touchpad.c	/^tp_get_touch(struct tp_dispatch *tp, unsigned int slot)$/;"	f	file:
+tp_get_touches_delta	src/evdev-mt-touchpad-gestures.c	/^tp_get_touches_delta(struct tp_dispatch *tp, bool average)$/;"	f	file:
+tp_handle_state	src/evdev-mt-touchpad.c	/^tp_handle_state(struct tp_dispatch *tp,$/;"	f	file:
+tp_hysteresis	src/evdev-mt-touchpad.c	/^tp_hysteresis(int in, int center, int margin)$/;"	f	file:
+tp_init	src/evdev-mt-touchpad.c	/^tp_init(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_accel	src/evdev-mt-touchpad.c	/^tp_init_accel(struct tp_dispatch *tp, double diagonal)$/;"	f	file:
+tp_init_buttons	src/evdev-mt-touchpad-buttons.c	/^tp_init_buttons(struct tp_dispatch *tp,$/;"	f
+tp_init_default_resolution	src/evdev-mt-touchpad.c	/^tp_init_default_resolution(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_dwt	src/evdev-mt-touchpad.c	/^tp_init_dwt(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_gesture	src/evdev-mt-touchpad-gestures.c	/^tp_init_gesture(struct tp_dispatch *tp)$/;"	f
+tp_init_middlebutton_emulation	src/evdev-mt-touchpad-buttons.c	/^tp_init_middlebutton_emulation(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_palmdetect	src/evdev-mt-touchpad.c	/^tp_init_palmdetect(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_scroll	src/evdev-mt-touchpad.c	/^tp_init_scroll(struct tp_dispatch *tp, struct evdev_device *device)$/;"	f	file:
+tp_init_sendevents	src/evdev-mt-touchpad.c	/^tp_init_sendevents(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_slots	src/evdev-mt-touchpad.c	/^tp_init_slots(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_softbuttons	src/evdev-mt-touchpad-buttons.c	/^tp_init_softbuttons(struct tp_dispatch *tp,$/;"	f	file:
+tp_init_tap	src/evdev-mt-touchpad-tap.c	/^tp_init_tap(struct tp_dispatch *tp)$/;"	f
+tp_init_thumb	src/evdev-mt-touchpad.c	/^tp_init_thumb(struct tp_dispatch *tp)$/;"	f	file:
+tp_init_top_softbuttons	src/evdev-mt-touchpad-buttons.c	/^tp_init_top_softbuttons(struct tp_dispatch *tp,$/;"	f
+tp_init_touch	src/evdev-mt-touchpad.c	/^tp_init_touch(struct tp_dispatch *tp,$/;"	f	file:
+tp_interface	src/evdev-mt-touchpad.c	/^static struct evdev_dispatch_interface tp_interface = {$/;"	v	typeref:struct:evdev_dispatch_interface	file:
+tp_interface_destroy	src/evdev-mt-touchpad.c	/^tp_interface_destroy(struct evdev_dispatch *dispatch)$/;"	f	file:
+tp_interface_device_added	src/evdev-mt-touchpad.c	/^tp_interface_device_added(struct evdev_device *device,$/;"	f	file:
+tp_interface_device_removed	src/evdev-mt-touchpad.c	/^tp_interface_device_removed(struct evdev_device *device,$/;"	f	file:
+tp_interface_process	src/evdev-mt-touchpad.c	/^tp_interface_process(struct evdev_dispatch *dispatch,$/;"	f	file:
+tp_interface_remove	src/evdev-mt-touchpad.c	/^tp_interface_remove(struct evdev_dispatch *dispatch)$/;"	f	file:
+tp_interface_suspend	src/evdev-mt-touchpad.c	/^tp_interface_suspend(struct evdev_dispatch *dispatch,$/;"	f	file:
+tp_key_ignore_for_dwt	src/evdev-mt-touchpad.c	/^tp_key_ignore_for_dwt(unsigned int keycode)$/;"	f	file:
+tp_keyboard_event	src/evdev-mt-touchpad.c	/^tp_keyboard_event(uint64_t time, struct libinput_event *event, void *data)$/;"	f	file:
+tp_keyboard_timeout	src/evdev-mt-touchpad.c	/^tp_keyboard_timeout(uint64_t now, void *data)$/;"	f	file:
+tp_libinput_context	src/evdev-mt-touchpad.h	/^tp_libinput_context(struct tp_dispatch *tp)$/;"	f
+tp_motion_history_offset	src/evdev-mt-touchpad.c	/^tp_motion_history_offset(struct tp_touch *t, int offset)$/;"	f	file:
+tp_motion_history_push	src/evdev-mt-touchpad.c	/^tp_motion_history_push(struct tp_touch *t)$/;"	f	file:
+tp_motion_history_reset	src/evdev-mt-touchpad.c	/^tp_motion_history_reset(struct tp_touch *t)$/;"	f	file:
+tp_motion_hysteresis	src/evdev-mt-touchpad.c	/^tp_motion_hysteresis(struct tp_dispatch *tp,$/;"	f	file:
+tp_need_motion_history_reset	src/evdev-mt-touchpad.c	/^tp_need_motion_history_reset(struct tp_dispatch *tp)$/;"	f	file:
+tp_new_touch	src/evdev-mt-touchpad.c	/^tp_new_touch(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_normalize_delta	src/evdev-mt-touchpad.h	/^tp_normalize_delta(struct tp_dispatch *tp, struct device_float_coords delta)$/;"	f
+tp_notify_clickpadbutton	src/evdev-mt-touchpad-buttons.c	/^tp_notify_clickpadbutton(struct tp_dispatch *tp,$/;"	f	file:
+tp_palm_detect	src/evdev-mt-touchpad.c	/^tp_palm_detect(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_palm_detect_dwt	src/evdev-mt-touchpad.c	/^tp_palm_detect_dwt(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_palm_detect_trackpoint	src/evdev-mt-touchpad.c	/^tp_palm_detect_trackpoint(struct tp_dispatch *tp,$/;"	f	file:
+tp_palm_tap_is_palm	src/evdev-mt-touchpad.c	/^tp_palm_tap_is_palm(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f
+tp_pin_fingers	src/evdev-mt-touchpad.c	/^tp_pin_fingers(struct tp_dispatch *tp)$/;"	f	file:
+tp_position_fake_touches	src/evdev-mt-touchpad.c	/^tp_position_fake_touches(struct tp_dispatch *tp)$/;"	f	file:
+tp_post_button_events	src/evdev-mt-touchpad-buttons.c	/^tp_post_button_events(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_post_clickpadbutton_buttons	src/evdev-mt-touchpad-buttons.c	/^tp_post_clickpadbutton_buttons(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_post_events	src/evdev-mt-touchpad.c	/^tp_post_events(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_post_physical_buttons	src/evdev-mt-touchpad-buttons.c	/^tp_post_physical_buttons(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_post_process_state	src/evdev-mt-touchpad.c	/^tp_post_process_state(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_process_absolute	src/evdev-mt-touchpad.c	/^tp_process_absolute(struct tp_dispatch *tp,$/;"	f	file:
+tp_process_absolute_st	src/evdev-mt-touchpad.c	/^tp_process_absolute_st(struct tp_dispatch *tp,$/;"	f	file:
+tp_process_button	src/evdev-mt-touchpad-buttons.c	/^tp_process_button(struct tp_dispatch *tp,$/;"	f
+tp_process_fake_touches	src/evdev-mt-touchpad.c	/^tp_process_fake_touches(struct tp_dispatch *tp,$/;"	f	file:
+tp_process_key	src/evdev-mt-touchpad.c	/^tp_process_key(struct tp_dispatch *tp,$/;"	f	file:
+tp_process_state	src/evdev-mt-touchpad.c	/^tp_process_state(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_process_trackpoint_button	src/evdev-mt-touchpad.c	/^tp_process_trackpoint_button(struct tp_dispatch *tp,$/;"	f	file:
+tp_release_all_buttons	src/evdev-mt-touchpad-buttons.c	/^tp_release_all_buttons(struct tp_dispatch *tp,$/;"	f
+tp_release_all_taps	src/evdev-mt-touchpad-tap.c	/^tp_release_all_taps(struct tp_dispatch *tp, uint64_t now)$/;"	f
+tp_release_fake_touches	src/evdev-mt-touchpad.c	/^tp_release_fake_touches(struct tp_dispatch *tp)$/;"	f	file:
+tp_remove_buttons	src/evdev-mt-touchpad-buttons.c	/^tp_remove_buttons(struct tp_dispatch *tp)$/;"	f
+tp_remove_edge_scroll	src/evdev-mt-touchpad-edge-scroll.c	/^tp_remove_edge_scroll(struct tp_dispatch *tp)$/;"	f
+tp_remove_gesture	src/evdev-mt-touchpad-gestures.c	/^tp_remove_gesture(struct tp_dispatch *tp)$/;"	f
+tp_remove_sendevents	src/evdev-mt-touchpad.c	/^tp_remove_sendevents(struct tp_dispatch *tp)$/;"	f	file:
+tp_remove_tap	src/evdev-mt-touchpad-tap.c	/^tp_remove_tap(struct tp_dispatch *tp)$/;"	f
+tp_restore_synaptics_touches	src/evdev-mt-touchpad.c	/^tp_restore_synaptics_touches(struct tp_dispatch *tp,$/;"	f	file:
+tp_resume	src/evdev-mt-touchpad.c	/^tp_resume(struct tp_dispatch *tp, struct evdev_device *device)$/;"	f	file:
+tp_sanity_check	src/evdev-mt-touchpad.c	/^tp_sanity_check(struct tp_dispatch *tp,$/;"	f	file:
+tp_scroll_config_scroll_method_get_default_method	src/evdev-mt-touchpad.c	/^tp_scroll_config_scroll_method_get_default_method(struct libinput_device *device)$/;"	f	file:
+tp_scroll_config_scroll_method_get_method	src/evdev-mt-touchpad.c	/^tp_scroll_config_scroll_method_get_method(struct libinput_device *device)$/;"	f	file:
+tp_scroll_config_scroll_method_get_methods	src/evdev-mt-touchpad.c	/^tp_scroll_config_scroll_method_get_methods(struct libinput_device *device)$/;"	f	file:
+tp_scroll_config_scroll_method_set_method	src/evdev-mt-touchpad.c	/^tp_scroll_config_scroll_method_set_method(struct libinput_device *device,$/;"	f	file:
+tp_scroll_get_default_method	src/evdev-mt-touchpad.c	/^tp_scroll_get_default_method(struct tp_dispatch *tp)$/;"	f	file:
+tp_scroll_get_methods	src/evdev-mt-touchpad.c	/^tp_scroll_get_methods(struct tp_dispatch *tp)$/;"	f	file:
+tp_sendevents_get_default_mode	src/evdev-mt-touchpad.c	/^tp_sendevents_get_default_mode(struct libinput_device *device)$/;"	f	file:
+tp_sendevents_get_mode	src/evdev-mt-touchpad.c	/^tp_sendevents_get_mode(struct libinput_device *device)$/;"	f	file:
+tp_sendevents_get_modes	src/evdev-mt-touchpad.c	/^tp_sendevents_get_modes(struct libinput_device *device)$/;"	f	file:
+tp_sendevents_set_mode	src/evdev-mt-touchpad.c	/^tp_sendevents_set_mode(struct libinput_device *device,$/;"	f	file:
+tp_suspend	src/evdev-mt-touchpad.c	/^tp_suspend(struct tp_dispatch *tp, struct evdev_device *device)$/;"	f	file:
+tp_suspend_conditional	src/evdev-mt-touchpad.c	/^tp_suspend_conditional(struct tp_dispatch *tp,$/;"	f	file:
+tp_switch_click_method	src/evdev-mt-touchpad-buttons.c	/^tp_switch_click_method(struct tp_dispatch *tp)$/;"	f	file:
+tp_sync_touch	src/evdev-mt-touchpad.c	/^tp_sync_touch(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_clear_timer	src/evdev-mt-touchpad-tap.c	/^tp_tap_clear_timer(struct tp_dispatch *tp)$/;"	f	file:
+tp_tap_config_count	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_count(struct libinput_device *device)$/;"	f	file:
+tp_tap_config_get_default	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_get_default(struct libinput_device *device)$/;"	f	file:
+tp_tap_config_get_default_draglock_enabled	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_get_default_draglock_enabled(struct libinput_device *device)$/;"	f	file:
+tp_tap_config_get_draglock_enabled	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_get_draglock_enabled(struct libinput_device *device)$/;"	f	file:
+tp_tap_config_is_enabled	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_is_enabled(struct libinput_device *device)$/;"	f	file:
+tp_tap_config_set_draglock_enabled	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_set_draglock_enabled(struct libinput_device *device,$/;"	f	file:
+tp_tap_config_set_enabled	src/evdev-mt-touchpad-tap.c	/^tp_tap_config_set_enabled(struct libinput_device *device,$/;"	f	file:
+tp_tap_dead_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_dead_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_default	src/evdev-mt-touchpad-tap.c	/^tp_tap_default(struct evdev_device *evdev)$/;"	f	file:
+tp_tap_dragging	src/evdev-mt-touchpad-tap.c	/^tp_tap_dragging(struct tp_dispatch *tp)$/;"	f
+tp_tap_dragging2_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_dragging2_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_dragging_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_dragging_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_dragging_or_doubletap_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_dragging_or_doubletap_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_dragging_tap_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_dragging_tap_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_dragging_wait_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_dragging_wait_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_enabled	src/evdev-mt-touchpad-tap.c	/^tp_tap_enabled(struct tp_dispatch *tp)$/;"	f	file:
+tp_tap_enabled_update	src/evdev-mt-touchpad-tap.c	/^tp_tap_enabled_update(struct tp_dispatch *tp, bool suspended, bool enabled, uint64_t time)$/;"	f	file:
+tp_tap_exceeds_motion_threshold	src/evdev-mt-touchpad-tap.c	/^tp_tap_exceeds_motion_threshold(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_handle_state	src/evdev-mt-touchpad-tap.c	/^tp_tap_handle_state(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_tap_handle_timeout	src/evdev-mt-touchpad-tap.c	/^tp_tap_handle_timeout(uint64_t time, void *data)$/;"	f	file:
+tp_tap_hold_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_hold_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_idle_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_idle_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_multitap_down_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_multitap_down_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_multitap_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_multitap_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_notify	src/evdev-mt-touchpad-tap.c	/^tp_tap_notify(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_resume	src/evdev-mt-touchpad-tap.c	/^tp_tap_resume(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_tap_set_drag_timer	src/evdev-mt-touchpad-tap.c	/^tp_tap_set_drag_timer(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_tap_set_timer	src/evdev-mt-touchpad-tap.c	/^tp_tap_set_timer(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_tap_state	src/evdev-mt-touchpad.h	/^enum tp_tap_state {$/;"	g
+tp_tap_suspend	src/evdev-mt-touchpad-tap.c	/^tp_tap_suspend(struct tp_dispatch *tp, uint64_t time)$/;"	f
+tp_tap_tapped_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_tapped_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_touch2_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_touch2_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_touch2_hold_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_touch2_hold_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_touch3_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_touch3_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_touch3_hold_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_touch3_hold_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_touch_handle_event	src/evdev-mt-touchpad-tap.c	/^tp_tap_touch_handle_event(struct tp_dispatch *tp,$/;"	f	file:
+tp_tap_touch_state	src/evdev-mt-touchpad.h	/^enum tp_tap_touch_state {$/;"	g
+tp_thumb_detect	src/evdev-mt-touchpad.c	/^tp_thumb_detect(struct tp_dispatch *tp, struct tp_touch *t, uint64_t time)$/;"	f	file:
+tp_thumb_state	src/evdev-mt-touchpad.h	/^enum tp_thumb_state {$/;"	g
+tp_touch	src/evdev-mt-touchpad.h	/^struct tp_touch {$/;"	s
+tp_touch_active	src/evdev-mt-touchpad.c	/^tp_touch_active(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f
+tp_touch_get_edge	src/evdev-mt-touchpad-edge-scroll.c	/^tp_touch_get_edge(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f
+tp_trackpoint_event	src/evdev-mt-touchpad.c	/^tp_trackpoint_event(uint64_t time, struct libinput_event *event, void *data)$/;"	f	file:
+tp_trackpoint_timeout	src/evdev-mt-touchpad.c	/^tp_trackpoint_timeout(uint64_t now, void *data)$/;"	f	file:
+tp_unhover_abs_distance	src/evdev-mt-touchpad.c	/^tp_unhover_abs_distance(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_unhover_fake_touches	src/evdev-mt-touchpad.c	/^tp_unhover_fake_touches(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_unhover_touches	src/evdev-mt-touchpad.c	/^tp_unhover_touches(struct tp_dispatch *tp, uint64_t time)$/;"	f	file:
+tp_unnormalize_for_xaxis	src/evdev-mt-touchpad.h	/^tp_unnormalize_for_xaxis(struct tp_dispatch *tp, struct normalized_coords delta)$/;"	f
+tp_unpin_finger	src/evdev-mt-touchpad.c	/^tp_unpin_finger(struct tp_dispatch *tp, struct tp_touch *t)$/;"	f	file:
+tp_want_dwt	src/evdev-mt-touchpad.c	/^tp_want_dwt(struct evdev_device *touchpad,$/;"	f	file:
+tracker_by_offset	src/filter.c	/^tracker_by_offset(struct pointer_accelerator *accel, unsigned int offset)$/;"	f	file:
+trackers	src/filter.c	/^	struct pointer_tracker *trackers;$/;"	m	struct:pointer_accelerator	typeref:struct:pointer_accelerator::pointer_tracker	file:
+tracking_id	test/litest.h	/^	int tracking_id;$/;"	m	struct:litest_semi_mt
+trackpoint	src/evdev-mt-touchpad.h	/^		struct evdev_device *trackpoint;$/;"	m	struct:tp_dispatch::__anon23	typeref:struct:tp_dispatch::__anon23::evdev_device
+trackpoint_accel_profile	src/filter.c	/^trackpoint_accel_profile(struct motion_filter *filter,$/;"	f
+trackpoint_active	src/evdev-mt-touchpad.h	/^		bool trackpoint_active;$/;"	m	struct:tp_dispatch::__anon29
+trackpoint_last_event_time	src/evdev-mt-touchpad.h	/^		uint64_t trackpoint_last_event_time;$/;"	m	struct:tp_dispatch::__anon29
+trackpoint_listener	src/evdev-mt-touchpad.h	/^		struct libinput_event_listener trackpoint_listener;$/;"	m	struct:tp_dispatch::__anon29	typeref:struct:tp_dispatch::__anon29::libinput_event_listener
+trackpoint_timer	src/evdev-mt-touchpad.h	/^		struct libinput_timer trackpoint_timer;$/;"	m	struct:tp_dispatch::__anon29	typeref:struct:tp_dispatch::__anon29::libinput_timer
+transform_absolute	.pc/touch-point-orientation-size.patch/src/evdev.c	/^transform_absolute(struct evdev_device *device,$/;"	f	file:
+transform_absolute	src/evdev.c	/^transform_absolute(struct evdev_device *device,$/;"	f	file:
+trigger	include/linux/input.h	/^	struct ff_trigger trigger;$/;"	m	struct:ff_effect	typeref:struct:ff_effect::ff_trigger
+twofinger_state	src/evdev-mt-touchpad.h	/^		enum tp_gesture_2fg_state twofinger_state;$/;"	m	struct:tp_dispatch::__anon22	typeref:enum:tp_dispatch::__anon22::tp_gesture_2fg_state
+type	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	enum libinput_event_type type;$/;"	m	struct:libinput_event	typeref:enum:libinput_event::libinput_event_type
+type	include/linux/input.h	/^	__u16 type;$/;"	m	struct:ff_effect
+type	include/linux/input.h	/^	__u16 type;$/;"	m	struct:input_event
+type	src/libinput-private.h	/^	enum libinput_event_type type;$/;"	m	struct:libinput_event	typeref:enum:libinput_event::libinput_event_type
+type	test/litest-int.h	/^       enum litest_device_type type;$/;"	m	struct:litest_test_device	typeref:enum:litest_test_device::litest_device_type
+u	include/linux/input.h	/^	} u;$/;"	m	struct:ff_effect	typeref:union:ff_effect::__anon41
+udev	src/path.h	/^	struct udev *udev;$/;"	m	struct:path_input	typeref:struct:path_input::udev
+udev	src/udev-seat.h	/^	struct udev *udev;$/;"	m	struct:udev_input	typeref:struct:udev_input::udev
+udev_device	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	struct udev_device *udev_device;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::udev_device
+udev_device	src/evdev.h	/^	struct udev_device *udev_device;$/;"	m	struct:evdev_device	typeref:struct:evdev_device::udev_device
+udev_device	src/path.h	/^	struct udev_device *udev_device;$/;"	m	struct:path_device	typeref:struct:path_device::udev_device
+udev_device_change_seat	src/udev-seat.c	/^udev_device_change_seat(struct libinput_device *device,$/;"	f	file:
+udev_device_from_devnode	src/path.c	/^udev_device_from_devnode(struct libinput *libinput,$/;"	f	file:
+udev_input	src/udev-seat.h	/^struct udev_input {$/;"	s
+udev_input_add_devices	src/udev-seat.c	/^udev_input_add_devices(struct udev_input *input, struct udev *udev)$/;"	f	file:
+udev_input_destroy	src/udev-seat.c	/^udev_input_destroy(struct libinput *input)$/;"	f	file:
+udev_input_disable	src/udev-seat.c	/^udev_input_disable(struct libinput *libinput)$/;"	f	file:
+udev_input_enable	src/udev-seat.c	/^udev_input_enable(struct libinput *libinput)$/;"	f	file:
+udev_input_remove_devices	src/udev-seat.c	/^udev_input_remove_devices(struct udev_input *input)$/;"	f	file:
+udev_monitor	src/udev-seat.h	/^	struct udev_monitor *udev_monitor;$/;"	m	struct:udev_input	typeref:struct:udev_input::udev_monitor
+udev_monitor_source	src/udev-seat.h	/^	struct libinput_source *udev_monitor_source;$/;"	m	struct:udev_input	typeref:struct:udev_input::libinput_source
+udev_rule	test/litest-device-mouse-low-dpi.c	/^static const char udev_rule[] =$/;"	v	file:
+udev_rule	test/litest-device-synaptics-hover.c	/^static const char udev_rule[] =$/;"	v	file:
+udev_rule	test/litest-device-wheel-only.c	/^static const char udev_rule[] =$/;"	v	file:
+udev_rule	test/litest-int.h	/^       const char *udev_rule;$/;"	m	struct:litest_test_device
+udev_rule_file	test/litest.h	/^	char *udev_rule_file;$/;"	m	struct:litest_device
+udev_seat	src/udev-seat.h	/^struct udev_seat {$/;"	s
+udev_seat_create	src/udev-seat.c	/^udev_seat_create(struct udev_input *input,$/;"	f	file:
+udev_seat_destroy	src/udev-seat.c	/^udev_seat_destroy(struct libinput_seat *seat)$/;"	f	file:
+udev_seat_get_named	src/udev-seat.c	/^udev_seat_get_named(struct udev_input *input, const char *seat_name)$/;"	f	file:
+uinput	test/litest.h	/^	struct libevdev_uinput *uinput;$/;"	m	struct:litest_device	typeref:struct:litest_device::libevdev_uinput
+up	test/litest-device-atmel-hover.c	/^static struct input_event up[] = {$/;"	v	typeref:struct:input_event	file:
+up	test/litest-device-synaptics-st.c	/^struct input_event up[] = {$/;"	v	typeref:struct:input_event
+update_key_down_count	.pc/touch-point-orientation-size.patch/src/evdev.c	/^update_key_down_count(struct evdev_device *device, int code, int pressed)$/;"	f	file:
+update_key_down_count	src/evdev.c	/^update_key_down_count(struct evdev_device *device, int code, int pressed)$/;"	f	file:
+update_seat_button_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^update_seat_button_count(struct libinput_seat *seat,$/;"	f	file:
+update_seat_button_count	src/libinput.c	/^update_seat_button_count(struct libinput_seat *seat,$/;"	f	file:
+update_seat_key_count	.pc/touch-point-orientation-size.patch/src/libinput.c	/^update_seat_key_count(struct libinput_seat *seat,$/;"	f	file:
+update_seat_key_count	src/libinput.c	/^update_seat_key_count(struct libinput_seat *seat,$/;"	f	file:
+upper	test/litest.h	/^	int upper; \/* exclusive *\/$/;"	m	struct:range
+upper_thumb_line	src/evdev-mt-touchpad.h	/^		int upper_thumb_line;$/;"	m	struct:tp_dispatch::__anon32
+us	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^us(uint64_t us)$/;"	f
+us	src/libinput-util.h	/^us(uint64_t us)$/;"	f
+us2ms	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^us2ms(uint64_t us)$/;"	f
+us2ms	src/libinput-util.h	/^us2ms(uint64_t us)$/;"	f
+usage	tools/libinput-list-devices.c	/^usage(void)$/;"	f	file:
+usage	tools/ptraccel-debug.c	/^usage(void)$/;"	f	file:
+usage_error	test-driver	/^usage_error ()$/;"	f
+use_clickfinger	src/evdev-mt-touchpad.h	/^		bool use_clickfinger;		\/* number of fingers decides button number *\/$/;"	m	struct:tp_dispatch::__anon23
+user_data	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput
+user_data	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput_device
+user_data	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput_device_group
+user_data	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput_seat
+user_data	.pc/touch-point-orientation-size.patch/src/libinput.c	/^	void *user_data;$/;"	m	struct:libinput_source	file:
+user_data	src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput
+user_data	src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput_device
+user_data	src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput_device_group
+user_data	src/libinput-private.h	/^	void *user_data;$/;"	m	struct:libinput_seat
+user_data	src/libinput.c	/^	void *user_data;$/;"	m	struct:libinput_source	file:
+user_data	tools/shared.h	/^	void *user_data;$/;"	m	struct:tools_context
+usermatrix	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		struct matrix usermatrix; \/* as supplied by the caller *\/$/;"	m	struct:evdev_device::__anon4	typeref:struct:evdev_device::__anon4::matrix
+usermatrix	src/evdev.h	/^		struct matrix usermatrix; \/* as supplied by the caller *\/$/;"	m	struct:evdev_device::__anon34	typeref:struct:evdev_device::__anon34::matrix
+v_ms2us	src/filter.c	/^v_ms2us(double units_per_ms)$/;"	f	file:
+v_us2ms	src/filter.c	/^v_us2ms(double units_per_us)$/;"	f	file:
+val	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^	float val[3][3]; \/* [row][col] *\/$/;"	m	struct:matrix
+val	src/libinput-util.h	/^	float val[3][3]; \/* [row][col] *\/$/;"	m	struct:matrix
+value	include/linux/input.h	/^	__s32 value;$/;"	m	struct:input_absinfo
+value	include/linux/input.h	/^	__s32 value;$/;"	m	struct:input_event
+value	test/litest.h	/^	int32_t value;$/;"	m	struct:axis_replacement
+velocity	src/filter.c	/^	double velocity;	\/* units\/us *\/$/;"	m	struct:pointer_accelerator	file:
+vendor	include/linux/input.h	/^	__u16 vendor;$/;"	m	struct:input_id
+vendor	src/evdev-mt-touchpad.c	/^	uint16_t vendor;$/;"	m	struct:model_lookup_t	file:
+verbose	.pc/fix-litest.patch/test/litest.c	/^static int verbose = 0;$/;"	v	file:
+verbose	test/litest.c	/^static int verbose = 0;$/;"	v	file:
+verbose	tools/shared.h	/^	int verbose;$/;"	m	struct:tools_options
+version	include/linux/input.h	/^	__u16 version;$/;"	m	struct:input_id
+vert_center	src/evdev-mt-touchpad.h	/^		int32_t vert_center;		\/* in device coordinates *\/$/;"	m	struct:tp_dispatch::__anon29
+vx	tools/event-gui.c	/^	double vx, vy;$/;"	m	struct:window	file:
+vy	tools/event-gui.c	/^	double vx, vy;$/;"	m	struct:window	file:
+want_button	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		uint32_t want_button;$/;"	m	struct:evdev_device::__anon6
+want_button	src/evdev.h	/^		uint32_t want_button;$/;"	m	struct:evdev_device::__anon36
+want_enabled	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool want_enabled;$/;"	m	struct:evdev_device::__anon8
+want_enabled	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		bool want_enabled;$/;"	m	struct:evdev_device::__anon9
+want_enabled	src/evdev.h	/^		bool want_enabled;$/;"	m	struct:evdev_device::__anon38
+want_enabled	src/evdev.h	/^		bool want_enabled;$/;"	m	struct:evdev_device::__anon39
+want_method	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		enum libinput_config_scroll_method want_method;$/;"	m	struct:evdev_device::__anon6	typeref:enum:evdev_device::__anon6::libinput_config_scroll_method
+want_method	src/evdev.h	/^		enum libinput_config_scroll_method want_method;$/;"	m	struct:evdev_device::__anon36	typeref:enum:evdev_device::__anon36::libinput_config_scroll_method
+was_removed	.pc/touch-point-orientation-size.patch/src/evdev.h	/^	bool was_removed;$/;"	m	struct:evdev_device
+was_removed	src/evdev.h	/^	bool was_removed;$/;"	m	struct:evdev_device
+waveform	include/linux/input.h	/^	__u16 waveform;$/;"	m	struct:ff_periodic_effect
+weak_magnitude	include/linux/input.h	/^	__u16 weak_magnitude;$/;"	m	struct:ff_rumble_effect
+wheel_click_angle	.pc/touch-point-orientation-size.patch/src/evdev.h	/^		int wheel_click_angle;$/;"	m	struct:evdev_device::__anon6
+wheel_click_angle	src/evdev.h	/^		int wheel_click_angle;$/;"	m	struct:evdev_device::__anon36
+width	tools/event-gui.c	/^	int width, height; \/* of window *\/$/;"	m	struct:window	file:
+win	tools/event-gui.c	/^	GtkWidget *win;$/;"	m	struct:window	file:
+window	tools/event-gui.c	/^struct window {$/;"	s	file:
+window_cleanup	tools/event-gui.c	/^window_cleanup(struct window *w)$/;"	f	file:
+window_init	tools/event-gui.c	/^window_init(struct window *w)$/;"	f	file:
+x	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	double x, y;$/;"	m	struct:device_float_coords
+x	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	double x, y;$/;"	m	struct:normalized_coords
+x	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int x, y;$/;"	m	struct:device_coords
+x	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int x, y;$/;"	m	struct:discrete_coords
+x	src/libinput-private.h	/^	double x, y;$/;"	m	struct:device_float_coords
+x	src/libinput-private.h	/^	double x, y;$/;"	m	struct:normalized_coords
+x	src/libinput-private.h	/^	int x, y;$/;"	m	struct:device_coords
+x	src/libinput-private.h	/^	int x, y;$/;"	m	struct:discrete_coords
+x	test/litest.h	/^		double x, y;$/;"	m	struct:litest_semi_mt::__anon11
+x	test/misc.c	/^	int x, y;$/;"	m	struct:parser_test_dimension	file:
+x	tools/event-gui.c	/^		double x, y;$/;"	m	struct:window::__anon1	file:
+x	tools/event-gui.c	/^		double x, y;$/;"	m	struct:window::__anon2	file:
+x	tools/event-gui.c	/^	double x, y;$/;"	m	struct:window	file:
+x	tools/event-gui.c	/^	int x, y;$/;"	m	struct:touch	file:
+x_scale_coeff	src/evdev-mt-touchpad.h	/^			double x_scale_coeff;$/;"	m	struct:tp_dispatch::__anon23::__anon24
+x_scale_coeff	src/evdev-mt-touchpad.h	/^		double x_scale_coeff;$/;"	m	struct:tp_dispatch::__anon21
+xasprintf	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^xasprintf(char **strp, const char *fmt, ...)$/;"	f
+xasprintf	src/libinput-util.h	/^xasprintf(char **strp, const char *fmt, ...)$/;"	f
+y	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	double x, y;$/;"	m	struct:device_float_coords
+y	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	double x, y;$/;"	m	struct:normalized_coords
+y	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int x, y;$/;"	m	struct:device_coords
+y	.pc/touch-point-orientation-size.patch/src/libinput-private.h	/^	int x, y;$/;"	m	struct:discrete_coords
+y	src/libinput-private.h	/^	double x, y;$/;"	m	struct:device_float_coords
+y	src/libinput-private.h	/^	double x, y;$/;"	m	struct:normalized_coords
+y	src/libinput-private.h	/^	int x, y;$/;"	m	struct:device_coords
+y	src/libinput-private.h	/^	int x, y;$/;"	m	struct:discrete_coords
+y	test/litest.h	/^		double x, y;$/;"	m	struct:litest_semi_mt::__anon11
+y	test/misc.c	/^	int x, y;$/;"	m	struct:parser_test_dimension	file:
+y	tools/event-gui.c	/^		double x, y;$/;"	m	struct:window::__anon1	file:
+y	tools/event-gui.c	/^		double x, y;$/;"	m	struct:window::__anon2	file:
+y	tools/event-gui.c	/^	double x, y;$/;"	m	struct:window	file:
+y	tools/event-gui.c	/^	int x, y;$/;"	m	struct:touch	file:
+y_scale_coeff	src/evdev-mt-touchpad.h	/^			double y_scale_coeff;$/;"	m	struct:tp_dispatch::__anon23::__anon24
+y_scale_coeff	src/evdev-mt-touchpad.h	/^		double y_scale_coeff;$/;"	m	struct:tp_dispatch::__anon21
+zalloc	.pc/touch-point-orientation-size.patch/src/libinput-util.h	/^zalloc(size_t size)$/;"	f
+zalloc	src/libinput-util.h	/^zalloc(size_t size)$/;"	f
